{"version":3,"sources":["images/LiberTEM logo-medium.png","cluster/actions.ts","About.tsx","helpers/actionHelpers.ts","helpers/index.ts","messages.ts","browser/actions.ts","cluster/components/LocalConnectionForm.tsx","cluster/components/TCPConnectionForm.tsx","cluster/components/ClusterConnectionForm.tsx","channel/components/ChannelConnecting.tsx","channel/components/ChannelStatus.tsx","browser/components/FileBrowserEntry.tsx","browser/components/FileBrowserHeader.tsx","browser/components/FileEntry.tsx","browser/components/FolderEntry.tsx","browser/components/PathDropDownItem.tsx","browser/components/PathInput.tsx","browser/components/RecentFiles.tsx","browser/components/PathBar.tsx","browser/components/FileBrowser.tsx","browser/components/BrowserWrapper.tsx","widgets/constraints.ts","widgets/DraggableHandle.tsx","analysis/actions.ts","widgets/HandleParent.tsx","widgets/kbdHandler.ts","widgets/styles.ts","widgets/Disk.tsx","job/types.ts","widgets/BusySpinner.tsx","widgets/BusyWrapper.tsx","job/components/ResultImage.tsx","job/components/Result.tsx","job/components/ResultList.tsx","analysis/components/FrameViewModeSelector.tsx","analysis/components/Toolbar.tsx","analysis/components/AnalysisItem.tsx","analysis/components/FrameView.tsx","analysis/components/CenterOfMassAnalysis.tsx","analysis/components/DiskMaskAnalysis.tsx","widgets/Point.tsx","analysis/components/PointSelectionAnalysis.tsx","helpers/svg.ts","widgets/Ring.tsx","analysis/components/RingMaskAnalysis.tsx","analysis/components/Analysis.tsx","analysis/components/AnalysisList.tsx","helpers/reducerHelpers.ts","analysis/types.ts","dataset/actions.ts","analysis/components/AnalysisSelect.tsx","dataset/components/AddAnalysis.tsx","dataset/components/DatasetParams.tsx","dataset/components/DatasetInfo.tsx","dataset/components/DatasetToolbar.tsx","dataset/components/Dataset.tsx","dataset/helpers.ts","dataset/components/BLOParamsForm.tsx","errors/actions.ts","dataset/components/DatasetTypeSelect.tsx","dataset/components/HDF5ParamsForm.tsx","dataset/components/HDFSParamsForm.tsx","dataset/components/K2ISParamsForm.tsx","dataset/components/MIBParamsForm.tsx","dataset/components/RawFileParamsForm.tsx","dataset/components/SERParamsForm.tsx","dataset/components/DatasetOpen.tsx","dataset/components/DatasetOpenSpinner.tsx","dataset/components/DatasetList.tsx","errors/components/Error.tsx","errors/components/ErrorList.tsx","App.tsx","registerServiceWorker.ts","job/actions.ts","job/api.ts","analysis/sagas.ts","config/helpers.ts","browser/api.ts","channel/actions.ts","browser/sagas.ts","channel/messages.ts","channel/sagas.ts","cluster/api.ts","config/actions.ts","cluster/sagas.ts","config/api.ts","config/sagas.ts","dataset/api.ts","dataset/sagas.ts","sagas.ts","analysis/reducers.ts","browser/reducers.ts","channel/reducers.ts","cluster/reducers.ts","config/reducers.ts","dataset/reducers.ts","errors/reducers.ts","job/reducers.ts","store.ts","index.tsx"],"names":["module","exports","__webpack_require__","p","ActionTypes","connect","state","version","config","revision","_ref","react","Header","as","slice","List","Item","Icon","name","Content","href","src","alt","createAction","type","payload","meta","undefined","Actions","notConnected","NOT_CONNECTED","params","CONNECT","connected","CONNECTED","assertNotReached","message","Error","defaultDebounce","fn","delay","arguments","length","_","maxWait","getEnumValues","e","Object","keys","ClusterTypes","DatasetTypes","DatasetStatus","AnalysisTypes","ClusterTypeMetadata","_ClusterTypeMetadata","defineProperty","LOCAL","label","TCP","helpText","withFormik","mapPropsToValues","ownProps","numWorkers","localCores","handleSubmit","values","formikBag","onSubmit","props","objectSpread","touched","errors","isSubmitting","dirty","handleChange","handleBlur","handleReset","Form","Field","htmlFor","value","onChange","onBlur","Button","primary","disabled","address","mapDispatchToProps","connectToCluster","clusterActions","clusterTypeOptions","map","t","text","ClusterConnectionForm","clusterType","setType","_this","setState","data","this","components_LocalConnectionForm","components_TCPConnectionForm","Dropdown","inline","options","Segment","renderForm","React","ChannelConnecting","msg","Message","icon","loading","messages","waiting","connecting","clusterMessages","channelStatus","clusterConnection","haveConfig","children","status","components_ChannelConnecting","components_ClusterConnectionForm","list","path","LIST_DIRECTORY","dirListing","dirs","files","drives","places","DIRECTORY_LISTING","open","OPEN","cancel","CANCEL","select","SELECT","selectFullPath","SELECT_FULL_PATH","error","timestamp","id","ERROR","detectParams","DETECT_PARAMS","paramsDetected","PARAMS_DETECTED","TimeStamp","ts","date","Date","fmtDate","toLocaleDateString","fmtTime","toLocaleTimeString","title","concat","style","display","whiteSpace","width","marginRight","FileSize","_ref2","fmtSize","bytes","si","thresh","Math","abs","size","unit","units","u","toFixed","humanFileSize","textAlign","Cell","_ref3","overflow","textOverflow","FileBrowserEntry","onClick","_this$props","details","myStyle","cursor","tsStyles","paddingRight","flexGrow","FileBrowserEntry_Cell","FileBrowserEntry_FileSize","owner","FileBrowserEntry_TimeStamp","ctime","mtime","FileBrowserHeader","alignRight","paddingBottom","FileEntry","components_FileBrowserEntry","dispatch","browserActions","window","setTimeout","toString","objectWithoutProperties","newProps","initialPath","enableReinitialize","Input","autoComplete","lastOpened","fileHistory","separator","recentFiles","filter","item","floating","Menu","content","option","idx","key","refresh","currentPath","handleInputChange","goUp","driveOptions","placeOptions","components_RecentFiles","components_PathDropDownItem","components_PathInput","listRef","scrollToTop","current","scrollToItem","sortByKey","array","getKey","sort","a","b","x","y","browser","isLoading","getSortKey","toLowerCase","dirEntries","dir","components_FolderEntry","fileEntries","f","components_FileEntry","entries","index_esm","overflowY","ref","height","itemCount","itemSize","index","Group","components_PathBar","components_FileBrowserHeader","isOpen","components_FileBrowser","labelPosition","inRectConstraint","max","min","cbToRadius","cx","cy","cb","dx","dy","sqrt","dist","keepOnCY","riConstraint","outerPos","otherX","roConstraints","innerPos","Handle","scale","withCross","args","transform","stroke","strokeWidth","fill","crossSpec","r","cross","d","relativeCoords","parent","elem","svg","ownerSVGElement","inWidthAttr","getAttribute","inWidth","getBoundingClientRect","getScalingFactor","parentPos","pageX","left","scrollX","pageY","top","scrollY","DraggableHandle","_React$Component","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","posRef","dragging","drag","externalMouseMove","move","externalLeave","stopDrag","externalMouseUp","applyConstraint","constraint","startDrag","preventDefault","parentOnDragStart","assertThisInitialized","onDragMove","constrained","parentOnDrop","_this$state","inherits","createClass","imageWidth","visibility","DraggableHandle_Handle","onMouseUp","onMouseMove","onMouseDown","_this$state$drag","renderCommon","renderDragging","HandleParent","_getPrototypeOf2","_len","Array","_key","apply","currentHandle","handleDragStart","h","handleDrop","handleMouseMove","handleMouseLeave","handleMouseUp","onMouseLeave","onKeyDown","onKeyboardEvent","outline","tabIndex","renderChildren","_this2","child","handleKeyEvent","update","delta","shiftKey","defaultMaskStyles","fillOpacity","strokeOpacity","Disk","imageHeight","image","onCenterChange","onRChange","rHandle","border","viewBox","widgets_HandleParent","newCoords","widgets_DraggableHandle","JobRunning","JobStatus","create","dataset","analysisType","CREATE","created","analysis","CREATED","updateParameters","parameters","kind","UPDATE_PARAMETERS","setFrameViewMode","mode","initialParams","SET_FRAMEVIEW_MODE","prepareRun","job","PREPARE_RUN","run","RUN","running","RUNNING","remove","REMOVE","removed","REMOVED","BusySpinner","margin","padding","position","bottom","right","color","opacity","BusyWrapper","busy","widgets_BusySpinner","ResultImage","result","results","imageRendering","xlinkHref","imageURL","analysisActions","Result","frameDetails","PICK_FRAME","oldParams","newX","round","newY","_analysis$frameDetail","_this$props2","DONE","widgets_BusyWrapper","components_ResultImage","renderPickHandles","ResultList","selectedImg","selectImage","getJob","currentJob","jobsById","history","jobHistory","RESULT","pickCoords","img","components_Result","dt","endTimestamp","startTimestamp","ResultList_ResultImageSelector","ResultImageSelector","availableImages","description","analyses","byId","jobId","jobs","ds","datasets","SUM_FRAMES","frameViewModeOptions","FrameViewModeSelector","scanWidth","scanHeight","shape","getAnalysisStatus","handleApply","handleRemove","applyIconProps","attached","getFrameJob","frameJobId","FRAME","frameJob","subtitle","resultWidth","resultHeight","frameViewBusy","Grid","columns","Row","Column","components_FrameViewModeSelector","components_ResultList","components_Toolbar","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","tmpJobId","tmpJob","err","return","handleCenterChange","handleRChange","components_FrameView","components_AnalysisItem","widgets_Disk","Point","widgets_Point","getPathArc","center","start","end","radius","degree","points","push","getLocationFromAngle","clockWise","join","getCirclePath","radian","PI","cos","sin","Ring","ri","ro","onRIChange","onROChange","riHandle","roHandle","pathSpec","fillRule","handleRIChange","handleROChange","widgets_Ring","resultDetails","APPLY_DISK_MASK","components_DiskMaskAnalysis","APPLY_RING_MASK","components_RingMaskAnalysis","CENTER_OF_MASS","components_CenterOfMassAnalysis","APPLY_POINT_SELECTOR","components_PointSelectionAnalysis","AnalysisList","ids","analysisId","Analysis","updateById","partialRecord","newObj","assign","newById","insertById","record","toConsumableArray","filterWithPred","pred","reduce","acc","AnalysisMetadata","_AnalysisMetadata","long","short","showInUI","getMetadata","analysisTypeOptions","AnalysisSelect","labeled","button","className","handleAddAnalysis","components_AnalysisSelect","renderParams","Table","DatasetParams","HeaderCell","Body","DiagElem","DatasetInfo_DiagElems","diagnostics","renderValue","DiagElems","DatasetInfo_DiagElem","DatasetInfo","components_DatasetParams","cancelOpen","CANCEL_OPEN","delete","DELETE","deleted","DELETED","detect","DETECT","detected","DETECTED","detectFailed","DETECT_FAILED","handleRemoveDataset","datasetActions","DatasetContainer","_msg","OPENING","DELETING","dividing","marginTop","marginBottom","horizontal","Modal","trigger","link","Popup","components_DatasetInfo","flexShrink","components_DatasetToolbar","components_AnalysisList","components_AddAnalysis","parseNumList","nums","split","part","getInitial","otherwise","initial","tileshape","_formikBag$props","BLO","onCancel","datasetTypeOptions","DatasetTypeSelect","currentType","ds_path","HDF5","HDFS","K2IS","scan_size","MIB","components_RawFileParamsForm","detector_size_raw","crop_detector_to","dtype","RAW","SER","DatasetOpen","datasetType","setDatasetType","formInitial","formPath","createDataset","form","components_DatasetTypeSelect","components_HDF5ParamsForm","components_HDFSParamsForm","MIBParamsForm","BLOParamsForm","K2ISParamsForm","components_SERParamsForm","formVisible","openDataset","formInitialParams","uuid","busyPath","DatasetList","dsId","Dataset","components_DatasetOpenSpinner","components_DatasetOpen","components_BrowserWrapper","DISMISS","dismiss","errorActions","negative","onDismiss","clusterConnected","channelConnected","latestErrors","showModal","components_Error","App","Container","logo","alignSelf","src_About","components_ErrorList","components_ChannelStatus","components_DatasetList","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","startJob","datasetId","fetch","body","JSON","stringify","credentials","method","json","cancelJob","createAnalysisSaga","cancelOldJob","analysisSidecar","updateFrameViewMode","updateFrameViewParams","doRemoveAnalysisSaga","analysisRootSaga","getAnalysisDetails","minLength","selectDataset","selectAnalysis","selectJob","action","datasetState","sidecarTask","regenerator_default","wrap","_context","prev","sent","fork","put","take","t0","now","stop","_marked","_context2","abrupt","_marked2","runOrParamsChannel","oldJobId","_context3","actionChannel","buffers","sliding","jobActions","_marked3","_context4","_marked4","_context5","_marked5","_context6","finish","_marked6","_context7","takeEvery","_marked7","CONFIG_KEY","joinPaths","parts","replace","RegExp","trim","mergeLocalStorage","serverConfig","localSettings","localStorage","getItem","localSettingsParsed","parse","defaultConfig","setLocalStorage","setItem","getDirectoryListing","url","directoryListingSaga","fetchOnRequest","fetchDirectoryListing","fetchDirectoryListOnOpen","sagas_marked","_action$payload","newPath","sagas_marked2","browserState","alternative","_browserState","_timestamp","_id","home","sagas_marked3","cwd","sagas_marked4","MessageTypes","initialState","INITIAL_STATE","jobStarted","JOB_STARTED","finishJob","FINISH_JOB","taskResult","TASK_RESULT","jobError","JOB_ERROR","close","CLOSE","createMessage","messageType","attribs","Messages","followup","binary","objectURL","BINARY","deleteDataset","DELETE_DATASET","webSocketSaga","actionsFromChannel","handleBinaryParts","handleTaskResult","handleFinishJob","createWebSocketChannel","eventChannel","emit","onMessage","Blob","channelMessages","URL","createObjectURL","parsed","onOpen","onClose","END","onError","ws","WebSocket","port","addEventListener","removeEventListener","socketChannel","channelActions","channel_sagas_marked","channel_sagas_marked2","numParts","binMsg","channel_sagas_marked3","images","numMessages","descriptions","channel_sagas_marked4","sagas_marked5","connection","checkClusterConnection","connectSaga","putClusterStatus","trackClusterConnection","clusterConnectionSaga","conn","cluster_sagas_marked","cluster_sagas_marked2","cluster_sagas_marked3","all","cluster_sagas_marked4","FETCH","fetched","FETCHED","fetchFailed","FETCH_FAILED","getConfig","getConfigOnReconnect","getConfigSaga","updateLocalStorageConfig","firstConfigFetch","configRootSaga","config_sagas_marked","configResponse","mergedConfig","configActions","removeItem","config_sagas_marked2","config_sagas_marked3","config_sagas_marked4","config_sagas_marked5","detectDataset","createDatasetSaga","deleteDatasetSaga","doOpenDataset","openDatasetSagaFullPath","openDatasetSaga","datasetRootSaga","resp","dataset_sagas_marked","dataset_sagas_marked2","fullPath","prefillParams","detectResult","datasetParams","dataset_sagas_marked3","dataset_sagas_marked4","dataset_sagas_marked5","sagas_marked6","rootSaga","src_sagas_marked","initialAnalysisState","ChannelStatusCodes","initialBrowserState","initialChannelState","WAITING","initialClusterConnectionState","initialConfigState","initialDatasetState","initialOpenDatasetState","initialErrorState","initialJobState","rootReducer","combineReducers","newDetails","oldJob","newJobs","newFrameDetails","READY","items","CREATING","IN_PROGRESS","SUCCESS","_action$payload2","inp","newLastOpened","newFileHistory","curr","indexOf","place","sagaMiddleware","createSagaMiddleware","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","ReactDOM","es","src_App","document","getElementById","process","origin","response","headers","get","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.145ebaa7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/LiberTEM logo-medium.7999e0dc.png\";","import { ActionsUnion, createAction } from '../helpers/actionHelpers';\nimport { ConnectRequestParams } from '../messages';\n\nexport enum ActionTypes {\n    NOT_CONNECTED = 'CLUSTER_NOT_CONNECTED',\n    CONNECT = 'CLUSTER_CONNECT',\n    CONNECTED = 'CLUSTER_CONNECTED',\n}\n\nexport const Actions = {\n    notConnected: () => createAction(ActionTypes.NOT_CONNECTED),\n    connect: (params: ConnectRequestParams) => createAction(ActionTypes.CONNECT, { params }),\n    connected: (params: ConnectRequestParams) => createAction(ActionTypes.CONNECTED, { params }),\n}\n\nexport type Actions = ActionsUnion<typeof Actions>;\n","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Header, List } from \"semantic-ui-react\";\nimport { RootReducer } from \"./store\";\n\nconst mapStateToProps = (state: RootReducer) => {\n    return {\n        version: state.config.version,\n        revision: state.config.revision,\n    }\n}\n\ntype MergedProps = ReturnType<typeof mapStateToProps>;\n\nconst About: React.SFC<MergedProps> = ({ version, revision }) => {\n    return (\n        <>\n            <Header as=\"h3\">This is LiberTEM version {version} (revision {revision.slice(0, 8)})</Header>\n            <List>\n                <List.Item>\n                    <List.Icon name=\"github\" />\n                    <List.Content>\n                        Find us on <a href=\"https://github.com/LiberTEM/LiberTEM\">GitHub</a>\n                    </List.Content>\n                </List.Item>\n                <List.Item>\n                    <List.Icon name=\"bug\" />\n                    <List.Content>\n                        Found a bug? Got a feature request? Please <a href=\"https://github.com/LiberTEM/LiberTEM/issues/new\">open an issue!</a>\n                    </List.Content>\n                </List.Item>\n                <List.Item>\n                    <List.Icon name=\"legal\" />\n                    <List.Content>\n                        LiberTEM is licensed under the <a href=\"https://github.com/LiberTEM/LiberTEM/blob/master/LICENSE\">GNU General Public License v3.0</a>\n                    </List.Content>\n                </List.Item>\n                <List.Item>\n                    <List.Icon name=\"book\" />\n                    <List.Content>\n                        Read <a href=\"https://libertem.github.io/LiberTEM/\">the documentation</a>\n                    </List.Content>\n                </List.Item>\n                <List.Item>\n                    <List.Icon name=\"user\" />\n                    <List.Content>\n                        Read <a href=\"https://libertem.github.io/LiberTEM/acknowledgments.html\">the acknowledgments</a>\n                    </List.Content>\n                </List.Item>\n                <List.Item>\n                    <List.Icon name=\"gitter\" />\n                    <List.Content>\n                        Join our <a href=\"https://gitter.im/LiberTEM/Lobby\">chat on gitter!</a>\n                    </List.Content>\n                </List.Item>\n                <List.Item>\n                    <List.Icon name=\"linkify\" />\n                    <List.Content>\n                    <a href=\"https://doi.org/10.5281/zenodo.1478763\"><img src=\"https://zenodo.org/badge/DOI/10.5281/zenodo.1478763.svg\" alt=\"DOI\"/></a>\n                    </List.Content>\n                </List.Item>\n            </List>\n        </>\n    );\n}\n\nexport default connect(mapStateToProps)(About);","import { ActionCreatorsMapObject } from \"redux\";\n\nexport interface Action<T extends string> {\n    type: T\n}\n\nexport interface ActionWithPayload<T extends string, P> extends Action<T> {\n    payload: P\n}\n\nexport interface ActionWithMeta<T extends string, P, M> extends ActionWithPayload<T, P> {\n    meta: M\n}\n\nexport function createAction<T extends string>(type: T): Action<T>\nexport function createAction<T extends string, P, M>(type: T, payload?: P): ActionWithPayload<T, P>\nexport function createAction<T extends string, P, M>(type: T, payload?: P, meta?: M): ActionWithMeta<T, P, M>\nexport function createAction<T extends string, P, M>(type: T, payload?: P, meta?: M) {\n    if (meta === undefined && payload === undefined) {\n        return { type };\n    } else if (meta === undefined) {\n        return { type, payload };\n    } else {\n        return { type, payload, meta }\n    }\n}\n\nexport type ActionsUnion<A extends ActionCreatorsMapObject> = ReturnType<A[keyof A]>","import * as _ from \"lodash\";\n\nexport function assertNotReached(message: string): never {\n    throw new Error(message);\n}\n\nexport function defaultDebounce<T extends (...args: any[]) => any>(fn: T, delay: number = 50) {\n    return _.debounce(fn, delay, { maxWait: delay });\n}\n\nexport function getEnumValues<E>(e: E): Array<keyof E> {\n    return Object.keys(e) as Array<keyof E>;\n}","\n/* \n * Common\n */\n\nexport interface FollowupPart {\n    numMessages: number,\n    descriptions: Array<{ title: string, desc: string }>,\n}\n\nexport interface MsgPartConfig {\n    version: string,\n    revision: string,\n    localCores: number,\n    cwd: string,\n    separator: string,\n}\n\nexport interface GetConfigResponse {\n    status: \"ok\",\n    config: MsgPartConfig,\n}\n\n/*\n * Connection\n */\n\nexport enum ClusterTypes {\n    LOCAL = \"LOCAL\",\n    TCP = \"TCP\",\n}\n\nexport const ClusterTypeMetadata: { [s: string]: { [s: string]: string } } = {\n    [ClusterTypes.LOCAL]: {\n        label: \"Create local cluster\",\n    },\n    [ClusterTypes.TCP]: {\n        label: \"Connect to cluster\",\n        helpText: \"can be either local or remote, connection via TCP\",\n    }\n}\n\nexport interface ConnectRequestLocalCluster {\n    type: ClusterTypes.LOCAL,\n    numWorkers?: number,\n}\n\nexport interface ConnectRequestTCP {\n    type: ClusterTypes.TCP,\n    address: string,\n}\n\nexport type ConnectRequestParams = ConnectRequestLocalCluster | ConnectRequestTCP\n\nexport interface ConnectRequest {\n    connection: ConnectRequestParams\n}\n\nexport type ConnectResponse = {\n    status: \"ok\",\n    connection: ConnectRequest,\n} | {\n    status: \"disconnected\",\n    connection: {},\n}\n\n/*\n * Dataset\n */\n\nexport enum DatasetTypes {\n    HDF5 = \"HDF5\",\n    HDFS = \"HDFS\",\n    RAW = \"RAW\",\n    MIB = \"MIB\",\n    BLO = \"BLO\",\n    K2IS = \"K2IS\",\n    SER = \"SER\",\n}\n\nexport interface DatasetParamsCommon {\n    name: string,\n}\n\nexport type DatasetParamsHDFS = {\n    type: DatasetTypes.HDFS,\n    path: string,\n    tileshape: number[],\n} & DatasetParamsCommon;\n\nexport type DatasetParamsHDF5 = {\n    type: DatasetTypes.HDF5,\n    path: string,\n    ds_path: string,\n    tileshape: number[],\n} & DatasetParamsCommon\n\nexport type DatasetParamsRaw = {\n    type: DatasetTypes.RAW,\n    path: string,\n    dtype: string,\n    detector_size_raw: number[],\n    crop_detector_to: number[],\n    scan_size: number[],\n    tileshape: number[],\n} & DatasetParamsCommon\n\nexport type DatasetParamsMIB = {\n    type: DatasetTypes.MIB,\n    path: string,\n    scan_size: number[],\n    tileshape: number[],\n} & DatasetParamsCommon\n\nexport type DatasetParamsBLO = {\n    type: DatasetTypes.BLO,\n    path: string,\n    tileshape: number[],\n} & DatasetParamsCommon\n\nexport type DatasetParamsK2IS = {\n    type: DatasetTypes.K2IS,\n    path: string,\n} & DatasetParamsCommon\n\nexport type DatasetParamsSER = {\n    type: DatasetTypes.SER,\n    path: string,\n} & DatasetParamsCommon\n\nexport type DatasetFormParams = DatasetParamsHDF5 | DatasetParamsHDFS | DatasetParamsRaw | DatasetParamsMIB | DatasetParamsBLO | DatasetParamsK2IS | DatasetParamsSER\n\nexport interface DatasetCreateParams {\n    id: string,\n    params: DatasetFormParams,\n}\n\nexport enum DatasetStatus {\n    OPEN = \"OPEN\",\n    OPENING = \"OPENING\",\n    DELETING = \"DELETING\",\n}\n\nexport interface DiagElemMsg {\n    name: string,\n    value: string | DiagElemMsg[],\n}\n\ninterface DatasetCommon {\n    id: string,\n    params: DatasetFormParams,\n}\n\nexport type DatasetOpening = DatasetCommon & {\n    status: DatasetStatus.OPENING,\n}\n\nexport type DatasetDeleting = DatasetCommon & {\n    status: DatasetStatus.DELETING,\n}\n\nexport type DatasetOpen = DatasetCommon & {\n    status: DatasetStatus.OPEN,\n    params: {\n        shape: number[],\n    }\n    diagnostics: DiagElemMsg[],\n}\n\nexport type Dataset = DatasetOpening | DatasetOpen | DatasetDeleting;\n\nexport interface OpenDatasetRequest {\n    dataset: DatasetCreateParams\n}\n\nexport interface OpenDatasetResponseOk {\n    status: \"ok\",\n    dataset: string,  // TODO: uuid type?\n    details: Dataset,\n}\n\nexport interface OpenDatasetResponseError {\n    status: \"error\",\n    dataset: string,\n    msg: string,\n}\n\nexport type OpenDatasetResponse = OpenDatasetResponseOk | OpenDatasetResponseError\n\nexport interface DeleteDatasetResponse {\n    status: \"ok\",\n    dataset: string,\n}\n\nexport interface DetectDatasetSuccessResponse {\n    status: \"ok\",\n    datasetParams: DatasetFormParams,\n}\n\nexport interface DetectDatasetErrorResponse {\n    status: \"error\",\n    path: string,\n    msg: string,\n}\n\nexport type DetectDatasetResponse = DetectDatasetSuccessResponse | DetectDatasetErrorResponse;\n\nexport type MsgPartInitialDataset = DatasetOpen\n\n// type alias to add client-side state to datasets\nexport type DatasetState = Dataset & {}\n\n/*\n * Job\n */\nexport interface MsgPartJob {\n    id: string,\n    dataset: string,\n}\n\nexport interface MaskDefRing {\n    shape: \"ring\",\n    cx: number,\n    cy: number,\n    ri: number,\n    ro: number\n}\n\nexport interface MaskDefDisk {\n    shape: \"disk\",\n    cx: number,\n    cy: number,\n    r: number,\n}\n\nexport interface PointDef {\n    shape: \"point\",\n    cx: number,\n    cy: number,\n}\n\n// TODO: shape doesn't really make sense here, needs to be restructured\nexport interface CenterOfMassParams {\n    shape: \"com\",\n    cx: number,\n    cy: number,\n    r: number,\n}\n\nexport interface PickFrameParams {\n    x: number,\n    y: number,\n}\n\nexport enum AnalysisTypes {\n    APPLY_RING_MASK = \"APPLY_RING_MASK\",\n    APPLY_DISK_MASK = \"APPLY_DISK_MASK\",\n    APPLY_POINT_SELECTOR = \"APPLY_POINT_SELECTOR\",\n    CENTER_OF_MASS = \"CENTER_OF_MASS\",\n    SUM_FRAMES = \"SUM_FRAMES\",\n    PICK_FRAME = \"PICK_FRAME\",\n}\n\nexport interface RingMaskDetails {\n    type: AnalysisTypes.APPLY_RING_MASK,\n    parameters: MaskDefRing,\n}\n\nexport interface DiskMaskDetails {\n    type: AnalysisTypes.APPLY_DISK_MASK,\n    parameters: MaskDefDisk,\n}\n\nexport interface PointDefDetails {\n    type: AnalysisTypes.APPLY_POINT_SELECTOR,\n    parameters: PointDef,\n}\n\nexport interface CenterOfMassDetails {\n    type: AnalysisTypes.CENTER_OF_MASS,\n    parameters: CenterOfMassParams,\n}\n\nexport interface SumFramesDetails {\n    type: AnalysisTypes.SUM_FRAMES,\n    parameters: {},\n}\n\nexport interface PickFrameDetails {\n    type: AnalysisTypes.PICK_FRAME,\n    parameters: PickFrameParams,\n}\n\nexport type AnalysisParameters = MaskDefRing | MaskDefDisk | CenterOfMassParams | PointDef | PickFrameParams;\nexport type AnalysisDetails = RingMaskDetails | DiskMaskDetails | CenterOfMassDetails | PointDefDetails | SumFramesDetails | PickFrameDetails;\n\nexport interface StartJobRequest {\n    job: {\n        dataset: string,\n        analysis: AnalysisDetails,\n    }\n}\n\nexport interface StartJobResponse {\n    status: \"ok\",\n    job: string,\n    details: MsgPartJob,\n}\n\nexport interface CancelJobResponse {\n    status: \"ok\",\n    job: string,\n}\n\n\n/*\n * fs browser \n */\n\n// some named place, i.e. \"Documents\", \"Home\", ...\nexport interface FSPlace {\n    title: string,\n    path: string,\n    key: string,\n}\n\nexport interface DirectoryListingDetails {\n    name: string,\n    size: number,\n    ctime: number,\n    mtime: number,\n    owner: string,\n}\n\nexport interface DirectoryListingResponseOK {\n    status: \"ok\",\n    path: string,\n    files: DirectoryListingDetails[],\n    dirs: DirectoryListingDetails[],\n    drives: string[],\n    places: FSPlace[],\n}\n\nexport interface DirectoryListingResponseError {\n    status: \"error\",\n    path: string,\n    code: string,\n    msg: string,\n    alternative?: string,\n}\n\nexport type DirectoryListingResponse = DirectoryListingResponseOK | DirectoryListingResponseError;\n","import { ActionsUnion, createAction } from \"../helpers/actionHelpers\";\nimport { DatasetFormParams, DirectoryListingDetails, FSPlace } from \"../messages\";\n\nexport enum ActionTypes {\n    LIST_DIRECTORY = 'BROWSER_LIST_DIRECTORY',\n    LIST_FULL_PATH = 'BROWSER_LIST_DIRECTORY_FULL',\n    DIRECTORY_LISTING = 'BROWSER_DIRECTORY_LISTING',\n    DETECT_PARAMS = 'BROWSER_DETECT_PARAMS',\n    PARAMS_DETECTED = 'BROWSER_PARAMS_DETECTED',\n    ERROR = 'BROWSER_ERROR',\n    OPEN = 'BROWSER_OPEN',\n    CANCEL = 'BROWSER_CANCEL',\n    SELECT = 'BROWSER_SELECT',\n    SELECT_FULL_PATH = 'BROWSER_SELECT_FULL_PATH',\n}\n\nexport const Actions = {\n    list: (path: string, name?: string) => createAction(ActionTypes.LIST_DIRECTORY, { path, name }),\n    dirListing: (path: string, dirs: DirectoryListingDetails[], files: DirectoryListingDetails[], drives: string[], places: FSPlace[]) => createAction(ActionTypes.DIRECTORY_LISTING, { path, dirs, files, drives, places }),\n    open: () => createAction(ActionTypes.OPEN),\n    cancel: () => createAction(ActionTypes.CANCEL),\n    select: (path: string, name: string) => createAction(ActionTypes.SELECT, { path, name }),\n    selectFullPath: (path: string) => createAction(ActionTypes.SELECT_FULL_PATH, { path }),\n    error: (msg: string, timestamp: number, id: string) => createAction(ActionTypes.ERROR, { msg, timestamp, id }),\n    detectParams: (path: string) => createAction(ActionTypes.DETECT_PARAMS, { path }),\n    paramsDetected: (path: string, params: DatasetFormParams) => createAction(ActionTypes.PARAMS_DETECTED, { path, params }),\n}\n\nexport type Actions = ActionsUnion<typeof Actions>;","import { FormikProps, withFormik } from \"formik\";\nimport * as React from \"react\";\nimport { Button, Form } from \"semantic-ui-react\";\nimport { ConfigState } from \"../../config/reducers\";\nimport { Omit } from \"../../helpers/types\";\nimport { ClusterTypes, ConnectRequestLocalCluster } from \"../../messages\";\n\ntype FormValues = Omit<ConnectRequestLocalCluster, \"type\">;\n\ninterface FormProps {\n    onSubmit: (params: ConnectRequestLocalCluster) => void,\n    config: ConfigState,\n}\n\ntype MergedProps = FormikProps<FormValues> & FormProps;\n\nconst LocalConnectionForm: React.SFC<MergedProps> = ({\n    values,\n    touched,\n    errors,\n    dirty,\n    isSubmitting,\n    handleChange,\n    handleBlur,\n    handleSubmit,\n    handleReset,\n}) => {\n    return (\n        <Form onSubmit={handleSubmit}>\n            <Form.Field>\n                <label htmlFor=\"numWorkers\">Number of Workers:</label>\n                <input type=\"number\" name=\"numWorkers\" value={values.numWorkers}\n                    onChange={handleChange}\n                    onBlur={handleBlur} />\n                {errors.numWorkers && touched.numWorkers && errors.numWorkers}\n            </Form.Field>\n            <Button primary={true} type=\"submit\" disabled={isSubmitting}>Connect</Button>\n        </Form>\n    )\n}\n\nexport default withFormik<FormProps, FormValues>({\n    mapPropsToValues: (ownProps: FormProps) => ({\n        numWorkers: ownProps.config.localCores,\n    }),\n    handleSubmit: (values, formikBag) => {\n        const { onSubmit } = formikBag.props;\n        onSubmit({\n            type: ClusterTypes.LOCAL,\n            ...values,\n        });\n    }\n})(LocalConnectionForm);\n","\nimport { FormikProps, withFormik } from \"formik\";\nimport * as React from \"react\";\nimport { Button, Form } from \"semantic-ui-react\";\nimport { Omit } from \"../../helpers/types\";\nimport { ClusterTypes, ConnectRequestTCP } from \"../../messages\";\n\ntype FormValues = Omit<ConnectRequestTCP, \"type\">;\n\ninterface FormProps {\n    onSubmit: (params: ConnectRequestTCP) => void,\n}\n\ntype MergedProps = FormikProps<FormValues> & FormProps;\n\nconst TCPConnectionForm: React.SFC<MergedProps> = ({\n    values,\n    touched,\n    errors,\n    dirty,\n    isSubmitting,\n    handleChange,\n    handleBlur,\n    handleSubmit,\n    handleReset,\n}) => {\n    return (\n        <Form onSubmit={handleSubmit}>\n            <Form.Field>\n                <label htmlFor=\"address\">Scheduler URI</label>\n                <input type=\"text\" name=\"address\" value={values.address}\n                    onChange={handleChange}\n                    onBlur={handleBlur} />\n                {errors.address && touched.address && errors.address}\n            </Form.Field>\n            <Button primary={true} type=\"submit\" disabled={isSubmitting}>Connect</Button>\n        </Form>\n    )\n}\n\nexport default withFormik<FormProps, FormValues>({\n    mapPropsToValues: () => ({\n        address: \"tcp://localhost:8786\",\n    }),\n    handleSubmit: (values, formikBag) => {\n        const { onSubmit } = formikBag.props;\n        onSubmit({\n            type: ClusterTypes.TCP,\n            ...values\n        });\n    }\n})(TCPConnectionForm);\n","\nimport * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Dropdown, DropdownProps, Segment } from \"semantic-ui-react\";\nimport * as clusterActions from \"../../cluster/actions\";\nimport { getEnumValues } from \"../../helpers\";\nimport { ClusterTypeMetadata, ClusterTypes, ConnectRequestParams } from \"../../messages\";\nimport { RootReducer } from \"../../store\";\nimport LocalConnectionForm from \"./LocalConnectionForm\";\nimport TCPConnectionForm from \"./TCPConnectionForm\";\n\n\nconst mapDispatchToProps = {\n    connectToCluster: clusterActions.Actions.connect,\n};\n\nconst mapStateToProps = (state: RootReducer) => {\n    return {\n        config: state.config,\n    }\n}\n\ntype MergedProps = DispatchProps<typeof mapDispatchToProps> & ReturnType<typeof mapStateToProps>;\n\nconst clusterTypeKeys = getEnumValues(ClusterTypes);\nconst clusterTypeOptions = clusterTypeKeys.map(t => ({\n    text: ClusterTypeMetadata[ClusterTypes[t]].label,\n    value: ClusterTypes[t],\n}));\n\ninterface ConnectionParamsState {\n    clusterType: ClusterTypes\n}\n\nclass ClusterConnectionForm extends React.Component<MergedProps, ConnectionParamsState> {\n    public state = {\n        clusterType: ClusterTypes.LOCAL,\n    }\n\n    public setType = (type: ClusterTypes) => {\n        this.setState({\n            clusterType: type,\n        });\n    }\n\n    public handleChange = (e: React.SyntheticEvent, data: DropdownProps) => {\n        const value = data.value as ClusterTypes;\n        this.setType(value);\n    }\n\n    public handleSubmit = (params: ConnectRequestParams) => {\n        this.props.connectToCluster(params);\n    }\n\n    public renderForm() {\n        const { clusterType } = this.state;\n        const { config } = this.props;\n\n        switch (clusterType) {\n            case ClusterTypes.LOCAL: {\n                return <LocalConnectionForm config={config} onSubmit={this.handleSubmit} />\n            }\n            case ClusterTypes.TCP: {\n                return <TCPConnectionForm onSubmit={this.handleSubmit} />\n            }\n        }\n    }\n\n    public render() {\n        return (\n            <>\n                <div>\n                    <Dropdown\n                        inline={true}\n                        options={clusterTypeOptions}\n                        value={this.state.clusterType}\n                        onChange={this.handleChange}\n                    />\n                </div>\n                <Segment>\n                    {this.renderForm()}\n                </Segment>\n            </>\n        )\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ClusterConnectionForm);","import * as React from 'react';\nimport { Icon, Message } from 'semantic-ui-react';\n\ninterface ChannelConnectingProps {\n    msg: string,\n}\n\nconst ChannelConnecting: React.SFC<ChannelConnectingProps> = ({ msg }) => (\n    <Message icon={true}>\n        <Icon name='cog' loading={true} />\n        <Message.Content>\n            <Message.Header>Connecting to LiberTEM</Message.Header>\n            {msg}\n        </Message.Content>\n    </Message>\n)\n\nexport default ChannelConnecting;","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport ClusterConnectionForm from \"../../cluster/components/ClusterConnectionForm\";\nimport { RootReducer } from \"../../store\";\nimport ChannelConnecting from \"./ChannelConnecting\";\n\nconst mapStateToProps = (state: RootReducer) => {\n    return {\n        channelStatus: state.channelStatus,\n        clusterConnection: state.clusterConnection,\n        haveConfig: state.config.haveConfig,\n    }\n}\n\n\ntype MergedProps = ReturnType<typeof mapStateToProps>;\n\nconst messages = {\n    waiting: \"Waiting...\",\n    connecting: \"Connecting...\",\n}\n\nconst clusterMessages = {\n    connected: \"Connected, waiting for initial state...\",\n    unknown: \"Connected, fetching cluster status...\",\n}\n\nconst ChannelStatus: React.SFC<MergedProps> = ({ haveConfig, children, channelStatus, clusterConnection }) => {\n    switch (channelStatus.status) {\n        case \"waiting\":\n        case \"connecting\": {\n            return <ChannelConnecting msg={messages[channelStatus.status]} />;\n        }\n        case \"connected\": {\n            if (!haveConfig) {\n                return <ChannelConnecting msg=\"waiting for configuration...\" />;\n            }\n            if (clusterConnection.status === \"disconnected\") {\n                return <ClusterConnectionForm />\n            } else if (clusterConnection.status === \"connected\") {\n                return <ChannelConnecting msg={clusterMessages.connected} />;\n            } else if (clusterConnection.status === \"unknown\") {\n                return <ChannelConnecting msg={clusterMessages.unknown} />;\n            }\n        }\n    }\n    return <>{children}</>;\n}\n\nexport default connect(mapStateToProps)(ChannelStatus);","import * as React from \"react\";\nimport { Icon, SemanticICONS } from \"semantic-ui-react\";\nimport { DirectoryListingDetails } from \"../../messages\";\n\n\ninterface FileBrowserEntryProps {\n    style: object,\n    details: DirectoryListingDetails,\n    onClick?: () => void,\n    icon?: SemanticICONS,\n}\n\ninterface TimeStampProps {\n    ts: number,\n}\n\nexport const TimeStamp: React.SFC<TimeStampProps> = ({ ts }) => {\n    const date = new Date(ts * 1000);\n    const fmtDate = date.toLocaleDateString();\n    const fmtTime = date.toLocaleTimeString();\n    const title = `${fmtDate} ${fmtTime}`;\n    return (\n        <div style={{ display: \"flex\", whiteSpace: \"nowrap\" }} title={title}>\n            <div style={{ width: \"50%\", marginRight: \"10px\" }}>{fmtDate}</div>\n            <div style={{ width: \"45%\" }}>{fmtTime}</div>\n        </div>\n    )\n}\n\n// adapted from https://stackoverflow.com/a/14919494/540644\nfunction humanFileSize(bytes: number, si: boolean = false) {\n    const thresh = si ? 1000 : 1024;\n    if (Math.abs(bytes) < thresh) {\n        return {\n            size: bytes,\n            unit: 'B',\n        }\n    }\n    const units = si\n        ? ['kB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB']\n        : ['KiB', 'MiB', 'GiB', 'TiB', 'PiB', 'EiB', 'ZiB', 'YiB'];\n    let u = -1;\n    do {\n        bytes /= thresh;\n        ++u;\n    } while (Math.abs(bytes) >= thresh && u < units.length - 1);\n\n    return {\n        size: bytes.toFixed(1),\n        unit: units[u],\n    }\n}\n\ninterface FileSizeProps {\n    size: number,\n    si?: boolean,\n}\n\nexport const FileSize: React.SFC<FileSizeProps> = ({ size, si }) => {\n    const fmtSize = humanFileSize(size, si)\n    return (\n        <div style={{ textAlign: \"right\" }}>\n            {fmtSize.size} {fmtSize.unit}\n        </div>\n    );\n}\n\nexport const Cell: React.SFC<{ title?: string }> = ({ children, title }) => {\n    const styles: React.CSSProperties = {\n        whiteSpace: \"nowrap\",\n        overflow: \"hidden\",\n        textOverflow: \"ellipsis\",\n        marginRight: \"10px\",\n    }\n    return (\n        <div style={styles} title={title}>{children}</div>\n    );\n}\n\n\nclass FileBrowserEntry extends React.Component<FileBrowserEntryProps> {\n    public onClick = (e: React.MouseEvent) => {\n        const { onClick } = this.props;\n        if (onClick) {\n            onClick();\n        }\n    }\n\n    public render() {\n        const { details, style, icon } = this.props;\n        const myStyle: React.CSSProperties = {\n            cursor: \"pointer\",\n            ...style,\n        };\n\n        const tsStyles: React.CSSProperties = {\n            textAlign: \"right\",\n        };\n\n        return (\n            <div onClick={this.onClick} style={myStyle}>\n                <div style={{ display: \"flex\", paddingRight: \"10px\" }}>\n                    <div style={{ width: \"20%\", flexGrow: 1 }}>\n                        <Cell title={details.name}>\n                            {icon && <Icon name={icon} />}\n                            {details.name}\n                        </Cell>\n                    </div>\n                    <div style={{ width: \"10%\" }}><Cell><FileSize size={details.size} si={false} /></Cell></div>\n                    <div style={{ width: \"10%\" }}><Cell>{details.owner}</Cell></div>\n                    <div style={{ width: \"18%\", ...tsStyles }}>\n                        <Cell><TimeStamp ts={details.ctime} /></Cell>\n                    </div>\n                    <div style={{ width: \"18%\", ...tsStyles }}>\n                        <Cell><TimeStamp ts={details.mtime} /></Cell>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default FileBrowserEntry;","import * as React from \"react\";\nimport { Cell } from \"./FileBrowserEntry\";\n\nconst FileBrowserHeader: React.SFC = () => {\n    const alignRight: React.CSSProperties = {\n        textAlign: \"right\",\n    };\n\n    // ugly hack: padding-right to compensate for scrollbar size\n    return (\n        <div style={{ paddingRight: \"20px\", paddingBottom: \"10px\" }}>\n            <div style={{ display: \"flex\" }}>\n                <div style={{ width: \"20%\", flexGrow: 1 }}>\n                    <Cell>Name</Cell>\n                </div>\n                <div style={{ width: \"10%\", ...alignRight }}>\n                    <Cell>Size</Cell>\n                </div>\n                <div style={{ width: \"10%\" }}>\n                    <Cell>Owner</Cell>\n                </div>\n                <div style={{ width: \"18%\", ...alignRight }}>\n                    <Cell>Created</Cell>\n                </div>\n                <div style={{ width: \"18%\", ...alignRight }}>\n                    <Cell>Modified</Cell>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default FileBrowserHeader;","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { DirectoryListingDetails } from \"../../messages\";\nimport * as browserActions from '../actions';\nimport FileBrowserEntry from \"./FileBrowserEntry\";\n\ninterface FileEntryProps {\n    path: string,\n    style: object,\n    details: DirectoryListingDetails,\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch, ownProps: FileEntryProps) => {\n    return {\n        select: () => dispatch(browserActions.Actions.select(ownProps.path, ownProps.details.name)),\n    };\n}\n\ntype MergedProps = FileEntryProps & ReturnType<typeof mapDispatchToProps>;\n\nclass FileEntry extends React.Component<MergedProps> {\n    public render() {\n        const { details, style, select } = this.props;\n\n        return (\n            <FileBrowserEntry onClick={select} style={style} details={details}\n                icon=\"file outline\" />\n        )\n    }\n}\n\nexport default connect(null, mapDispatchToProps)(FileEntry);","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { DirectoryListingDetails } from \"../../messages\";\nimport * as browserActions from '../actions';\nimport FileBrowserEntry from \"./FileBrowserEntry\";\n\nconst mapDispatchToProps = (dispatch: Dispatch, ownProps: FolderEntryProps) => {\n    return {\n        list: () => {\n            dispatch(browserActions.Actions.list(ownProps.path, ownProps.details.name));\n            window.setTimeout(() => ownProps.onChange(), 0);\n        },\n    };\n}\n\ninterface FolderEntryProps {\n    path: string,\n    style: object,\n    details: DirectoryListingDetails,\n    onChange: () => void,\n}\n\ntype MergedProps = FolderEntryProps & ReturnType<typeof mapDispatchToProps>;\n\nconst FolderEntry: React.SFC<MergedProps> = ({ list, details, style, onChange }) => {\n    return (\n        <FileBrowserEntry onClick={list} style={style} details={details} icon=\"folder\" />\n    )\n}\n\nexport default connect(null, mapDispatchToProps)(FolderEntry);\n","import * as React from 'react';\nimport { connect } from \"react-redux\";\nimport { Dispatch } from 'redux';\nimport { Dropdown, DropdownItemProps } from \"semantic-ui-react\";\nimport * as browserActions from '../actions';\n\nconst mapDispatchToProps = (dispatch: Dispatch, ownProps: DropdownItemProps) => {\n    return {\n        list: () => {\n            if (ownProps.value !== undefined) {\n                dispatch(browserActions.Actions.list(ownProps.value.toString()));\n                window.setTimeout(() => ownProps.onChange(), 0);\n            }\n        },\n    };\n}\n\ntype MergedProps = ReturnType<typeof mapDispatchToProps> & DropdownItemProps & {\n    onChange: () => void,\n};\n\nconst PathDropDownItem: React.SFC<MergedProps> = ({ list, ...props }) => {\n    const newProps = {\n        onClick: list,\n        ...props,\n    }\n    return <Dropdown.Item {...newProps} />;\n}\n\nexport default connect(null, mapDispatchToProps)(PathDropDownItem);","import { FormikProps, withFormik } from \"formik\";\nimport * as React from \"react\";\nimport { Form, Input } from \"semantic-ui-react\";\n\ninterface FormValues {\n    path: string,\n}\n\ninterface PathInputProps {\n    onChange: (path: string) => void,\n    initialPath: string,\n}\n\ntype MergedProps = FormikProps<FormValues> & PathInputProps;\n\nconst PathInput: React.SFC<MergedProps> = ({\n    values,\n    touched,\n    errors,\n    dirty,\n    isSubmitting,\n    handleChange,\n    handleBlur,\n    handleSubmit,\n    handleReset,\n}) => {\n    return (\n        <Form onSubmit={handleSubmit} style={{ flexGrow: 1 }}>\n            <Form.Field>\n                <Input autoComplete=\"off\" onBlur={handleBlur} onChange={handleChange} value={values.path} name=\"path\" />\n            </Form.Field>\n        </Form>\n    )\n}\n\nexport default withFormik<PathInputProps, FormValues>({\n    mapPropsToValues: ({ initialPath }) => ({\n        path: initialPath,\n    }),\n    handleSubmit: (values, formikBag) => {\n        const { onChange } = formikBag.props;\n        onChange(values.path);\n    },\n    enableReinitialize: true,\n})(PathInput);","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { Dropdown, DropdownItemProps } from \"semantic-ui-react\";\nimport { DatasetTypes } from \"../../messages\";\nimport { RootReducer } from \"../../store\";\nimport * as browserActions from '../actions';\n\n\ntype DropdownOptions = Array<{\n    text: string,\n    value: {\n        type: DatasetTypes,\n        path: string,\n    },\n}>;\n\nconst mapStateToProps = (state: RootReducer) => {\n    return {\n        lastOpened: state.config.lastOpened,\n        fileHistory: state.config.fileHistory,\n        separator: state.config.separator,\n    };\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch) => {\n    return {\n        select: (path: string) => dispatch(browserActions.Actions.selectFullPath(path)),\n    };\n}\n\ntype MergedProps = ReturnType<typeof mapStateToProps> & ReturnType<typeof mapDispatchToProps>;\n\nconst RecentFiles: React.SFC<MergedProps> = ({ lastOpened, fileHistory, select }) => {\n\n    const recentFiles: DropdownOptions = fileHistory.filter((path: string) => lastOpened[path]).map((path: string) => {\n        const item = lastOpened[path];\n        return {\n            text: item.path,\n            value: {\n                type: item.type,\n                path: item.path,\n            },\n        };\n    });\n\n    const onClick = (e: React.MouseEvent<HTMLDivElement>, data: DropdownItemProps) => data.value && select(data.value.toString())\n\n    return (\n        <Dropdown item={true} text=\"Recent\" floating={true}>\n            <Dropdown.Menu>\n                <Dropdown.Header content=\"recent datasets\" />\n                {recentFiles.map((option, idx) => (\n                    <Dropdown.Item key={idx} value={option.value.path} content={option.text} onClick={onClick} />\n                ))}\n            </Dropdown.Menu>\n        </Dropdown>\n    );\n}\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(RecentFiles);","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { Dropdown, Menu } from \"semantic-ui-react\";\nimport * as browserActions from '../actions';\nimport { FSPlaces } from \"../types\";\nimport PathDropDownItem from \"./PathDropDownItem\";\nimport PathInput from \"./PathInput\";\nimport RecentFiles from \"./RecentFiles\";\n\nconst mapDispatchToProps = (dispatch: Dispatch, ownProps: PathBarProps) => {\n    return {\n        refresh: () => {\n            dispatch(browserActions.Actions.list(ownProps.currentPath));\n            window.setTimeout(() => ownProps.onChange(), 0);\n        },\n        handleInputChange: (path: string) => {\n            dispatch(browserActions.Actions.list(path));\n            window.setTimeout(() => ownProps.onChange(), 0);\n        },\n        goUp: () => {\n            dispatch(browserActions.Actions.list(ownProps.currentPath, '..'));\n            window.setTimeout(() => ownProps.onChange(), 0);\n        },\n    };\n}\n\ninterface PathBarProps {\n    currentPath: string,\n    onChange: () => void,\n    drives: string[],\n    places: FSPlaces,\n}\n\ntype MergedProps = ReturnType<typeof mapDispatchToProps> & PathBarProps;\n\nconst PathBar: React.SFC<MergedProps> = ({ currentPath, drives, places, onChange, refresh, goUp, handleInputChange }) => {\n    const driveOptions = drives.map((path) => ({ key: path, text: path }));\n    const placeOptions = Object.keys(places).map((key) => ({ key: places[key].path, text: places[key].title }))\n    return (\n        <Menu>\n            <RecentFiles />\n            <Dropdown text=\"Go to...\" floating={true} item={true}>\n                <Dropdown.Menu>\n                    <Dropdown.Header content=\"Drives\" />\n                    {driveOptions.map((option) => {\n                        return <PathDropDownItem key={option.key} value={option.key} content={option.text} onChange={onChange} />\n                    })}\n                    <Dropdown.Header content=\"Places\" />\n                    {placeOptions.map((option) => {\n                        return <PathDropDownItem key={option.key} value={option.key} content={option.text} onChange={onChange} />\n                    })}\n                </Dropdown.Menu>\n            </Dropdown>\n            <Menu.Item icon=\"arrow up\" onClick={goUp} />\n            <Menu.Item style={{ flexGrow: 1 }}>\n                <PathInput onChange={handleInputChange} initialPath={currentPath} />\n            </Menu.Item>\n            <Menu.Item icon=\"refresh\" onClick={refresh} />\n        </Menu>\n    );\n}\n\n\nexport default connect(null, mapDispatchToProps)(PathBar);","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { FixedSizeList as List } from \"react-window\";\nimport { Dispatch } from \"redux\";\nimport { Button, Header, Segment } from \"semantic-ui-react\";\nimport { DirectoryListingDetails } from \"../../messages\";\nimport { RootReducer } from \"../../store\";\nimport * as browserActions from '../actions';\nimport FileBrowserHeader from \"./FileBrowserHeader\";\nimport FileEntry from \"./FileEntry\";\nimport FolderEntry from \"./FolderEntry\";\nimport PathBar from \"./PathBar\";\n\nconst mapStateToProps = (state: RootReducer) => {\n    const { browser } = state;\n    return {\n        files: browser.files,\n        dirs: browser.dirs,\n        path: browser.path,\n        drives: browser.drives,\n        places: browser.places,\n        isLoading: browser.isLoading,\n    };\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch) => {\n    return {\n        cancel: () => dispatch(browserActions.Actions.cancel()),\n    };\n}\n\ntype MergedProps = ReturnType<typeof mapStateToProps> & ReturnType<typeof mapDispatchToProps>;\n\ninterface EntryFnArgs {\n    index: number,\n    style: object\n}\ntype EntryFn = (arg: EntryFnArgs) => void\n\nconst listRef = React.createRef<List>();\n\nconst scrollToTop = () => {\n    if (listRef.current === null) {\n        return;\n    }\n    listRef.current.scrollToItem(0);\n}\n\nfunction sortByKey<T extends object>(array: T[], getKey: (item: T) => any) {\n    return array.sort((a, b) => {\n        const x = getKey(a);\n        const y = getKey(b);\n        return ((x < y) ? -1 : ((x > y) ? 1 : 0));\n    });\n}\n\nconst FileBrowser: React.SFC<MergedProps> = ({ files, dirs, path, drives, places, cancel, isLoading }) => {\n    const getSortKey = (item: DirectoryListingDetails) => item.name.toLowerCase();\n    const dirEntries = sortByKey(dirs, getSortKey).map((dir) => (style: object) => <FolderEntry style={style} onChange={scrollToTop} path={path} details={dir} />);\n    const fileEntries = sortByKey(files, getSortKey).map((f) => ((style: object) => <FileEntry style={style} path={path} details={f} />));\n    const entries = dirEntries.concat(fileEntries);\n\n    const cellFn: EntryFn = ({ index, style }) => {\n        return entries[index](style)\n    }\n\n    let list = (\n        <List style={{ overflowY: \"scroll\" }} ref={listRef} height={300} width=\"100%\" itemCount={entries.length} itemSize={35}>\n            {cellFn}\n        </List>\n    );\n\n    if (isLoading) {\n        // FIXME: hardcoded height\n        list = (\n            <Segment loading={true} style={{ height: \"300px\" }} />\n        )\n    }\n\n    return (\n        <Segment.Group>\n            <Segment>\n                <Header as=\"h2\">Open dataset</Header>\n            </Segment>\n            <Segment>\n                <PathBar currentPath={path} drives={drives} places={places} onChange={scrollToTop} />\n            </Segment>\n            <Segment>\n                <FileBrowserHeader />\n                {list}\n            </Segment>\n            <Segment>\n                <Button onClick={cancel}>Cancel</Button>\n            </Segment>\n        </Segment.Group>\n    );\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(FileBrowser);","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Button, Icon } from \"semantic-ui-react\";\nimport { RootReducer } from \"../../store\";\nimport * as browserActions from '../actions';\nimport FileBrowser from \"./FileBrowser\";\n\nexport const mapStateToProps = (state: RootReducer) => {\n    return {\n        isOpen: state.browser.isOpen,\n    }\n}\n\nexport const mapDispatchToProps = {\n    open: browserActions.Actions.open,\n}\n\ntype MergedProps = ReturnType<typeof mapStateToProps> & DispatchProps<typeof mapDispatchToProps>;\n\nconst BrowserWrapper: React.SFC<MergedProps> = ({ isOpen, open }) => {\n    if (!isOpen) {\n        return (\n            <Button icon={true} labelPosition=\"left\" onClick={open}>\n                <Icon name='add' />\n                Browse\n            </Button>\n        );\n    }\n    return (\n        <FileBrowser />\n    );\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(BrowserWrapper)","export const inRectConstraint = (width: number, height: number) => (p: Point2D) => {\n    return {\n        x: Math.max(0, Math.min(width - 1, p.x)),\n        y: Math.max(0, Math.min(height - 1, p.y)),\n    }\n}\n\nexport const dist = (cx: number, cy: number, x: number, y: number) => {\n    const dx = cx - x;\n    const dy = cy - y;\n    return Math.sqrt(dx * dx + dy * dy);\n}\n\nexport const cbToRadius = (cx: number, cy: number, cb: ((r: number) => void) | undefined) => (x: number, y: number) => cb && cb(dist(cx, cy, x, y))\n\nexport const keepOnCY = (cy: number) => (p: Point2D) => {\n    return {\n        x: p.x,\n        y: cy,\n    }\n}\n\nexport const keepXLargerThan = (otherX: number) => (p: Point2D) => {\n    return {\n        x: otherX > p.x ? otherX : p.x,\n        y: p.y,\n    }\n}\n\nexport const keepXSmallerThan = (otherX: number) => (p: Point2D) => {\n    return {\n        x: otherX < p.x ? otherX : p.x,\n        y: p.y,\n    }\n}\n\nexport const riConstraint = (outerPos: number, cy: number) => (p: Point2D) => {\n    return keepXLargerThan(outerPos)(\n        keepOnCY(cy)(p)\n    );\n}\n\nexport const roConstraints = (innerPos: number, cy: number) => (p: Point2D) => {\n    return keepXSmallerThan(innerPos)(\n        keepOnCY(cy)(p)\n    );\n}","import * as React from \"react\";\n\nexport type HandleProps = {\n    x: number,\n    y: number,\n    scale: number,\n    withCross?: boolean,\n} & React.SVGProps<SVGCircleElement>;\n\nconst Handle: React.SFC<HandleProps> = ({ scale, x, y, withCross, ...args }) => {\n    const r = 3;\n    // scaleMatrix is needed to set the origin of the scale\n    const scaleMatrix = `matrix(${scale}, 0, 0, ${scale}, ${x - scale * x}, ${y - scale * y})`;\n    const style: React.CSSProperties = { transform: scaleMatrix, stroke: \"red\", strokeWidth: 1, fill: \"transparent\" };\n    const crossSpec = `\n        M${x - r / 2} ${y} L ${x + r / 2} ${y}\n        M${x} ${y - r / 2} L ${x} ${y + r / 2}\n    `;\n    const cross = withCross ? <path d={crossSpec} style={style} /> : null;\n    return (\n        <g {...args}>\n            <circle cx={x} cy={y} r={r} style={style} />\n            {cross}\n        </g>\n    )\n}\n\nexport interface DraggableHandleProps {\n    x: number,\n    y: number,\n    withCross?: boolean,\n    imageWidth?: number,\n    onDragMove?: (x: number, y: number) => void,\n    parentOnDragStart?: (h: DraggableHandle) => void,\n    parentOnDrop?: (x: number, y: number) => void,\n    constraint?: (p: Point2D) => Point2D,\n}\n\nfunction getScalingFactor(elem: SVGElement): number {\n    const svg = elem.ownerSVGElement;\n    if (svg === null) {\n        throw new Error(\"no owner SVG element?\");\n    }\n    const inWidthAttr = svg.getAttribute(\"width\");\n    if (inWidthAttr === null) {\n        throw new Error(\"no width on SVG element?\");\n    }\n    const inWidth = +inWidthAttr;\n    const svgMeasurements = svg.getBoundingClientRect();\n    return svgMeasurements.width / inWidth;\n}\n\nfunction relativeCoords(e: React.MouseEvent, parent: SVGElement) {\n    const f = getScalingFactor(parent);\n    const parentPos = parent.getBoundingClientRect();\n    const res = {\n        x: (e.pageX - (parentPos.left + window.scrollX)) / f,\n        y: (e.pageY - (parentPos.top + window.scrollY)) / f,\n    }\n    return res;\n}\n\n/**\n * stateful draggable handle, to be used as part of <svg/>\n */\nexport class DraggableHandle extends React.Component<DraggableHandleProps> {\n    public posRef: React.RefObject<SVGRectElement>;\n\n    public state = {\n        dragging: false,\n        drag: { x: 0, y: 0 },\n    }\n\n    constructor(props: DraggableHandleProps) {\n        super(props);\n        this.posRef = React.createRef<SVGRectElement>();\n    }\n\n    // mousemove event from outside (delegated from surrounding element)\n    public externalMouseMove = (e: React.MouseEvent<SVGElement>): void => {\n        this.move(e);\n    }\n\n    // mouseleave event from outside (delegated from surrounding element)\n    public externalLeave = (e: React.MouseEvent<SVGElement>): void => {\n        this.stopDrag(e);\n    }\n\n    // mouseup event from outside (delegated from surrounding element)\n    public externalMouseUp = (e: React.MouseEvent<SVGElement>): void => {\n        this.stopDrag(e);\n    }\n\n    public applyConstraint = (p: Point2D) => {\n        const { constraint } = this.props;\n        if (constraint) {\n            return constraint(p);\n        } else {\n            return p;\n        }\n    }\n\n    public startDrag = (e: React.MouseEvent<SVGElement>): void => {\n        e.preventDefault();\n        const { parentOnDragStart } = this.props;\n        if (this.posRef.current) {\n            this.setState({\n                dragging: true,\n                drag: this.applyConstraint(relativeCoords(e, this.posRef.current)),\n            });\n            if (parentOnDragStart) {\n                parentOnDragStart(this);\n            }\n        } else {\n            throw new Error(\"startDrag without posRef\");\n        }\n    }\n\n    public move = (e: React.MouseEvent<SVGElement>): void => {\n        const { onDragMove } = this.props;\n        if (!this.state.dragging) {\n            return;\n        }\n        if (this.posRef.current) {\n            this.setState({\n                drag: this.applyConstraint(relativeCoords(e, this.posRef.current)),\n            }, () => {\n                if (onDragMove) {\n                    const constrained = this.applyConstraint(this.state.drag)\n                    onDragMove(constrained.x, constrained.y);\n                }\n            })\n        } else {\n            throw new Error(\"move without posRef\");\n        }\n    }\n\n    public stopDrag = (e: React.MouseEvent<SVGElement>): void => {\n        const { parentOnDrop } = this.props;\n        const { dragging, drag } = this.state;\n        if (!dragging) {\n            return;\n        }\n        this.setState({\n            dragging: false,\n        })\n        if (parentOnDrop) {\n            parentOnDrop(drag.x, drag.y);\n        }\n    }\n\n    public renderCommon(x: number, y: number) {\n        const { imageWidth } = this.props;\n        const scale = imageWidth === undefined ? 1 : imageWidth / 128;\n        // empty zero-size <rect> as relative position reference\n        return (\n            <g>\n                <rect\n                    style={{ visibility: \"hidden\" }}\n                    ref={this.posRef}\n                    x={0} y={0} width={0} height={0}\n                />\n                <Handle scale={scale} x={x} y={y} withCross={this.props.withCross}\n                    onMouseUp={this.stopDrag}\n                    onMouseMove={this.move}\n                    onMouseDown={this.startDrag}\n                />\n            </g>\n        );\n    }\n\n    public renderDragging() {\n        const { x, y } = this.state.drag;\n        return this.renderCommon(x, y);\n    }\n\n    public render() {\n        const { x, y } = this.props;\n        // either render from state (when dragging) or from props\n        if (this.state.dragging) {\n            return this.renderDragging();\n        } else {\n            return this.renderCommon(x, y);\n        }\n    }\n}\n\nexport default DraggableHandle;","import { ActionsUnion, createAction } from \"../helpers/actionHelpers\";\nimport { AnalysisParameters, AnalysisTypes } from \"../messages\";\nimport { AnalysisState, FrameMode, JobKind } from \"./types\";\n\n\nexport enum ActionTypes {\n    CREATE = 'ANALYSIS_CREATE',\n    CREATED = 'ANALYSIS_CREATED',\n    UPDATE_PARAMETERS = 'ANALYSIS_UPDATE_PARAMETERS',\n    PREPARE_RUN = 'ANALYSIS_PREPARE_RUN',\n    RUN = 'ANALYSIS_RUN',\n    RUNNING = 'ANALYSIS_RUNNING',\n    REMOVE = 'ANALYSIS_REMOVE',\n    REMOVED = 'ANALYSIS_REMOVED',\n    ERROR = 'ANALYSIS_ERROR',\n    SET_FRAMEVIEW_MODE = 'ANALYSIS_SET_FRAMEVIEW_MODE',\n}\n\nexport const Actions = {\n    create: (dataset: string, analysisType: AnalysisTypes) => createAction(ActionTypes.CREATE, { dataset, analysisType }),\n    created: (analysis: AnalysisState) => createAction(ActionTypes.CREATED, { analysis }),\n    updateParameters: (id: string, parameters: Partial<AnalysisParameters>, kind: JobKind) => createAction(ActionTypes.UPDATE_PARAMETERS, { id, kind, parameters }),\n    setFrameViewMode: (id: string, mode: FrameMode, initialParams: Partial<AnalysisParameters>) => createAction(ActionTypes.SET_FRAMEVIEW_MODE, { id, mode, initialParams }),\n    prepareRun: (id: string, kind: JobKind, job: string) => createAction(ActionTypes.PREPARE_RUN, { id, kind, job }),\n    run: (id: string, kind: JobKind) => createAction(ActionTypes.RUN, { id, kind }),\n    running: (id: string, job: string, kind: JobKind) => createAction(ActionTypes.RUNNING, { id, job, kind }),\n    remove: (id: string) => createAction(ActionTypes.REMOVE, { id }),\n    removed: (id: string) => createAction(ActionTypes.REMOVED, { id }),\n    error: (msg: string, timestamp: number, id: string) => createAction(ActionTypes.ERROR, { msg, timestamp, id }),\n}\n\nexport type Actions = ActionsUnion<typeof Actions>;\n\nexport type ActionParts = {\n    [K in keyof typeof Actions]: ReturnType<typeof Actions[K]>\n}","import * as React from \"react\";\nimport { DraggableHandle } from \"./DraggableHandle\";\n\nexport interface HandleParentProps {\n    width: number,\n    height: number,\n    onKeyboardEvent?: React.KeyboardEventHandler<SVGElement>,\n}\n\nexport class HandleParent extends React.Component<HandleParentProps> {\n    public currentHandle: DraggableHandle | undefined;\n\n    public handleDragStart = (h: DraggableHandle): void => {\n        this.currentHandle = h;\n    }\n\n    public handleDrop = (): void => {\n        this.currentHandle = undefined;\n    }\n\n    public handleMouseMove = (e: React.MouseEvent<SVGElement>): void => {\n        if (this.currentHandle) {\n            return this.currentHandle.externalMouseMove(e);\n        }\n    }\n\n    public handleMouseLeave = (e: React.MouseEvent<SVGElement>): void => {\n        if (this.currentHandle) {\n            this.currentHandle.externalLeave(e);\n        }\n    }\n\n    public handleMouseUp = (e: React.MouseEvent<SVGElement>): void => {\n        if (this.currentHandle) {\n            this.currentHandle.externalMouseUp(e);\n        }\n    }\n\n    public render() {\n        const { width, height } = this.props;\n        const styles = {\n            outline: \"1px dashed black\"\n        }\n        return (\n            <g\n                onMouseMove={this.handleMouseMove}\n                onMouseLeave={this.handleMouseLeave}\n                onMouseUp={this.handleMouseUp}\n                onKeyDown={this.props.onKeyboardEvent}\n                style={styles}\n                tabIndex={0}\n            >\n                <rect style={{ fill: \"transparent\" }}\n                    x={0} y={0} width={width} height={height}\n                />\n                {this.renderChildren()}\n            </g>\n        );\n    }\n\n    public renderChildren() {\n        const { children } = this.props;\n        return React.Children.map(children, child => {\n            if (!React.isValidElement(child)) {\n                return child;\n            }\n            const newProps = {\n                parentOnDragStart: this.handleDragStart,\n                parentOnDrop: this.handleDrop,\n            };\n            return React.cloneElement(child, newProps);\n        })\n    }\n}\n\nexport default HandleParent;","export type ModifyCoords = ((x: number, y: number) => ({ x: number, y: number }));\n\n/**\n * Call this function whenever a keyboard event happens. The keyboard event is then translated\n * to a coordinate transformation, which is passed to the update callback. The update callback is\n * only called if relevant keys were pressed (example: arrow keys).\n * \n * @param e keyboard event\n * @param update a callback to handle coordinate updates\n */\nexport const handleKeyEvent = (e: React.KeyboardEvent<SVGElement>, update: (fn: ModifyCoords) => void) => {\n    let delta = 1;\n    if (e.shiftKey) {\n        delta = 10;\n    }\n    switch (e.key) {\n        case \"ArrowUp\":\n            update((x: number, y: number) => ({ x, y: y - delta }));\n            break;\n        case \"ArrowDown\":\n            update((x: number, y: number) => ({ x, y: y + delta }));\n            break;\n        case \"ArrowLeft\":\n            update((x: number, y: number) => ({ x: x - delta, y }));\n            break;\n        case \"ArrowRight\":\n            update((x: number, y: number) => ({ x: x + delta, y }));\n            break;\n        default:\n            return;\n    }\n    e.preventDefault();\n}\n","import { CSSProperties } from \"react\";\n\nexport const defaultMaskStyles = (imageWidth: number): CSSProperties => ({\n    fillOpacity: 0.3,\n    fill: \"red\",\n    strokeOpacity: 0.7,\n    stroke: \"red\",\n    strokeWidth: imageWidth / 128 / 3,\n});","import * as React from \"react\";\nimport { cbToRadius, inRectConstraint, keepOnCY } from \"./constraints\";\nimport DraggableHandle from \"./DraggableHandle\";\nimport HandleParent from \"./HandleParent\";\nimport { handleKeyEvent, ModifyCoords } from \"./kbdHandler\";\nimport { defaultMaskStyles } from \"./styles\";\n\nexport interface DiskProps {\n    imageWidth: number,\n    imageHeight: number,\n    cx: number,\n    cy: number,\n    r: number,\n    image?: React.ReactElement<any>,\n    onCenterChange?: (x: number, y: number) => void,\n    onRChange?: (r: number) => void,\n}\n\nconst Disk: React.SFC<DiskProps> = ({ imageWidth, imageHeight, cx, cy, r, image, onCenterChange, onRChange }) => {\n    const rHandle = {\n        x: cx - r,\n        y: cy,\n    }\n\n    const myKeyEvent = (e: React.KeyboardEvent<SVGElement>) => {\n        const update = (fn: ModifyCoords) => {\n            if (onCenterChange) {\n                const newCoords = fn(cx, cy);\n                onCenterChange(newCoords.x, newCoords.y);\n            };\n        }\n        handleKeyEvent(e, update)\n    }\n\n    return (\n        <svg style={{ display: \"block\", border: \"1px solid black\", width: \"100%\", height: \"auto\" }} width={imageWidth} height={imageHeight} viewBox={`0 0 ${imageWidth} ${imageHeight}`}>\n            {image}\n            <circle cx={cx} cy={cy} r={r} style={{ ...defaultMaskStyles(imageWidth) }} />\n            <HandleParent width={imageWidth} height={imageHeight} onKeyboardEvent={myKeyEvent}>\n                <DraggableHandle x={cx} y={cy}\n                    imageWidth={imageWidth}\n                    onDragMove={onCenterChange}\n                    constraint={inRectConstraint(imageWidth, imageHeight)} />\n                <DraggableHandle x={rHandle.x} y={rHandle.y}\n                    imageWidth={imageWidth}\n                    onDragMove={cbToRadius(cx, cy, onRChange)}\n                    constraint={keepOnCY(cy)} />\n            </HandleParent>\n        </svg>\n    );\n}\n\nexport default Disk;","\nexport interface JobResultType {\n    imageURL: string,\n    description: { title: string, desc: string },\n}\n\nexport enum JobRunning {\n    CREATING = 'CREATING',\n    RUNNING = 'RUNNING',\n    DONE = 'DONE',\n}\n\nexport enum JobStatus {\n    CREATING = 'CREATING',\n    IN_PROGRESS = 'IN_PROGRESS',\n    CANCELLED = 'CANCELLED',\n    SUCCESS = 'SUCCESS',\n    ERROR = 'ERROR',\n}\n\nexport interface JobStateCommon {\n    id: string,\n    dataset: string,\n    status: JobStatus,\n    startTimestamp: number,\n    results: JobResultType[],\n}\n\nexport type JobStateStart = JobStateCommon & {\n    running: JobRunning.CREATING | JobRunning.RUNNING,\n}\n\nexport type JobStateDone = JobStateCommon & {\n    running: JobRunning.DONE,\n    endTimestamp: number,\n}\n\nexport type JobState = JobStateStart | JobStateDone;","import * as React from \"react\";\nimport { Icon } from \"semantic-ui-react\";\n\nconst BusySpinner: React.SFC = () => {\n    const styles: React.CSSProperties = {\n        margin: 0,\n        padding: 0,\n        position: \"absolute\",\n        bottom: \"10px\",\n        right: \"10px\",\n        color: \"white\",\n        opacity: 0.7,\n        filter: \"drop-shadow(0 0 3px #000)\",\n    };\n    return (\n        <Icon name=\"cog\" loading={true} style={styles} />\n    )\n}\n\nexport default BusySpinner;","import * as React from \"react\";\nimport BusySpinner from \"./BusySpinner\";\n\ninterface BusyWrapperProps {\n    busy: boolean,\n}\n\nconst BusyWrapper: React.SFC<BusyWrapperProps> = ({ children, busy }) => {\n    const styles: React.CSSProperties = {\n        position: \"relative\",\n    };\n    return (\n        <div style={styles}>\n            {children}\n            {busy && <BusySpinner />}\n        </div>\n    )\n}\n\nexport default BusyWrapper;","import * as React from \"react\";\nimport { JobState } from \"../types\";\n\ninterface ResultImageProps {\n    job: JobState,\n    idx: number,\n    width: number,\n    height: number,\n}\n\nconst ResultImage: React.SFC<ResultImageProps> = ({ job, idx, width, height }) => {\n    const style: React.CSSProperties = {\n        width: \"100%\",\n        height: \"auto\",\n        imageRendering: \"pixelated\"\n    };\n    const result = job.results[idx];\n    if (result === undefined) {\n        return (\n            <svg style={{ display: \"block\", border: \"1px solid black\", width: \"100%\", height: \"auto\" }} width={width} height={height} viewBox={`0 0 ${width} ${height}`} key={-1} />\n        )\n    }\n    return (\n        <image style={style} xlinkHref={result.imageURL} width={width} height={height} />\n    );\n}\n\nexport default ResultImage;","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport * as analysisActions from '../../analysis/actions';\nimport { AnalysisState } from \"../../analysis/types\";\nimport { AnalysisTypes, DatasetState } from \"../../messages\";\nimport BusyWrapper from \"../../widgets/BusyWrapper\";\nimport { inRectConstraint } from \"../../widgets/constraints\";\nimport DraggableHandle from \"../../widgets/DraggableHandle\";\nimport HandleParent from \"../../widgets/HandleParent\";\nimport { handleKeyEvent, ModifyCoords } from \"../../widgets/kbdHandler\";\nimport { JobRunning, JobState } from \"../types\";\nimport ResultImage from \"./ResultImage\";\n\ninterface ResultProps {\n    width: number,\n    height: number,\n    job: JobState,\n    dataset: DatasetState,\n    analysis: AnalysisState,\n    idx: number,\n}\n\n\nconst mapDispatchToProps = {\n    updateParameters: analysisActions.Actions.updateParameters,\n};\n\ntype MergedProps = ResultProps & DispatchProps<typeof mapDispatchToProps>;\n\nclass Result extends React.Component<MergedProps> {\n    public onCenterChange = (x: number, y: number) => {\n        const { analysis } = this.props;\n        if (analysis.frameDetails.type !== AnalysisTypes.PICK_FRAME) {\n            return;\n        }\n        const oldParams = analysis.frameDetails.parameters;\n        const newX = Math.round(x);\n        const newY = Math.round(y);\n        if (oldParams.x === newX && oldParams.y === newY) {\n            return;\n        }\n        this.props.updateParameters(this.props.analysis.id, {\n            x: newX,\n            y: newY,\n        }, \"FRAME\");\n    }\n\n    public renderPickHandles() {\n        const { analysis, width, height } = this.props;\n        if (analysis.frameDetails.type !== AnalysisTypes.PICK_FRAME) {\n            return null;\n        }\n        const { x, y } = analysis.frameDetails.parameters;\n\n        const myKeyEvent = (e: React.KeyboardEvent<SVGElement>) => {\n            const update = (fn: ModifyCoords) => {\n                const newCoords = fn(x, y);\n                this.onCenterChange(newCoords.x, newCoords.y);\n            }\n            handleKeyEvent(e, update);\n        }\n\n        return (\n            <HandleParent width={width} height={height} onKeyboardEvent={myKeyEvent}>\n                <DraggableHandle x={x} y={y} withCross={true}\n                    imageWidth={width}\n                    onDragMove={this.onCenterChange}\n                    constraint={inRectConstraint(width, height)} />\n            </HandleParent>\n        );\n    }\n\n    public render() {\n        const { job, idx, width, height } = this.props;\n        const busy = job.running !== JobRunning.DONE;\n\n        return (\n            <BusyWrapper busy={busy}>\n                <svg style={{ display: \"block\", border: \"1px solid black\", width: \"100%\", height: \"auto\" }} width={width} height={height} viewBox={`0 0 ${width} ${height}`}>\n                    <ResultImage job={job} idx={idx} width={width} height={height} />\n                    {this.renderPickHandles()}\n                </svg>\n            </BusyWrapper>\n        );\n    }\n};\n\nexport default connect(null, mapDispatchToProps)(Result);","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Dropdown, DropdownProps } from \"semantic-ui-react\";\nimport { AnalysisTypes } from \"../../messages\";\nimport { RootReducer } from \"../../store\";\nimport { JobRunning, JobState } from \"../types\";\nimport Result from \"./Result\";\n\ninterface ResultListProps {\n    width: number,\n    height: number,\n}\n\ninterface ExternalResultListProps {\n    analysis: string,\n}\n\nconst mapStateToProps = (state: RootReducer, ownProps: ExternalResultListProps) => {\n    const analysis = state.analyses.byId[ownProps.analysis];\n    const jobId = analysis.jobs.RESULT;\n    const job = jobId ? state.jobs.byId[jobId] : undefined;\n    const ds = job ? state.datasets.byId[job.dataset] : undefined;\n    const pickCoords = analysis.frameDetails.type === AnalysisTypes.SUM_FRAMES ? null : <>Pick: x={analysis.frameDetails.parameters.x}, y={analysis.frameDetails.parameters.y} &emsp;</>;\n\n    return {\n        currentJob: job,\n        jobsById: state.jobs.byId,\n        analysis,\n        dataset: ds,\n        pickCoords,\n    };\n};\n\ntype MergedProps = ResultListProps & ReturnType<typeof mapStateToProps>;\n\ninterface ResultListState {\n    selectedImg: number,\n}\n\nclass ResultList extends React.Component<MergedProps, ResultListState> {\n    public state: ResultListState = { selectedImg: 0 };\n\n    public selectImage = (e: React.SyntheticEvent, data: DropdownProps) => {\n        const value = data.value as number;\n        this.setState({ selectedImg: value });\n    }\n\n    public getJob = () => {\n        const { currentJob, analysis, jobsById } = this.props;\n        if (!currentJob) {\n            return;\n        }\n        if (currentJob.results.length > 0) {\n            return currentJob;\n        }\n        const history = analysis.jobHistory.RESULT;\n        if (history.length > 0) {\n            return jobsById[history[0]];\n        }\n        return;\n    }\n\n    public render() {\n        const { analysis, dataset, width, height, pickCoords } = this.props;\n        let msg;\n        let img = (\n            <svg style={{ display: \"block\", border: \"1px solid black\", width: \"100%\", height: \"auto\" }} width={width} height={height} viewBox={`0 0 ${width} ${height}`} key={-1} />\n        );\n        const job = this.getJob();\n        if (!job || !dataset) {\n            msg = <>&nbsp;</>;\n        } else {\n            img = (\n                <Result analysis={analysis} job={job} dataset={dataset} width={width} height={height} idx={this.state.selectedImg} />\n            );\n            if (job.running === JobRunning.DONE) {\n                const dt = (job.endTimestamp - job.startTimestamp) / 1000;\n                msg = <>Analysis done in {dt.toFixed(3)} seconds</>;\n            } else {\n                msg = <>Analysis running...</>;\n            }\n        }\n        return (\n            <div>\n                {img}\n                <ResultImageSelector job={job} handleChange={this.selectImage} selectedImg={this.state.selectedImg} />\n                <p>{pickCoords} {msg}</p>\n            </div>\n        );\n    }\n}\n\ninterface ImageSelectorProps {\n    job?: JobState,\n    handleChange: (e: React.SyntheticEvent, data: DropdownProps) => void,\n    selectedImg: number,\n}\n\nconst ResultImageSelector: React.SFC<ImageSelectorProps> = ({ job, handleChange, selectedImg }) => {\n    if (!job) {\n        return null;\n    }\n    const availableImages = job.results.map((result, idx) => ({ text: result.description.title, value: idx }));\n    return (\n        <>\n            <div>\n                Image:{' '}\n                <Dropdown\n                    inline={true}\n                    options={availableImages}\n                    value={selectedImg}\n                    onChange={handleChange}\n                />\n            </div>\n        </>\n    )\n}\n\n\nexport default connect(mapStateToProps)(ResultList);\n","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Dropdown, DropdownProps } from \"semantic-ui-react\";\nimport { AnalysisTypes, DatasetStatus } from \"../../messages\";\nimport { RootReducer } from \"../../store\";\nimport * as analysisActions from '../actions';\nimport { AnalysisState, FrameMode } from \"../types\";\n\nconst frameViewModeOptions = [\n    {\n        text: \"Average\",\n        value: AnalysisTypes.SUM_FRAMES,\n    },\n    {\n        text: \"Pick\",\n        value: AnalysisTypes.PICK_FRAME,\n    }\n]\n\nconst mapDispatchToProps = {\n    setFrameViewMode: analysisActions.Actions.setFrameViewMode,\n}\n\nconst mapStateToProps = (state: RootReducer, ownProps: PMSProps) => {\n    const dataset = state.datasets.byId[ownProps.analysis.dataset]\n    if (dataset.status !== DatasetStatus.OPEN) {\n        throw Error(\"invalid dataset status\");\n    }\n    const shape = dataset.params.shape;\n    const scanWidth = shape[1];\n    const scanHeight = shape[0];\n    return {\n        scanWidth,\n        scanHeight,\n    }\n}\n\ninterface PMSProps {\n    analysis: AnalysisState,\n}\n\ntype MergedProps = PMSProps & DispatchProps<typeof mapDispatchToProps> & ReturnType<typeof mapStateToProps>;\n\nclass FrameViewModeSelector extends React.Component<MergedProps> {\n    public handleChange = (e: React.SyntheticEvent, data: DropdownProps) => {\n        const value = data.value as FrameMode;\n        const { analysis, scanWidth, scanHeight } = this.props;\n        let initialParams = {};\n        if (value === AnalysisTypes.PICK_FRAME) {\n            initialParams = {\n                x: Math.round(scanWidth / 2),\n                y: Math.round(scanHeight / 2),\n            }\n        }\n        this.props.setFrameViewMode(analysis.id, value, initialParams);\n    }\n\n    public render() {\n        const { analysis } = this.props;\n\n        return (\n            <>\n                <div>\n                    Mode:{' '}\n                    <Dropdown\n                        inline={true}\n                        options={frameViewModeOptions}\n                        value={analysis.frameDetails.type}\n                        onChange={this.handleChange}\n                    />\n                </div>\n            </>\n        )\n    }\n\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(FrameViewModeSelector);","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { Button, Icon, IconProps, Segment } from \"semantic-ui-react\";\nimport { JobReducerState } from \"../../job/reducers\";\nimport { JobRunning } from \"../../job/types\";\nimport { RootReducer } from \"../../store\";\nimport * as analysisActions from \"../actions\";\nimport { AnalysisState } from \"../types\";\n\ninterface ToolbarProps {\n    analysis: AnalysisState,\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch, ownProps: ToolbarProps) => {\n    return {\n        handleApply: () => {\n            dispatch(analysisActions.Actions.run(ownProps.analysis.id, \"RESULT\"))\n        },\n        handleRemove: () => dispatch(analysisActions.Actions.remove(ownProps.analysis.id)),\n    }\n}\n\ntype MergedProps = ToolbarProps & ReturnType<typeof mapDispatchToProps> & ReturnType<typeof mapStateToProps>;\n\nconst Toolbar: React.SFC<MergedProps> = ({ status, handleApply, handleRemove }) => {\n    const running = status === \"busy\";\n    const applyIconProps: IconProps = running ? { name: 'cog', loading: true } : { name: 'check' }\n    return (\n        <Segment attached=\"bottom\">\n            <Button.Group>\n                <Button primary={true} onClick={handleApply} icon={true}>\n                    <Icon {...applyIconProps} />\n                    Apply\n                </Button>\n                <Button onClick={handleRemove} icon={true}>\n                    <Icon name='remove' />\n                    Remove\n                </Button>\n            </Button.Group>\n        </Segment>\n    );\n}\n\nconst getAnalysisStatus = (analysis: AnalysisState, jobs: JobReducerState): \"idle\" | \"busy\" => {\n    const jobId = analysis.jobs.RESULT;\n    if (jobId === undefined) {\n        return \"idle\";\n    }\n    const isDone = jobs.byId[jobId].running === JobRunning.DONE;\n    return isDone ? \"idle\" : \"busy\";\n}\n\nconst mapStateToProps = (state: RootReducer, ownProps: ToolbarProps) => {\n    const status = getAnalysisStatus(ownProps.analysis, state.jobs);\n    return {\n        status,\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Toolbar);","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Grid, Header, Icon, Segment } from \"semantic-ui-react\";\nimport ResultList from \"../../job/components/ResultList\";\nimport { JobReducerState } from \"../../job/reducers\";\nimport { DatasetOpen } from \"../../messages\";\nimport { RootReducer } from \"../../store\";\nimport BusyWrapper from \"../../widgets/BusyWrapper\";\nimport { AnalysisState } from \"../types\";\nimport FrameViewModeSelector from \"./FrameViewModeSelector\";\nimport Toolbar from \"./Toolbar\";\n\ninterface AnalysisItemProps {\n    analysis: AnalysisState,\n    dataset: DatasetOpen,\n    title: string,\n    subtitle: React.ReactNode,\n}\n\ntype MergedProps = AnalysisItemProps & ReturnType<typeof mapStateToProps>;\n\nconst AnalysisItem: React.SFC<MergedProps> = ({ frameJob, analysis, dataset, title, subtitle, children }) => {\n    const { shape } = dataset.params;\n    const resultWidth = shape[1];\n    const resultHeight = shape[0];\n\n    const frameViewBusy = frameJob !== undefined ? frameJob.running !== \"DONE\" : false;\n\n    return (\n        <>\n            <Header as='h3' attached=\"top\">\n                <Icon name=\"cog\" />\n                <Header.Content>{title}</Header.Content>\n            </Header>\n            <Segment attached={true}>\n                <Grid columns={2}>\n                    <Grid.Row>\n                        <Grid.Column>\n                            <BusyWrapper busy={frameViewBusy}>\n                                {children}\n                            </BusyWrapper>\n                            <FrameViewModeSelector analysis={analysis} />\n                            <p>{subtitle}</p>\n                        </Grid.Column>\n                        <Grid.Column>\n                            <ResultList analysis={analysis.id} width={resultWidth} height={resultHeight} />\n                        </Grid.Column>\n                    </Grid.Row>\n                </Grid>\n            </Segment>\n            <Toolbar analysis={analysis} />\n        </>\n    )\n}\n\nconst getFrameJob = (analysis: AnalysisState, jobs: JobReducerState) => {\n    const frameJobId = analysis.jobs.FRAME;\n    if (frameJobId === undefined) {\n        return;\n    }\n    return jobs.byId[frameJobId];\n}\n\nconst mapStateToProps = (state: RootReducer, ownProps: AnalysisItemProps) => {\n    return {\n        frameJob: getFrameJob(ownProps.analysis, state.jobs)\n    }\n}\n\nexport default connect(mapStateToProps)(AnalysisItem);","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport ResultImage from \"../../job/components/ResultImage\";\nimport { JobReducerState } from \"../../job/reducers\";\nimport { DatasetOpen } from \"../../messages\";\nimport { RootReducer } from \"../../store\";\nimport { AnalysisState } from \"../types\";\n\nexport interface FrameViewProps {\n    analysis: AnalysisState,\n    dataset: DatasetOpen,\n}\n\ntype MergedProps = FrameViewProps & ReturnType<typeof mapStateToProps>;\n\nconst FrameView: React.SFC<MergedProps> = ({ analysis, dataset, job }) => {\n    const { shape } = dataset.params;\n\n    const imageWidth = shape[3];\n    const imageHeight = shape[2];\n\n    if (job === undefined) {\n        return null;\n    }\n\n    return (\n        <ResultImage job={job} idx={0} width={imageWidth} height={imageHeight} />\n    );\n}\n\nconst getJob = (analysis: AnalysisState, jobs: JobReducerState) => {\n    const jobId = analysis.jobs.FRAME;\n    if (jobId === undefined) {\n        return;\n    }\n    const job = jobs.byId[jobId];\n    if (job.results.length > 0) {\n        return job;\n    }\n    const history = analysis.jobHistory.FRAME;\n    for (const tmpJobId of history) {\n        const tmpJob = jobs.byId[tmpJobId];\n        if (tmpJob.results.length > 0) {\n            return tmpJob;\n        }\n    }\n    return;\n}\n\nconst mapStateToProps = (state: RootReducer, ownProps: FrameViewProps) => {\n    return {\n        job: getJob(ownProps.analysis, state.jobs),\n    }\n}\n\nexport default connect(mapStateToProps)(FrameView);","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { defaultDebounce } from \"../../helpers\";\nimport { CenterOfMassParams, DatasetOpen } from \"../../messages\";\nimport Disk from \"../../widgets/Disk\";\nimport * as analysisActions from \"../actions\";\nimport { AnalysisState } from \"../types\";\nimport AnalysisItem from \"./AnalysisItem\";\nimport FrameView from \"./FrameView\";\n\ninterface AnalysisProps {\n    parameters: CenterOfMassParams,\n    analysis: AnalysisState,\n    dataset: DatasetOpen,\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch, ownProps: AnalysisProps) => {\n    return {\n        handleCenterChange: defaultDebounce((cx: number, cy: number) => {\n            dispatch(analysisActions.Actions.updateParameters(ownProps.analysis.id, { cx, cy }, \"RESULT\"));\n        }),\n        handleRChange: defaultDebounce((r: number) => {\n            dispatch(analysisActions.Actions.updateParameters(ownProps.analysis.id, { r }, \"RESULT\"));\n        }),\n    }\n}\n\n\ntype MergedProps = AnalysisProps & ReturnType<typeof mapDispatchToProps>\n\nconst CenterOfMassAnalysis: React.SFC<MergedProps> = ({ parameters, analysis, dataset, handleRChange, handleCenterChange }) => {\n    const { shape } = dataset.params;\n\n    const imageWidth = shape[3];\n    const imageHeight = shape[2];\n\n    const image = <FrameView dataset={dataset} analysis={analysis} />\n\n    return (\n        <AnalysisItem analysis={analysis} dataset={dataset} title=\"COM analysis\" subtitle={\n            <>Disk: center=(x={parameters.cx.toFixed(2)}, y={parameters.cy.toFixed(2)}), r={parameters.r.toFixed(2)}</>\n        }>\n            <Disk cx={parameters.cx} cy={parameters.cy} r={parameters.r}\n                image={image}\n                imageWidth={imageWidth} imageHeight={imageHeight} onCenterChange={handleCenterChange} onRChange={handleRChange} />\n        </AnalysisItem>\n    );\n}\n\nexport default connect(null, mapDispatchToProps)(CenterOfMassAnalysis);","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { defaultDebounce } from \"../../helpers\";\nimport { DatasetOpen, MaskDefDisk } from \"../../messages\";\nimport Disk from \"../../widgets/Disk\";\nimport * as analysisActions from \"../actions\";\nimport { AnalysisState } from \"../types\";\nimport AnalysisItem from \"./AnalysisItem\";\nimport FrameView from \"./FrameView\";\n\ninterface AnalysisProps {\n    parameters: MaskDefDisk,\n    analysis: AnalysisState,\n    dataset: DatasetOpen,\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch, ownProps: AnalysisProps) => {\n    return {\n        handleCenterChange: defaultDebounce((cx: number, cy: number) => {\n            dispatch(analysisActions.Actions.updateParameters(ownProps.analysis.id, { cx, cy }, \"RESULT\"));\n        }),\n        handleRChange: defaultDebounce((r: number) => {\n            dispatch(analysisActions.Actions.updateParameters(ownProps.analysis.id, { r }, \"RESULT\"));\n        }),\n    }\n}\n\n\ntype MergedProps = AnalysisProps & ReturnType<typeof mapDispatchToProps>\n\nconst DiskMaskAnalysis: React.SFC<MergedProps> = ({ parameters, analysis, dataset, handleRChange, handleCenterChange }) => {\n    const { shape } = dataset.params;\n    const imageWidth = shape[3];\n    const imageHeight = shape[2];\n\n    const image = <FrameView dataset={dataset} analysis={analysis} />\n\n    return (\n        <AnalysisItem analysis={analysis} dataset={dataset} title=\"Disk analysis\" subtitle={\n            <>Disk: center=(x={parameters.cx.toFixed(2)}, y={parameters.cy.toFixed(2)}), r={parameters.r.toFixed(2)}</>\n        }>\n            <Disk cx={parameters.cx} cy={parameters.cy} r={parameters.r}\n                image={image}\n                imageWidth={imageWidth} imageHeight={imageHeight} onCenterChange={handleCenterChange} onRChange={handleRChange} />\n        </AnalysisItem>\n    );\n}\n\nexport default connect(null, mapDispatchToProps)(DiskMaskAnalysis);","import * as React from \"react\";\nimport { inRectConstraint } from \"./constraints\";\nimport DraggableHandle from \"./DraggableHandle\";\nimport HandleParent from \"./HandleParent\";\nimport { handleKeyEvent, ModifyCoords } from \"./kbdHandler\";\n\nexport interface PointProps {\n    imageWidth: number,\n    imageHeight: number,\n    cx: number,\n    cy: number,\n    image?: React.ReactElement<any>,\n    onCenterChange?: (x: number, y: number) => void,\n    onRChange?: (r: number) => void,\n}\n\nconst Point: React.SFC<PointProps> = ({ imageWidth, imageHeight, cx, cy, image, onCenterChange }) => {\n    const myKeyEvent = (e: React.KeyboardEvent<SVGElement>) => {\n        const update = (fn: ModifyCoords) => {\n            if (onCenterChange) {\n                const newCoords = fn(cx, cy);\n                onCenterChange(newCoords.x, newCoords.y);\n            };\n        }\n        handleKeyEvent(e, update)\n    }\n\n    return (\n        <svg style={{ display: \"block\", border: \"1px solid black\", width: \"100%\", height: \"auto\" }} width={imageWidth} height={imageHeight} viewBox={`0 0 ${imageWidth} ${imageHeight}`}>\n            {image}\n            <HandleParent width={imageWidth} height={imageHeight} onKeyboardEvent={myKeyEvent} >\n                <DraggableHandle x={cx} y={cy} withCross={true}\n                    onDragMove={onCenterChange}\n                    imageWidth={imageWidth}\n                    constraint={inRectConstraint(imageWidth, imageHeight)} />\n            </HandleParent>\n        </svg>\n    );\n}\n\nexport default Point;","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { defaultDebounce } from \"../../helpers\";\nimport { DatasetOpen, PointDef } from \"../../messages\";\nimport Point from \"../../widgets/Point\";\nimport * as analysisActions from \"../actions\";\nimport { AnalysisState } from \"../types\";\nimport AnalysisItem from \"./AnalysisItem\";\nimport FrameView from \"./FrameView\";\n\ninterface AnalysisProps {\n    parameters: PointDef,\n    analysis: AnalysisState,\n    dataset: DatasetOpen,\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch, ownProps: AnalysisProps) => {\n    return {\n        handleCenterChange: defaultDebounce((cx: number, cy: number) => {\n            dispatch(analysisActions.Actions.updateParameters(ownProps.analysis.id, { cx, cy }, \"RESULT\"));\n        }),\n    }\n}\n\n\ntype MergedProps = AnalysisProps & ReturnType<typeof mapDispatchToProps>\n\nconst PointSelectionAnalysis: React.SFC<MergedProps> = ({ parameters, analysis, dataset, handleCenterChange }) => {\n    const { shape } = dataset.params;\n    const imageWidth = shape[3];\n    const imageHeight = shape[2];\n\n    const image = <FrameView dataset={dataset} analysis={analysis} />\n\n    return (\n        <AnalysisItem analysis={analysis} dataset={dataset} title=\"Point analysis\" subtitle={\n            <>Point: center=(x={parameters.cx.toFixed(2)}, y={parameters.cy.toFixed(2)})</>\n        }>\n            <Point cx={parameters.cx} cy={parameters.cy}\n                image={image}\n                imageWidth={imageWidth} imageHeight={imageHeight} onCenterChange={handleCenterChange} />\n        </AnalysisItem>\n    );\n}\n\nexport default connect(null, mapDispatchToProps)(PointSelectionAnalysis);","// from https://stackoverflow.com/a/45100420/540644\nexport function getPathArc(center: { x: number, y: number }, start: number, end: number, radius: number) {\n    if (end === start) { end += 360; }\n    let degree = end - start;\n    degree = degree < 0 ? (degree + 360) : degree;\n    const points = [];\n    points.push(getLocationFromAngle(start, radius, center));\n    points.push(getLocationFromAngle(start + degree / 3, radius, center));\n    points.push(getLocationFromAngle(start + degree * 2 / 3, radius, center));\n    points.push(getLocationFromAngle(end, radius, center));\n    return getCirclePath(points, radius, (degree < 180) ? 0 : 1);\n}\n\nfunction getCirclePath(points: Array<{ x: number, y: number }>, radius: number, clockWise: 0 | 1) {\n    return ['M', points[0].x, points[0].y,\n        'A', radius, radius, 0, 0, clockWise, points[1].x, points[1].y,\n        'A', radius, radius, 0, 0, clockWise, points[2].x, points[2].y,\n        'A', radius, radius, 0, 0, clockWise, points[3].x, points[3].y\n    ].join(' ');\n}\n\nfunction getLocationFromAngle(degree: number, radius: number, center: { x: number, y: number }) {\n    const radian = (degree * Math.PI) / 180;\n    return {\n        x: Math.cos(radian) * radius + center.x,\n        y: Math.sin(radian) * radius + center.y\n    }\n}\n","import * as React from \"react\";\nimport { getPathArc } from \"../helpers/svg\";\nimport { cbToRadius, inRectConstraint, riConstraint, roConstraints } from \"./constraints\";\nimport DraggableHandle from \"./DraggableHandle\";\nimport HandleParent from \"./HandleParent\";\nimport { handleKeyEvent, ModifyCoords } from \"./kbdHandler\";\nimport { defaultMaskStyles } from \"./styles\";\n\nexport interface RingProps {\n    imageWidth: number,\n    imageHeight: number,\n    cx: number,\n    cy: number,\n    ri: number,\n    ro: number,\n    image?: React.ReactElement<any>,\n    onCenterChange?: (x: number, y: number) => void,\n    onRIChange?: (r: number) => void,\n    onROChange?: (r: number) => void,\n}\n\nconst Ring: React.SFC<RingProps> = ({ imageWidth, imageHeight, cx, cy, ri, ro, image, onCenterChange, onRIChange, onROChange }) => {\n    const riHandle = {\n        x: cx - ri,\n        y: cy,\n    }\n    const roHandle = {\n        x: cx - ro,\n        y: cy,\n    }\n\n    // see also: https://stackoverflow.com/a/37883328/540644\n    const pathSpecs = [\n        getPathArc({ x: cx, y: cy }, 90, 90, ro),\n        getPathArc({ x: cx, y: cy }, 90, 90, ri)\n    ]\n    const pathSpec = pathSpecs.join(' ');\n\n\n    const myKeyEvent = (e: React.KeyboardEvent<SVGElement>) => {\n        const update = (fn: ModifyCoords) => {\n            if (onCenterChange) {\n                const newCoords = fn(cx, cy);\n                onCenterChange(newCoords.x, newCoords.y);\n            };\n        }\n        handleKeyEvent(e, update)\n    }\n\n    return (\n        <svg style={{ display: \"block\", border: \"1px solid black\", width: \"100%\", height: \"auto\" }} width={imageWidth} height={imageHeight} viewBox={`0 0 ${imageWidth} ${imageHeight}`}>\n            {image}\n            <path d={pathSpec} fillRule=\"evenodd\" style={{ ...defaultMaskStyles(imageWidth) }} />\n            <HandleParent width={imageWidth} height={imageHeight} onKeyboardEvent={myKeyEvent}>\n                <DraggableHandle x={cx} y={cy}\n                    imageWidth={imageWidth}\n                    onDragMove={onCenterChange}\n                    constraint={inRectConstraint(imageWidth, imageHeight)} />\n                <DraggableHandle x={roHandle.x} y={roHandle.y}\n                    imageWidth={imageWidth}\n                    onDragMove={cbToRadius(cx, cy, onROChange)}\n                    constraint={roConstraints(riHandle.x, cy)} />\n                <DraggableHandle x={riHandle.x} y={riHandle.y}\n                    imageWidth={imageWidth}\n                    onDragMove={cbToRadius(cx, cy, onRIChange)}\n                    constraint={riConstraint(roHandle.x, cy)} />\n            </HandleParent>\n        </svg>\n    );\n}\n\nexport default Ring;","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { defaultDebounce } from \"../../helpers\";\nimport { DatasetOpen, MaskDefRing } from \"../../messages\";\nimport Ring from \"../../widgets/Ring\";\nimport * as analysisActions from \"../actions\";\nimport { AnalysisState } from \"../types\";\nimport AnalysisItem from \"./AnalysisItem\";\nimport FrameView from \"./FrameView\";\n\ninterface AnalysisProps {\n    parameters: MaskDefRing,\n    analysis: AnalysisState,\n    dataset: DatasetOpen,\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch, ownProps: AnalysisProps) => {\n    return {\n        handleCenterChange: defaultDebounce((cx: number, cy: number) => {\n            dispatch(analysisActions.Actions.updateParameters(ownProps.analysis.id, { cx, cy }, \"RESULT\"));\n        }),\n        handleRIChange: defaultDebounce((ri: number) => {\n            dispatch(analysisActions.Actions.updateParameters(ownProps.analysis.id, { ri }, \"RESULT\"));\n        }),\n        handleROChange: defaultDebounce((ro: number) => {\n            dispatch(analysisActions.Actions.updateParameters(ownProps.analysis.id, { ro }, \"RESULT\"));\n        }),\n    }\n}\n\ntype MergedProps = AnalysisProps & ReturnType<typeof mapDispatchToProps>\n\nconst RingMaskAnalysis: React.SFC<MergedProps> = ({ analysis, dataset, parameters, handleCenterChange, handleRIChange, handleROChange }) => {\n    const { shape } = dataset.params;\n    const imageWidth = shape[3];\n    const imageHeight = shape[2];\n\n    const image = <FrameView dataset={dataset} analysis={analysis} />\n\n    return (\n        <AnalysisItem analysis={analysis} dataset={dataset} title=\"Ring analysis\" subtitle={\n            <>Ring: center=(x={parameters.cx.toFixed(2)}, y={parameters.cy.toFixed(2)}), ri={parameters.ri.toFixed(2)}, ro={parameters.ro.toFixed(2)}</>\n        }>\n            <Ring cx={parameters.cx} cy={parameters.cy} ri={parameters.ri} ro={parameters.ro}\n                imageWidth={imageWidth} imageHeight={imageHeight} image={image}\n                onCenterChange={handleCenterChange} onRIChange={handleRIChange} onROChange={handleROChange} />\n        </AnalysisItem>\n    );\n}\n\nexport default connect(null, mapDispatchToProps)(RingMaskAnalysis);","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { assertNotReached } from '../../helpers';\nimport { AnalysisTypes, DatasetStatus } from \"../../messages\";\nimport { RootReducer } from \"../../store\";\nimport { AnalysisState } from \"../types\";\nimport CenterOfMassAnalysis from \"./CenterOfMassAnalysis\";\nimport DiskMaskAnalysis from \"./DiskMaskAnalysis\";\nimport PointSelectionAnalysis from \"./PointSelectionAnalysis\";\nimport RingMaskAnalysis from \"./RingMaskAnalysis\";\n\ninterface AnalysisProps {\n    analysis: AnalysisState,\n}\n\nconst mapStateToProps = (state: RootReducer, ownProps: AnalysisProps) => {\n    return {\n        dataset: state.datasets.byId[ownProps.analysis.dataset],\n    }\n}\n\ntype MergedProps = AnalysisProps & ReturnType<typeof mapStateToProps>;\n\nconst AnalysisComponent: React.SFC<MergedProps> = ({ analysis, dataset }) => {\n    if (dataset.status !== DatasetStatus.OPEN) {\n        return null;\n    }\n\n    switch (analysis.resultDetails.type) {\n        case AnalysisTypes.APPLY_DISK_MASK: {\n            return <DiskMaskAnalysis dataset={dataset} analysis={analysis} parameters={analysis.resultDetails.parameters} />;\n        };\n        case AnalysisTypes.APPLY_RING_MASK: {\n            return <RingMaskAnalysis dataset={dataset} analysis={analysis} parameters={analysis.resultDetails.parameters} />;\n        }\n        case AnalysisTypes.CENTER_OF_MASS: {\n            return <CenterOfMassAnalysis dataset={dataset} analysis={analysis} parameters={analysis.resultDetails.parameters} />;\n        }\n        case AnalysisTypes.APPLY_POINT_SELECTOR: {\n            return <PointSelectionAnalysis dataset={dataset} analysis={analysis} parameters={analysis.resultDetails.parameters} />\n        }\n    }\n\n    return assertNotReached(\"unknown analysis type\");\n}\n\nexport default connect(mapStateToProps)(AnalysisComponent);","import * as React from \"react\";\nimport { AnalysisReducerState } from \"../reducers\";\nimport Analysis from \"./Analysis\";\n\ninterface AnalysisProps {\n    analyses: AnalysisReducerState,\n}\n\nconst AnalysisList: React.SFC<AnalysisProps> = ({ analyses }) => {\n    return (<>{\n        analyses.ids.map(analysisId => <Analysis key={analysisId} analysis={analyses.byId[analysisId]} />)\n    }</>);\n}\n\nexport default AnalysisList;","interface IdMap<R> {\n    [s: string]: R\n}\n\nexport interface ById<R> {\n    ids: string[],\n    byId: IdMap<R>,\n};\n\n// TODO: make ById DeepReadonly\n// import { DeepReadonly } from 'utility-types'\n\nexport function updateById<R>(state: ById<R>, id: string, partialRecord: Partial<R>): ById<R> {\n    const newObj = Object.assign({}, state.byId[id], partialRecord);\n    const newById = Object.assign({}, state.byId, { [id]: newObj });\n    return Object.assign({}, state, { byId: newById });\n}\n\nexport function insertById<R>(state: ById<R>, id: string, record: R): ById<R> {\n    const newById = Object.assign({}, state.byId, { [id]: record });\n    const newIds = [...state.ids, id];\n    return { byId: newById, ids: newIds };\n}\n\nexport function constructById<R>(items: R[], key: (k: R) => string): IdMap<R> {\n    const byId = items.reduce((acc, item) => Object.assign(acc, {\n        [key(item)]: item,\n    }), {} as IdMap<R>);\n    return byId;\n}\n\nexport type Predicate<R> = (item: R) => boolean;\n\nexport function filterWithPred<R>(state: ById<R>, pred: Predicate<R>): ById<R> {\n    const ids = state.ids.filter(id => pred(state.byId[id]));\n    const byId: IdMap<R> = ids.reduce((acc, id) => Object.assign(acc, {\n        [id]: state.byId[id],\n    }), {});\n    return {\n        byId,\n        ids,\n    };\n}","import { AnalysisDetails, AnalysisTypes, PickFrameDetails, SumFramesDetails } from \"../messages\";\n\nexport type FrameMode = AnalysisTypes.PICK_FRAME | AnalysisTypes.SUM_FRAMES;\n\nexport type JobKind = \"FRAME\" | \"RESULT\";\n\nexport type AnalysisStatus = \"busy\" | \"idle\";\n\nexport type JobList = Partial<{ [K in JobKind]: string }>;\n\nexport type JobHistory = {\n    [K in JobKind]: string[]\n};\n\nexport type FrameAnalysisDetails = PickFrameDetails | SumFramesDetails;\n\nexport interface Analysis {\n    id: string,\n    dataset: string,\n    jobs: JobList,\n    jobHistory: JobHistory,\n    frameDetails: FrameAnalysisDetails,\n    resultDetails: AnalysisDetails,\n}\n\nexport type AnalysisState = Analysis & {\n};\n\ninterface AnalysisMetadataItem {\n    long: string,\n    short: string,\n    showInUI: boolean,\n}\n\nexport const AnalysisMetadata: { [s: string]: AnalysisMetadataItem } = {\n    [AnalysisTypes.APPLY_RING_MASK]: {\n        long: \"Apply a ring mask with center cx, cy; inner radius ri, outer radius ro\",\n        short: \"Ring\",\n        showInUI: true,\n    },\n    [AnalysisTypes.APPLY_DISK_MASK]: {\n        long: \"Apply a disk mask with center cx, cy; radius r\",\n        short: \"Disk\",\n        showInUI: true,\n    },\n    [AnalysisTypes.CENTER_OF_MASS]: {\n        long: \"Compute the center of mass of all diffraction images\",\n        short: \"Center of mass\",\n        showInUI: true,\n    },\n    [AnalysisTypes.APPLY_POINT_SELECTOR]: {\n        long: \"Create an image from a single pixel selected in the detector\",\n        short: \"Point selection\",\n        showInUI: true,\n    },\n    [AnalysisTypes.SUM_FRAMES]: {\n        long: \"Create a sum of all detector frames\",\n        short: \"Sum all frames\",\n        showInUI: false,\n    },\n    [AnalysisTypes.PICK_FRAME]: {\n        long: \"Pick a single frame\",\n        short: \"Pick frame\",\n        showInUI: false,\n    },\n}","import { ActionsUnion, createAction } from '../helpers/actionHelpers';\nimport { DatasetCreateParams, DatasetFormParams, DatasetState } from '../messages';\n\nexport enum ActionTypes {\n    OPEN = 'DATASET_OPEN',\n    CANCEL_OPEN = 'DATASET_CANCEL_OPEN',\n    CREATE = 'DATASET_CREATE',\n    CREATED = 'DATASET_CREATED',\n    ERROR = 'DATASET_ERROR',\n    DELETE = 'DATASET_DELETE',\n    DELETED = 'DATASET_DELETED',\n    DETECT = 'DATASET_DETECT',\n    DETECTED = 'DATASET_DETECTED',\n    DETECT_FAILED = 'DATASET_DETECT_FAILED',\n}\n\nexport const Actions = {\n    open: (path: string, initialParams?: DatasetFormParams) => createAction(ActionTypes.OPEN, { path, initialParams }),\n    cancelOpen: () => createAction(ActionTypes.CANCEL_OPEN),\n    create: (dataset: DatasetCreateParams) => createAction(ActionTypes.CREATE, { dataset }),\n    created: (dataset: DatasetState) => createAction(ActionTypes.CREATED, { dataset }),\n    error: (dataset: string, msg: string, timestamp: number, id: string) => createAction(ActionTypes.ERROR, { dataset, msg, timestamp, id }),\n    delete: (dataset: string) => createAction(ActionTypes.DELETE, { dataset }),\n    deleted: (dataset: string) => createAction(ActionTypes.DELETED, { dataset }),\n    detect: (path: string) => createAction(ActionTypes.DETECT, { path }),\n    detected: (path: string, params: DatasetFormParams) => createAction(ActionTypes.DETECTED, { path, params }),\n    detectFailed: (path: string) => createAction(ActionTypes.DETECT_FAILED, { path }),\n}\n\nexport type Actions = ActionsUnion<typeof Actions>;\n","import * as React from \"react\";\nimport { Dropdown, DropdownItemProps } from \"semantic-ui-react\";\nimport { getEnumValues } from \"../../helpers\";\nimport { AnalysisTypes } from \"../../messages\";\nimport { AnalysisMetadata } from \"../types\";\n\n\nconst getMetadata = (t: any) => AnalysisMetadata[AnalysisTypes[t]];\nconst analysisTypeKeys = getEnumValues(AnalysisTypes);\nconst analysisTypeOptions = analysisTypeKeys.filter(t => getMetadata(t).showInUI).map(t => ({\n    text: getMetadata(t).short,\n    value: AnalysisTypes[t],\n}));\n\ninterface AnalysisSelectProps {\n    onClick: (analysisType: AnalysisTypes) => void,\n    label: string,\n}\n\nconst selectData = (fn: (v: AnalysisTypes) => void) => (e: React.MouseEvent, data: DropdownItemProps) => {\n    return fn(data.value as AnalysisTypes);\n}\n\nconst AnalysisSelect: React.SFC<AnalysisSelectProps> = ({ onClick, label }) => {\n    return (\n        <Dropdown text={label} icon='add' floating={true} labeled={true} button={true} className='icon'>\n            <Dropdown.Menu>\n                <Dropdown.Header content='implemented analyses' />\n                {analysisTypeOptions.map(option => <Dropdown.Item key={option.value} onClick={selectData(onClick)} {...option} />)}\n            </Dropdown.Menu>\n        </Dropdown>\n    );\n}\n\nexport default AnalysisSelect;","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport * as analysisActions from \"../../analysis/actions\";\nimport AnalysisSelect from \"../../analysis/components/AnalysisSelect\";\nimport { AnalysisTypes, DatasetState } from \"../../messages\";\n\ninterface DatasetProps {\n    dataset: DatasetState\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch, ownProps: DatasetProps) => {\n    return {\n        handleAddAnalysis: (type: AnalysisTypes) => {\n            dispatch(analysisActions.Actions.create(ownProps.dataset.id, type));\n        },\n    }\n}\ntype MergedProps = DatasetProps & ReturnType<typeof mapDispatchToProps>;\n\nconst AddAnalysis: React.SFC<MergedProps> = ({ handleAddAnalysis }) => {\n    return <AnalysisSelect onClick={handleAddAnalysis} label='Add analysis' />\n}\n\n\nexport default connect(null, mapDispatchToProps)(AddAnalysis);","import * as React from \"react\";\nimport { Table } from \"semantic-ui-react\";\nimport { DatasetState } from \"../../messages\";\n\ninterface DatasetProps {\n    dataset: DatasetState\n}\n\nconst renderParamValue = (value: any) => {\n    if (value instanceof Array) {\n        return `(${value.join(\",\")})`;\n    } else {\n        return value;\n    }\n}\n\nconst renderParams = (params: any) => {\n    return Object.keys(params).map((key: string, idx: number) => {\n        return (\n            <Table.Row key={idx}>\n                <Table.Cell>{key}</Table.Cell>\n                <Table.Cell>{renderParamValue(params[key])}</Table.Cell>\n            </Table.Row>\n        );\n    })\n}\n\n\nconst DatasetParams: React.SFC<DatasetProps> = ({ dataset }) => {\n    return (\n        <Table>\n            <Table.Header>\n                <Table.Row>\n                    <Table.HeaderCell>Parameter</Table.HeaderCell>\n                    <Table.HeaderCell>Value</Table.HeaderCell>\n                </Table.Row>\n            </Table.Header>\n            <Table.Body>\n                {renderParams(dataset.params)}\n            </Table.Body>\n        </Table>\n    );\n}\n\n\nexport default DatasetParams;","import * as React from \"react\";\nimport { Table } from \"semantic-ui-react\";\nimport { DatasetOpen, DiagElemMsg } from \"../../messages\";\nimport DatasetParams from \"./DatasetParams\";\n\ninterface DatasetInfoProps {\n    dataset: DatasetOpen,\n}\n\nconst renderValue = (elem: DiagElemMsg) => {\n    if (elem.value instanceof Array) {\n        return <DiagElems diagnostics={elem.value} />\n    } else {\n        return elem.value;\n    }\n}\n\nconst DiagElem: React.SFC<{ elem: DiagElemMsg }> = ({ elem }) => {\n    return (\n        <Table.Row>\n            <Table.Cell>{elem.name}</Table.Cell>\n            <Table.Cell>{renderValue(elem)}</Table.Cell>\n        </Table.Row>\n    )\n}\n\nconst DiagElems: React.SFC<{ diagnostics: DiagElemMsg[] }> = ({ diagnostics }) => {\n    if (diagnostics.length === 0) {\n        return null;\n    }\n    return (\n        <Table>\n            <Table.Header>\n                <Table.Row>\n                    <Table.HeaderCell>Name</Table.HeaderCell>\n                    <Table.HeaderCell>Value</Table.HeaderCell>\n                </Table.Row>\n            </Table.Header>\n            <Table.Body>\n                {diagnostics.map((elem, idx) => (\n                    <DiagElem elem={elem} key={idx} />\n                ))}\n            </Table.Body>\n        </Table>\n    );\n}\n\nconst DatasetInfo: React.SFC<DatasetInfoProps> = ({ dataset }) => {\n    return (\n        <>\n            <DatasetParams dataset={dataset} />\n            <DiagElems diagnostics={dataset.diagnostics} />\n        </>\n    );\n}\n\nexport default DatasetInfo;","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { Button } from \"semantic-ui-react\";\nimport { DatasetState } from \"../../messages\";\nimport * as datasetActions from \"../actions\";\n\ninterface DatasetProps {\n    dataset: DatasetState,\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch, ownProps: DatasetProps) => {\n    return {\n        handleRemoveDataset: () => {\n            dispatch(datasetActions.Actions.delete(ownProps.dataset.id));\n        }\n    }\n}\n\ntype MergedProps = DatasetProps & ReturnType<typeof mapDispatchToProps>;\n\nconst DatasetToolbar: React.SFC<MergedProps> = ({ dataset, handleRemoveDataset }) => {\n    return (\n        <>\n            <Button icon=\"remove\" labelPosition=\"left\" onClick={handleRemoveDataset} content='Close Dataset' />\n        </>\n    );\n}\n\n\nexport default connect(null, mapDispatchToProps)(DatasetToolbar);","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Header, Icon, Message, Modal, Popup, Segment } from 'semantic-ui-react';\nimport AnalysisList from \"../../analysis/components/AnalysisList\";\nimport { AnalysisState } from \"../../analysis/types\";\nimport { filterWithPred } from \"../../helpers/reducerHelpers\";\nimport { DatasetState, DatasetStatus } from \"../../messages\";\nimport { RootReducer } from \"../../store\";\nimport AddAnalysis from \"./AddAnalysis\";\nimport DatasetInfo from \"./DatasetInfo\";\nimport DatasetToolbar from \"./DatasetToolbar\";\n\ninterface DatasetProps {\n    dataset: DatasetState\n}\n\nconst mapStateToProps = (state: RootReducer, ownProps: DatasetProps) => {\n    const p = (analysis: AnalysisState) => analysis.dataset === ownProps.dataset.id;\n    return {\n        analyses: filterWithPred(state.analyses, p),\n    }\n}\n\ntype MergedProps = DatasetProps & ReturnType<typeof mapStateToProps>;\n\nconst DatasetComponent: React.SFC<MergedProps> = ({ dataset, analyses }) => {\n    const msg = {\n        [DatasetStatus.OPENING]: `Opening dataset ${dataset.params.name}`,\n        [DatasetStatus.DELETING]: `Closing dataset ${dataset.params.name}`,\n    }\n    if (dataset.status === DatasetStatus.OPENING || dataset.status === DatasetStatus.DELETING) {\n        return (\n            <>\n                <Header as=\"h2\" dividing={true}>{dataset.params.name}</Header>\n                <Message icon={true}>\n                    <Icon name='cog' loading={true} />\n                    <Message.Content>\n                        <Message.Header>{msg[dataset.status]}</Message.Header>\n                    </Message.Content>\n                </Message>\n            </>\n        );\n    }\n\n    return (\n        <Segment.Group style={{ marginTop: \"3em\", marginBottom: \"3em\" }}>\n            <Segment.Group horizontal={true}>\n                <Segment>\n                    <Header as=\"h2\">\n                        <Icon name=\"database\" />\n                        <Modal trigger={\n                            <Header.Content>\n                                {dataset.params.name}\n                                {' '}\n                                <Icon name=\"info circle\" size=\"small\" link={true} />\n                            </Header.Content>\n                        }>\n                            <Popup.Header>{dataset.params.type} Dataset {dataset.params.name}</Popup.Header>\n                            <Popup.Content>\n                                <DatasetInfo dataset={dataset} />\n                            </Popup.Content>\n                        </Modal>\n                    </Header>\n                </Segment>\n                <Segment style={{ flexShrink: 1, flexGrow: 0 }}>\n                    <DatasetToolbar dataset={dataset} />\n                </Segment>\n            </Segment.Group>\n            {\n                analyses.ids.length > 0 ? (\n                    <>\n                        <Segment>\n                            <AnalysisList analyses={analyses} />\n                        </Segment>\n                    </>\n                ) : null\n            }\n            <Segment textAlign=\"center\">\n                <AddAnalysis dataset={dataset} />\n            </Segment>\n        </Segment.Group>\n    );\n}\n\nconst DatasetContainer = connect(mapStateToProps)(DatasetComponent);\n\nexport default DatasetContainer;","\nexport function parseNumList(nums: string) {\n    return nums.split(\",\").map(part => +part);\n}\n\nexport function getInitial<T extends object, K extends keyof T>(key: K, otherwise: string, values?: T): string {\n    if (!values) {\n        return otherwise;\n    }\n    return (values[key] ? values[key] : otherwise).toString();\n}","import { FormikProps, withFormik } from \"formik\";\nimport * as React from \"react\";\nimport { Button, Form } from \"semantic-ui-react\";\nimport { Omit } from \"../../helpers/types\";\nimport { DatasetParamsBLO, DatasetTypes } from \"../../messages\";\nimport { getInitial, parseNumList } from \"../helpers\";\nimport { OpenFormProps } from \"../types\";\n\n// some fields have different types in the form vs. in messages\ntype DatasetParamsBLOForForm = Omit<DatasetParamsBLO,\n    \"path\"\n    | \"type\"\n    | \"tileshape\"> & {\n        tileshape: string,\n    };\n\ntype FormValues = DatasetParamsBLOForForm\n\n\ntype MergedProps = FormikProps<FormValues> & OpenFormProps<DatasetParamsBLO>;\n\nconst BLOFileParamsForm: React.SFC<MergedProps> = ({\n    values,\n    touched,\n    errors,\n    dirty,\n    isSubmitting,\n    handleChange,\n    handleBlur,\n    handleSubmit,\n    handleReset,\n    onCancel,\n}) => {\n    return (\n        <Form onSubmit={handleSubmit}>\n            <Form.Field>\n                <label htmlFor=\"name\">Name:</label>\n                <input type=\"text\" name=\"name\" value={values.name}\n                    onChange={handleChange}\n                    onBlur={handleBlur} />\n                {errors.name && touched.name && errors.name}\n            </Form.Field>\n            <Form.Field>\n                <label htmlFor=\"tileshape\">Tileshape:</label>\n                <input type=\"text\" name=\"tileshape\" value={values.tileshape}\n                    onChange={handleChange} onBlur={handleBlur} />\n            </Form.Field>\n\n            <Button primary={true} type=\"submit\" disabled={isSubmitting}>Load Dataset</Button>\n            <Button type=\"button\" onClick={onCancel}>Cancel</Button>\n        </Form>\n    )\n}\n\nexport default withFormik<OpenFormProps<DatasetParamsBLO>, FormValues>({\n    mapPropsToValues: ({ initial }) => ({\n        name: getInitial(\"name\", \"\", initial),\n        tileshape: getInitial(\"tileshape\", \"1, 8, 128, 128\", initial),\n    }),\n    handleSubmit: (values, formikBag) => {\n        const { onSubmit, path } = formikBag.props;\n        onSubmit({\n            path,\n            type: DatasetTypes.BLO,\n            name: values.name,\n            tileshape: parseNumList(values.tileshape),\n        });\n    }\n})(BLOFileParamsForm);\n","import { ActionsUnion, createAction } from \"../helpers/actionHelpers\";\n\nexport enum ActionTypes {\n    DISMISS = \"ERROR_DISMISS\",\n}\n\nexport const Actions = {\n    dismiss: (id: string) => createAction(ActionTypes.DISMISS, { id }),\n}\n\nexport type Actions = ActionsUnion<typeof Actions>;","import * as React from \"react\";\nimport { Dropdown, DropdownProps } from \"semantic-ui-react\";\nimport { getEnumValues } from \"../../helpers\";\nimport { DatasetTypes } from \"../../messages\";\n\n\nconst datasetTypeKeys = getEnumValues(DatasetTypes);\nconst datasetTypeOptions = datasetTypeKeys.map(t => ({\n    // text: DatasetTypeMetadata[DatasetTypes[t as any]].short,\n    text: DatasetTypes[t],\n    value: DatasetTypes[t],\n}));\n\ninterface DatasetTypeSelectProps {\n    onClick: (e: React.SyntheticEvent, data: DropdownProps) => void,\n    currentType: DatasetTypes,\n}\n\nconst DatasetTypeSelect: React.SFC<DatasetTypeSelectProps> = ({ currentType, onClick }) => {\n    return (\n        <>\n            <Dropdown\n                inline={true}\n                options={datasetTypeOptions}\n                value={currentType}\n                onChange={onClick}\n            />\n        </>\n    );\n}\n\nexport default DatasetTypeSelect;","import { FormikProps, withFormik } from \"formik\";\nimport * as React from \"react\";\nimport { Button, Form } from \"semantic-ui-react\";\nimport { Omit } from \"../../helpers/types\";\nimport { DatasetParamsHDF5, DatasetTypes } from \"../../messages\";\nimport { getInitial } from \"../helpers\";\nimport { OpenFormProps } from \"../types\";\n\ntype DatasetParamsHDF5ForForm = Omit<DatasetParamsHDF5, \"path\" | \"type\" | \"tileshape\"> & { tileshape: string, };\n\ntype FormValues = DatasetParamsHDF5ForForm\n\ntype MergedProps = FormikProps<FormValues> & OpenFormProps<DatasetParamsHDF5>;\n\nconst HDF5ParamsForm: React.SFC<MergedProps> = ({\n    values,\n    touched,\n    errors,\n    dirty,\n    isSubmitting,\n    handleChange,\n    handleBlur,\n    handleSubmit,\n    handleReset,\n    onCancel,\n}) => {\n    return (\n        <Form onSubmit={handleSubmit}>\n            <Form.Field>\n                <label htmlFor=\"name\">Name:</label>\n                <input type=\"text\" name=\"name\" value={values.name}\n                    onChange={handleChange}\n                    onBlur={handleBlur} />\n                {errors.name && touched.name && errors.name}\n            </Form.Field>\n            <Form.Field>\n                <label htmlFor=\"ds_path\">HDF5 Dataset Path:</label>\n                <input type=\"text\" name=\"ds_path\" value={values.ds_path}\n                    onChange={handleChange} onBlur={handleBlur} />\n            </Form.Field>\n            <Form.Field>\n                <label htmlFor=\"tileshape\">Tileshape:</label>\n                <input type=\"text\" name=\"tileshape\" value={values.tileshape}\n                    onChange={handleChange} onBlur={handleBlur} />\n            </Form.Field>\n            <Button primary={true} type=\"submit\" disabled={isSubmitting}>Load Dataset</Button>\n            <Button onClick={onCancel} >Cancel</Button>\n        </Form>\n    )\n}\n\nexport default withFormik<OpenFormProps<DatasetParamsHDF5>, FormValues>({\n    mapPropsToValues: ({ initial }) => ({\n        name: getInitial(\"name\", \"\", initial),\n        tileshape: getInitial(\"tileshape\", \"1, 8, 128, 128\", initial),\n        ds_path: getInitial(\"ds_path\", \"\", initial),\n    }),\n    handleSubmit: (values, formikBag) => {\n        const { onSubmit, path } = formikBag.props;\n        onSubmit({\n            path,\n            type: DatasetTypes.HDF5,\n            name: values.name,\n            ds_path: values.ds_path,\n            tileshape: values.tileshape.split(\",\").map(part => +part),\n        });\n    }\n})(HDF5ParamsForm);","import { FormikProps, withFormik } from \"formik\";\nimport * as React from \"react\";\nimport { Button, Form } from \"semantic-ui-react\";\nimport { Omit } from \"../../helpers/types\";\nimport { DatasetParamsHDFS, DatasetTypes } from \"../../messages\";\nimport { getInitial } from \"../helpers\";\nimport { OpenFormProps } from \"../types\";\n\ntype RawDatasetParamsHDFS = Omit<DatasetParamsHDFS, \"path\" | \"type\" | \"tileshape\"> & {\n    tileshape: string,\n};\n\ntype FormValues = RawDatasetParamsHDFS\n\ntype MergedProps = FormikProps<FormValues> & OpenFormProps<DatasetParamsHDFS>;\n\nconst HDFSParamsForm: React.SFC<MergedProps> = ({\n    values,\n    touched,\n    errors,\n    dirty,\n    isSubmitting,\n    handleChange,\n    handleBlur,\n    handleSubmit,\n    handleReset,\n    onCancel,\n}) => {\n    return (\n        <Form onSubmit={handleSubmit}>\n            <Form.Field>\n                <label htmlFor=\"name\">Name:</label>\n                <input type=\"text\" name=\"name\" value={values.name}\n                    onChange={handleChange}\n                    onBlur={handleBlur} />\n                {errors.name && touched.name && errors.name}\n            </Form.Field>\n            <Form.Field>\n                <label htmlFor=\"tileshape\">Tileshape:</label>\n                <input type=\"text\" name=\"tileshape\" value={values.tileshape}\n                    onChange={handleChange} onBlur={handleBlur} />\n            </Form.Field>\n            <Button primary={true} type=\"submit\" disabled={isSubmitting}>Load Dataset</Button>\n            <Button type=\"button\" onClick={onCancel}>Cancel</Button>\n        </Form>\n    )\n}\n\nexport default withFormik<OpenFormProps<DatasetParamsHDFS>, FormValues>({\n    mapPropsToValues: ({ initial }) => ({\n        name: getInitial(\"name\", \"\", initial),\n        tileshape: getInitial(\"tileshape\", \"1, 8, 128, 128\", initial),\n    }),\n    handleSubmit: (values, formikBag) => {\n        const { onSubmit, path } = formikBag.props;\n        onSubmit({\n            path,\n            type: DatasetTypes.HDFS,\n            name: values.name,\n            tileshape: values.tileshape.split(\",\").map(part => +part),\n        });\n    }\n})(HDFSParamsForm);","import { FormikProps, withFormik } from \"formik\";\nimport * as React from \"react\";\nimport { Button, Form } from \"semantic-ui-react\";\nimport { Omit } from \"../../helpers/types\";\nimport { DatasetParamsK2IS, DatasetTypes } from \"../../messages\";\nimport { getInitial } from \"../helpers\";\nimport { OpenFormProps } from \"../types\";\n\n// some fields have different types in the form vs. in messages\ntype DatasetParamsK2ISForForm = Omit<DatasetParamsK2IS,\n    \"path\" | \"type\">;\n\ntype FormValues = DatasetParamsK2ISForForm\n\n\ntype MergedProps = FormikProps<FormValues> & OpenFormProps<DatasetParamsK2IS>;\n\nconst K2ISFileParamsForm: React.SFC<MergedProps> = ({\n    values,\n    touched,\n    errors,\n    dirty,\n    isSubmitting,\n    handleChange,\n    handleBlur,\n    handleSubmit,\n    handleReset,\n    onCancel,\n}) => {\n    return (\n        <Form onSubmit={handleSubmit}>\n            <Form.Field>\n                <label htmlFor=\"name\">Name:</label>\n                <input type=\"text\" name=\"name\" value={values.name}\n                    onChange={handleChange}\n                    onBlur={handleBlur} />\n                {errors.name && touched.name && errors.name}\n            </Form.Field>\n\n            <Button primary={true} type=\"submit\" disabled={isSubmitting}>Load Dataset</Button>\n            <Button type=\"button\" onClick={onCancel}>Cancel</Button>\n        </Form>\n    )\n}\n\nexport default withFormik<OpenFormProps<DatasetParamsK2IS>, FormValues>({\n    mapPropsToValues: ({ initial }) => ({\n        name: getInitial(\"name\", \"\", initial),\n    }),\n    handleSubmit: (values, formikBag) => {\n        const { onSubmit, path } = formikBag.props;\n        onSubmit({\n            path,\n            type: DatasetTypes.K2IS,\n            name: values.name,\n        });\n    }\n})(K2ISFileParamsForm);\n\n","import { FormikProps, withFormik } from \"formik\";\nimport * as React from \"react\";\nimport { Button, Form } from \"semantic-ui-react\";\nimport { Omit } from \"../../helpers/types\";\nimport { DatasetParamsMIB, DatasetTypes } from \"../../messages\";\nimport { getInitial, parseNumList } from \"../helpers\";\nimport { OpenFormProps } from \"../types\";\n\n// some fields have different types in the form vs. in messages\ntype DatasetParamsMIBForForm = Omit<DatasetParamsMIB,\n    \"path\"\n    | \"type\"\n    | \"tileshape\"\n    | \"scan_size\"\n> & {\n    tileshape: string,\n    scan_size: string,\n};\n\ntype FormValues = DatasetParamsMIBForForm\n\ntype MergedProps = FormikProps<FormValues> & OpenFormProps<DatasetParamsMIB>;\n\nconst RawFileParamsForm: React.SFC<MergedProps> = ({\n    values,\n    touched,\n    errors,\n    dirty,\n    isSubmitting,\n    handleChange,\n    handleBlur,\n    handleSubmit,\n    handleReset,\n    onCancel,\n}) => {\n    return (\n        <Form onSubmit={handleSubmit}>\n            <Form.Field>\n                <label htmlFor=\"name\">Name:</label>\n                <input type=\"text\" name=\"name\" value={values.name}\n                    onChange={handleChange}\n                    onBlur={handleBlur} />\n                {errors.name && touched.name && errors.name}\n            </Form.Field>\n            <Form.Field>\n                <label htmlFor=\"tileshape\">Tileshape:</label>\n                <input type=\"text\" name=\"tileshape\" value={values.tileshape}\n                    onChange={handleChange} onBlur={handleBlur} />\n            </Form.Field>\n            <Form.Field>\n                <label htmlFor=\"scan_size\">Scan Size:</label>\n                <input type=\"text\" name=\"scan_size\" value={values.scan_size}\n                    onChange={handleChange} onBlur={handleBlur} />\n            </Form.Field>\n            <Button primary={true} type=\"submit\" disabled={isSubmitting}>Load Dataset</Button>\n            <Button type=\"button\" onClick={onCancel}>Cancel</Button>\n        </Form>\n    )\n}\n\nexport default withFormik<OpenFormProps<DatasetParamsMIB>, FormValues>({\n    mapPropsToValues: ({ initial }) => ({\n        name: getInitial(\"name\", \"\", initial),\n        tileshape: getInitial(\"tileshape\", \"1, 8, 256, 256\", initial),\n        scan_size: getInitial(\"scan_size\", \"256, 256\", initial),\n    }),\n    handleSubmit: (values, formikBag) => {\n        const { onSubmit, path } = formikBag.props;\n        onSubmit({\n            path,\n            type: DatasetTypes.MIB,\n            name: values.name,\n            tileshape: parseNumList(values.tileshape),\n            scan_size: parseNumList(values.scan_size),\n        });\n    }\n})(RawFileParamsForm);\n","import { FormikProps, withFormik } from \"formik\";\nimport * as React from \"react\";\nimport { Button, Form } from \"semantic-ui-react\";\nimport { Omit } from \"../../helpers/types\";\nimport { DatasetParamsRaw, DatasetTypes } from \"../../messages\";\nimport { getInitial, parseNumList } from \"../helpers\";\nimport { OpenFormProps } from \"../types\";\n\n// some fields have different types in the form vs. in messages\ntype DatasetParamsRawForForm = Omit<DatasetParamsRaw,\n    \"type\"\n    | \"tileshape\"\n    | \"path\"\n    | \"scan_size\"\n    | \"detector_size_raw\"\n    | \"crop_detector_to\"> & {\n        tileshape: string,\n        scan_size: string\n        detector_size_raw: string,\n        crop_detector_to: string,\n    };\n\ntype FormValues = DatasetParamsRawForForm\n\ntype MergedProps = FormikProps<FormValues> & OpenFormProps<DatasetParamsRaw>;\n\nconst RawFileParamsForm: React.SFC<MergedProps> = ({\n    values,\n    touched,\n    errors,\n    dirty,\n    isSubmitting,\n    handleChange,\n    handleBlur,\n    handleSubmit,\n    handleReset,\n    onCancel,\n}) => {\n    return (\n        <Form onSubmit={handleSubmit}>\n            <Form.Field>\n                <label htmlFor=\"name\">Name:</label>\n                <input type=\"text\" name=\"name\" value={values.name}\n                    onChange={handleChange}\n                    onBlur={handleBlur} />\n                {errors.name && touched.name && errors.name}\n            </Form.Field>\n            <Form.Field>\n                <label htmlFor=\"tileshape\">Tileshape:</label>\n                <input type=\"text\" name=\"tileshape\" value={values.tileshape}\n                    onChange={handleChange} onBlur={handleBlur} />\n            </Form.Field>\n            <Form.Field>\n                <label htmlFor=\"scan_size\">Scan Size:</label>\n                <input type=\"text\" name=\"scan_size\" value={values.scan_size}\n                    onChange={handleChange} onBlur={handleBlur} />\n            </Form.Field>\n            <Form.Field>\n                <label htmlFor=\"dtype\">Datatype (uint16, uint32, float32, float64, &gt;u2, ..., can be anything that is <a href=\"https://docs.scipy.org/doc/numpy-1.15.1/reference/arrays.dtypes.html\">understood by numpy as a dtype</a>):</label>\n                <input type=\"text\" name=\"dtype\" value={values.dtype}\n                    onChange={handleChange} onBlur={handleBlur} />\n            </Form.Field>\n\n            <Form.Field>\n                <label htmlFor=\"detector_size_raw\">Detector Size (as in the file):</label>\n                <input type=\"text\" name=\"detector_size_raw\" value={values.detector_size_raw}\n                    onChange={handleChange} onBlur={handleBlur} />\n            </Form.Field>\n            <Form.Field>\n                <label htmlFor=\"crop_detector_to\">Detector Size Crop:</label>\n                <input type=\"text\" name=\"crop_detector_to\" value={values.crop_detector_to}\n                    onChange={handleChange} onBlur={handleBlur} />\n            </Form.Field>\n            <Button primary={true} type=\"submit\" disabled={isSubmitting}>Load Dataset</Button>\n            <Button type=\"button\" onClick={onCancel}>Cancel</Button>\n        </Form>\n    )\n}\n\nexport default withFormik<OpenFormProps<DatasetParamsRaw>, FormValues>({\n    mapPropsToValues: ({ initial }) => ({\n        name: getInitial(\"name\", \"\", initial),\n        tileshape: getInitial(\"tileshape\", \"1, 8, 128, 128\", initial),\n        detector_size_raw: getInitial(\"detector_size_raw\", \"130, 128\", initial),\n        crop_detector_to: getInitial(\"crop_detector_to\", \"128, 128\", initial),\n        scan_size: getInitial(\"scan_size\", \"256, 256\", initial),\n        dtype: getInitial(\"dtype\", \"float32\", initial),\n    }),\n    handleSubmit: (values, formikBag) => {\n        const { onSubmit, path } = formikBag.props;\n        onSubmit({\n            path,\n            type: DatasetTypes.RAW,\n            name: values.name,\n            dtype: values.dtype,\n            tileshape: parseNumList(values.tileshape),\n            scan_size: parseNumList(values.scan_size),\n            detector_size_raw: parseNumList(values.detector_size_raw),\n            crop_detector_to: parseNumList(values.crop_detector_to),\n        });\n    }\n})(RawFileParamsForm);\n","import { DatasetParamsSER } from \"../../messages\";\n\nimport { FormikProps, withFormik } from \"formik\";\nimport * as React from \"react\";\nimport { Button, Form } from \"semantic-ui-react\";\nimport { Omit } from \"../../helpers/types\";\nimport { DatasetTypes } from \"../../messages\";\nimport { getInitial } from \"../helpers\";\nimport { OpenFormProps } from \"../types\";\n\n// some fields have different types in the form vs. in messages\ntype DatasetParamsSERForForm = Omit<DatasetParamsSER,\n    \"path\" | \"type\">;\n\ntype FormValues = DatasetParamsSERForForm\n\n\ntype MergedProps = FormikProps<FormValues> & OpenFormProps<DatasetParamsSER>;\nconst SERParamsForm: React.SFC<MergedProps> = ({\n    values,\n    touched,\n    errors,\n    dirty,\n    isSubmitting,\n    handleChange,\n    handleBlur,\n    handleSubmit,\n    handleReset,\n    onCancel,\n}) => {\n    return (\n        <Form onSubmit={handleSubmit}>\n            <Form.Field>\n                <label htmlFor=\"name\">Name:</label>\n                <input type=\"text\" name=\"name\" value={values.name}\n                    onChange={handleChange}\n                    onBlur={handleBlur} />\n                {errors.name && touched.name && errors.name}\n            </Form.Field>\n\n            <Button primary={true} type=\"submit\" disabled={isSubmitting}>Load Dataset</Button>\n            <Button type=\"button\" onClick={onCancel}>Cancel</Button>\n        </Form>\n    )\n}\n\nexport default withFormik<OpenFormProps<DatasetParamsSER>, FormValues>({\n    mapPropsToValues: ({ initial }) => ({\n        name: getInitial(\"name\", \"\", initial),\n    }),\n    handleSubmit: (values, formikBag) => {\n        const { onSubmit, path } = formikBag.props;\n        onSubmit({\n            path,\n            type: DatasetTypes.SER,\n            name: values.name,\n        });\n    }\n})(SERParamsForm);","import * as React from \"react\";\nimport { connect } from 'react-redux';\nimport { Dispatch } from \"redux\";\nimport { DropdownProps, Header, Segment } from \"semantic-ui-react\";\nimport uuid from \"uuid/v4\";\nimport { assertNotReached } from \"../../helpers\";\nimport { DatasetFormParams, DatasetTypes } from '../../messages';\nimport { RootReducer } from \"../../store\";\nimport * as datasetActions from \"../actions\";\nimport BLOParamsForm from \"./BLOParamsForm\";\nimport DatasetTypeSelect from \"./DatasetTypeSelect\";\nimport HDF5ParamsForm from \"./HDF5ParamsForm\";\nimport HDFSParamsForm from './HDFSParamsForm';\nimport K2ISParamsForm from \"./K2ISParamsForm\";\nimport MIBParamsForm from \"./MIBParamsForm\";\nimport RawFileParamsForm from \"./RawFileParamsForm\";\nimport SERParamsForm from \"./SERParamsForm\";\n\nconst mapDispatchToProps = (dispatch: Dispatch) => {\n    return {\n        createDataset: (params: DatasetFormParams) => {\n            dispatch(datasetActions.Actions.create({\n                id: uuid(),\n                params,\n            }));\n        },\n        onCancel: () => dispatch(datasetActions.Actions.cancelOpen()),\n    };\n}\n\nconst mapStateToProps = (state: RootReducer) => {\n    return {\n        formVisible: state.openDataset.formVisible,\n        formPath: state.openDataset.formPath,\n        formInitial: state.openDataset.formInitialParams,\n    };\n}\n\n\ntype MergedProps = ReturnType<typeof mapDispatchToProps> & ReturnType<typeof mapStateToProps>;\n\ninterface DatasetOpenState {\n    datasetType: DatasetTypes\n}\n\n\nclass DatasetOpen extends React.Component<MergedProps, DatasetOpenState> {\n    public state = {\n        datasetType: DatasetTypes.RAW,\n    }\n\n    constructor(props: MergedProps) {\n        super(props);\n        if (props.formInitial !== undefined) {\n            this.state = {\n                datasetType: props.formInitial.type,\n            };\n        }\n    }\n\n    public setDatasetType = (e: React.SyntheticEvent, data: DropdownProps) => {\n        const type = data.value as DatasetTypes;\n        this.setState({\n            datasetType: type,\n        })\n    }\n\n    public render() {\n        const { formPath, formInitial, createDataset, onCancel } = this.props;\n        const { datasetType } = this.state;\n\n        const renderForm = (form: React.ReactNode) => {\n            return (\n                <Segment>\n                    Type: <DatasetTypeSelect onClick={this.setDatasetType} currentType={datasetType} />\n                    <Header as=\"h2\">Open: {formPath}</Header>\n                    {form}\n                </Segment>\n            );\n        }\n        switch (datasetType) {\n            case DatasetTypes.HDF5: {\n                const initial = formInitial && datasetType === formInitial.type ? formInitial : undefined;\n                return renderForm(<HDF5ParamsForm path={formPath} initial={initial} onSubmit={createDataset} onCancel={onCancel} />);\n            }\n            case DatasetTypes.HDFS: {\n                const initial = formInitial && datasetType === formInitial.type ? formInitial : undefined;\n                return renderForm(<HDFSParamsForm path={formPath} initial={initial} onSubmit={createDataset} onCancel={onCancel} />);\n            }\n            case DatasetTypes.RAW: {\n                const initial = formInitial && datasetType === formInitial.type ? formInitial : undefined;\n                return renderForm(<RawFileParamsForm path={formPath} initial={initial} onSubmit={createDataset} onCancel={onCancel} />);\n            }\n            case DatasetTypes.MIB: {\n                const initial = formInitial && datasetType === formInitial.type ? formInitial : undefined;\n                return renderForm(<MIBParamsForm path={formPath} initial={initial} onSubmit={createDataset} onCancel={onCancel} />);\n            }\n            case DatasetTypes.BLO: {\n                const initial = formInitial && datasetType === formInitial.type ? formInitial : undefined;\n                return renderForm(<BLOParamsForm path={formPath} initial={initial} onSubmit={createDataset} onCancel={onCancel} />);\n            }\n            case DatasetTypes.K2IS: {\n                const initial = formInitial && datasetType === formInitial.type ? formInitial : undefined;\n                return renderForm(<K2ISParamsForm path={formPath} initial={initial} onSubmit={createDataset} onCancel={onCancel} />);\n            }\n            case DatasetTypes.SER: {\n                const initial = formInitial && datasetType === formInitial.type ? formInitial : undefined;\n                return renderForm(<SERParamsForm path={formPath} initial={initial} onSubmit={createDataset} onCancel={onCancel} />);\n            }\n        }\n        return assertNotReached(\"unknown dataset type\");\n    }\n\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(DatasetOpen)","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Header, Icon, Message } from \"semantic-ui-react\";\nimport { RootReducer } from \"../../store\";\n\nconst mapStateToProps = (state: RootReducer) => {\n    return {\n        busy: state.openDataset.busy,\n        path: state.openDataset.busyPath,\n    };\n}\n\ntype MergedProps = ReturnType<typeof mapStateToProps>;\n\nconst DatasetOpenSpinner: React.SFC<MergedProps> = ({ busy, path }) => {\n    if (!busy) {\n        return null;\n    }\n    return (\n        <>\n            <Header as=\"h2\" dividing={true}>Loading...</Header>\n            <Message icon={true}>\n                <Icon name='cog' loading={true} />\n                <Message.Content>\n                    <Message.Header>Detecting parameters for {path}</Message.Header>\n                </Message.Content>\n            </Message>\n        </>\n    );\n}\n\nexport default connect(mapStateToProps)(DatasetOpenSpinner);","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport BrowserWrapper from \"../../browser/components/BrowserWrapper\";\nimport { RootReducer } from \"../../store\";\nimport { DatasetsState } from \"../types\";\nimport Dataset from \"./Dataset\";\nimport DatasetOpen from \"./DatasetOpen\";\nimport DatasetOpenSpinner from \"./DatasetOpenSpinner\";\n\ninterface DatasetListProps {\n    datasets: DatasetsState\n}\n\nconst mapStateToProps = (state: RootReducer) => {\n    return {\n        datasets: state.datasets,\n        formVisible: state.openDataset.formVisible,\n        formPath: state.openDataset.formPath,\n    };\n}\n\ntype MergedProps = DatasetListProps & ReturnType<typeof mapStateToProps>;\n\nclass DatasetList extends React.Component<MergedProps> {\n    public render() {\n        const { formVisible, datasets } = this.props;\n\n        return (\n            <>\n                {datasets.ids.map((dsId: string) => <Dataset dataset={datasets.byId[dsId]} key={dsId} />)}\n                <DatasetOpenSpinner />\n                {formVisible && <DatasetOpen />}\n                <BrowserWrapper />\n            </>\n        );\n    }\n}\n\nexport default connect(mapStateToProps)(DatasetList);","import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { Dispatch } from 'redux';\nimport { Message } from 'semantic-ui-react';\nimport * as errorActions from '../actions';\nimport { ErrorMessage } from '../reducers';\n\nconst mapDispatchToProps = (dispatch: Dispatch, ownProps: ErrorProps) => {\n    return {\n        dismiss: () => dispatch(errorActions.Actions.dismiss(ownProps.error.id)),\n    }\n}\n\ninterface ErrorProps {\n    error: ErrorMessage,\n}\n\ntype MergedProps = ErrorProps & ReturnType<typeof mapDispatchToProps>;\n\nconst ErrorComponent: React.SFC<MergedProps> = ({ dismiss, error }) => {\n    return (\n        <Message negative={true} onDismiss={dismiss}>{error.msg}</Message>\n    )\n}\n\nexport default connect(null, mapDispatchToProps)(ErrorComponent);","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Modal } from \"semantic-ui-react\";\nimport { RootReducer } from \"../../store\";\nimport Error from \"./Error\";\n\nconst mapStateToProps = (state: RootReducer) => {\n    return {\n        errors: state.errors,\n        clusterConnected: state.clusterConnection.status === \"connected\",\n        channelConnected: (state.channelStatus.status === \"connected\" ||\n            state.channelStatus.status === \"ready\"),\n    }\n}\n\ntype MergedProps = ReturnType<typeof mapStateToProps>;\n\nconst ErrorList: React.SFC<MergedProps> = ({ errors, clusterConnected, channelConnected }) => {\n    const numShown = 3;\n    const latestErrors = errors.ids.slice(Math.max(0, errors.ids.length - numShown));\n    const showModal = errors.ids.length > 0 && clusterConnected && channelConnected;\n    return (\n        <Modal open={showModal}>\n            {latestErrors.map(error => <Error error={errors.byId[error]} key={error} />)}\n        </Modal>\n    );\n}\n\nexport default connect(mapStateToProps)(ErrorList);","import * as React from 'react';\nimport 'semantic-ui-css/semantic.min.css';\nimport { Container, Icon, Modal, Popup } from 'semantic-ui-react';\nimport About from './About';\nimport ChannelStatus from './channel/components/ChannelStatus';\nimport DatasetList from './dataset/components/DatasetList';\nimport ErrorList from './errors/components/ErrorList';\nimport logo from './images/LiberTEM logo-medium.png';\n\nclass App extends React.Component {\n    public render() {\n        return (\n            <Container style={{ margin: \"5em 1em 5em 1em\" }}>\n                <div style={{ display: \"flex\" }}>\n                    <img src={logo} width=\"200\" height=\"46\" alt=\"LiberTEM\" style={{ marginBottom: \"20px\" }} />\n                    {' '}\n                    <Modal trigger={\n                        <Icon name=\"info circle\" link={true} style={{ alignSelf: \"flex-start\" }} />\n                    }>\n                        <Popup.Header>About LiberTEM</Popup.Header>\n                        <Popup.Content>\n                            <About />\n                        </Popup.Content>\n                    </Modal>\n                </div>\n                <ErrorList />\n                <ChannelStatus>\n                    <DatasetList />\n                </ChannelStatus>\n            </Container>\n        );\n    }\n}\n\nexport default App;\n","// tslint:disable:no-console\n// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the 'N+1' visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL!,\n      window.location.toString()\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker) {\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the old content will have been purged and\n                // the fresh content will have been added to the cache.\n                // It's the perfect time to display a 'New content is\n                // available; please refresh.' message in your web app.\n                console.log('New content is available; please refresh.');\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // 'Content is cached for offline use.' message.\n                console.log('Content is cached for offline use.');\n              }\n            }\n          };\n        }\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type')!.indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { ActionsUnion, createAction } from \"../helpers/actionHelpers\";\n\nexport enum ActionTypes {\n    CREATE = 'JOB_CREATE',\n}\n\nexport const Actions = {\n    create: (id: string, dataset: string, timestamp: number) => createAction(ActionTypes.CREATE, { id, dataset, timestamp }),\n}\n\nexport type Actions = ActionsUnion<typeof Actions>;\n\nexport type ActionParts = {\n    [K in keyof typeof Actions]: ReturnType<typeof Actions[K]>\n}","import { AnalysisDetails, CancelJobResponse, StartJobRequest, StartJobResponse } from \"../messages\";\n\nexport function startJob(jobId: string, datasetId: string, analysis: AnalysisDetails): Promise<StartJobResponse> {\n    const payload: StartJobRequest = {\n        job: {\n            dataset: datasetId,\n            analysis,\n        }\n    }\n    return fetch(`/api/jobs/${jobId}/`, {\n        body: JSON.stringify(payload),\n        credentials: \"same-origin\",\n        method: \"PUT\",\n    }).then(r => r.json());\n}\n\nexport function cancelJob(jobId: string): Promise<CancelJobResponse> {\n    return fetch(`/api/jobs/${jobId}/`, {\n        method: \"DELETE\",\n        credentials: \"same-origin\",\n    }).then(r => r.json());\n}","import { buffers } from 'redux-saga';\nimport { actionChannel, call, cancel, fork, put, select, take, takeEvery } from 'redux-saga/effects';\nimport uuid from 'uuid/v4';\nimport { assertNotReached } from '../helpers';\nimport * as jobActions from '../job/actions';\nimport { cancelJob, startJob } from '../job/api';\nimport { JobState } from '../job/types';\nimport { AnalysisDetails, AnalysisTypes, DatasetOpen, DatasetState, DatasetStatus } from '../messages';\nimport { RootReducer } from '../store';\nimport * as analysisActions from './actions';\nimport { AnalysisState, JobKind } from './types';\n\n\n// TODO: flip this around - create classes for each analysis type\n// classes should provide:\n//  + methods for default parameters\n//  + creation of a job from current parameters\nfunction getAnalysisDetails(analysisType: AnalysisTypes, dataset: DatasetOpen): AnalysisDetails {\n    const shape = dataset.params.shape;\n    const width = shape[3];\n    const height = shape[2];\n    const minLength = Math.min(width, height);\n\n    switch (analysisType) {\n        case AnalysisTypes.APPLY_DISK_MASK: {\n            return {\n                type: analysisType,\n                parameters: {\n                    shape: \"disk\",\n                    cx: width / 2,\n                    cy: height / 2,\n                    r: minLength / 2,\n                }\n            };\n        }\n        case AnalysisTypes.APPLY_RING_MASK: {\n            return {\n                type: analysisType,\n                parameters: {\n                    shape: \"ring\",\n                    cx: width / 2,\n                    cy: height / 2,\n                    ri: minLength / 4,\n                    ro: minLength / 2,\n                }\n            }\n        }\n        case AnalysisTypes.CENTER_OF_MASS: {\n            return {\n                type: analysisType,\n                parameters: {\n                    shape: \"com\",\n                    cx: width / 2,\n                    cy: height / 2,\n                    r: minLength / 2,\n                },\n            };\n        }\n        case AnalysisTypes.APPLY_POINT_SELECTOR: {\n            return {\n                type: analysisType,\n                parameters: {\n                    shape: \"point\",\n                    cx: width / 2,\n                    cy: width / 2,\n                }\n            }\n        }\n        case AnalysisTypes.SUM_FRAMES: {\n            return {\n                type: AnalysisTypes.SUM_FRAMES,\n                parameters: {},\n            }\n        }\n        case AnalysisTypes.PICK_FRAME: {\n            return {\n                type: AnalysisTypes.PICK_FRAME,\n                parameters: {\n                    x: Math.round(width / 2),\n                    y: Math.round(height / 2),\n                }\n            }\n        }\n    }\n    return assertNotReached(\"unhandeled analysis type\");\n}\n\nfunction selectDataset(state: RootReducer, dataset: string) {\n    return state.datasets.byId[dataset];\n}\n\nfunction selectAnalysis(state: RootReducer, id: string) {\n    return state.analyses.byId[id];\n}\n\nfunction selectJob(state: RootReducer, id: string) {\n    return state.jobs.byId[id];\n}\n\n\nexport function* createAnalysisSaga(action: ReturnType<typeof analysisActions.Actions.create>) {\n    try {\n        const datasetState: DatasetState = yield select(selectDataset, action.payload.dataset)\n        if (datasetState.status !== DatasetStatus.OPEN) {\n            throw new Error(\"invalid dataset status\");\n        }\n        const analysis: AnalysisState = {\n            id: uuid(),\n            dataset: action.payload.dataset,\n            resultDetails: getAnalysisDetails(action.payload.analysisType, datasetState),\n            frameDetails: { type: AnalysisTypes.SUM_FRAMES, parameters: {} },\n            jobs: {},\n            jobHistory: {\n                FRAME: [],\n                RESULT: [],\n            }\n        }\n\n        const sidecarTask = yield fork(analysisSidecar, analysis.id);\n\n        yield put(analysisActions.Actions.created(analysis));\n        yield put(analysisActions.Actions.run(analysis.id, \"FRAME\"));\n\n        while (true) {\n            const removeAction: ReturnType<typeof analysisActions.Actions.remove> = yield take(analysisActions.ActionTypes.REMOVE);\n            if (removeAction.payload.id === analysis.id) {\n                yield cancel(sidecarTask);\n            }\n        }\n    } catch (e) {\n        const timestamp = Date.now();\n        const id = uuid();\n        yield put(analysisActions.Actions.error(`Error creating analysis: ${e.toString()}`, timestamp, id));\n    }\n}\n\nexport function* cancelOldJob(analysis: AnalysisState, kind: JobKind) {\n    const jobId = analysis.jobs[kind]\n    if (jobId === undefined) {\n        return;\n    } else {\n        const job: JobState = yield select(selectJob, jobId);\n        if (job.running !== \"DONE\") {\n            yield call(cancelJob, jobId);\n        }\n    }\n}\n\nexport function* analysisSidecar(analysisId: string) {\n    // channel for incoming actions:\n    // all actions that arrive while we block in `call` will be buffered here.\n    // because the buffer is sliding of size 1, we only keep the latest action!\n    const runOrParamsChannel = yield actionChannel(analysisActions.ActionTypes.RUN, buffers.sliding(1));\n\n    while (true) {\n        try {\n            const action: analysisActions.ActionParts[\"run\"] = yield take(runOrParamsChannel);\n\n            // ignore actions meant for other analyses\n            if (action.payload.id !== analysisId) {\n                continue;\n            }\n\n            // get the current state incl. configuration\n            const analysis: AnalysisState = yield select(selectAnalysis, analysisId);\n            const { kind } = action.payload;\n\n            // prepare running the job:\n            const jobId = uuid();\n            yield put(jobActions.Actions.create(jobId, analysis.dataset, Date.now()));\n            yield put(analysisActions.Actions.prepareRun(analysis.id, kind, jobId));\n\n            const oldJobId = analysis.jobs[kind];\n            if (oldJobId !== undefined) {\n                const job: JobState = yield select(selectJob, oldJobId);\n                if (job && job.running !== \"DONE\") {\n                    // wait until the job is cancelled:\n                    yield call(cancelJob, oldJobId);\n                }\n            }\n\n            // FIXME: we have a race here, as the websocket msg FINISH_JOB may\n            // arrive before call(startJob, ...) returns. this causes the apply button\n            // to feel unresponsive (the action gets done, but only after we finish here...)\n            // best reproduced in \"Slow 3G\" network simulation mode in devtools\n\n            // wait until the job is started\n            if (kind === \"FRAME\") {\n                yield call(startJob, jobId, analysis.dataset, analysis.frameDetails);\n            } else if (kind === \"RESULT\") {\n                yield call(startJob, jobId, analysis.dataset, analysis.resultDetails);\n            }\n            yield put(analysisActions.Actions.running(analysis.id, jobId, kind))\n        } catch (e) {\n            const timestamp = Date.now();\n            const id = uuid();\n            yield put(analysisActions.Actions.error(`Error running analysis: ${e.toString()}`, timestamp, id));\n        }\n    }\n}\n\nexport function* updateFrameViewMode(action: ReturnType<typeof analysisActions.Actions.setFrameViewMode>) {\n    yield put(analysisActions.Actions.run(action.payload.id, \"FRAME\"));\n}\n\nexport function* updateFrameViewParams(action: ReturnType<typeof analysisActions.Actions.updateParameters>) {\n    if (action.payload.kind === \"FRAME\") {\n        yield put(analysisActions.Actions.run(action.payload.id, \"FRAME\"));\n    }\n}\n\nexport function* doRemoveAnalysisSaga(action: ReturnType<typeof analysisActions.Actions.remove>) {\n    const analysis: AnalysisState = yield select(selectAnalysis, action.payload.id)\n    try {\n        yield call(cancelOldJob, analysis, \"RESULT\");\n        yield call(cancelOldJob, analysis, \"FRAME\");\n    } finally {\n        yield put(analysisActions.Actions.removed(action.payload.id));\n    }\n}\n\nexport function* analysisRootSaga() {\n    yield takeEvery(analysisActions.ActionTypes.CREATE, createAnalysisSaga);\n    yield takeEvery(analysisActions.ActionTypes.REMOVE, doRemoveAnalysisSaga);\n    yield takeEvery(analysisActions.ActionTypes.SET_FRAMEVIEW_MODE, updateFrameViewMode);\n    yield takeEvery(analysisActions.ActionTypes.UPDATE_PARAMETERS, updateFrameViewParams);\n}","import * as _ from 'lodash';\nimport { MsgPartConfig } from \"../messages\";\nimport { ConfigParams, ConfigState, LocalConfig } from \"./reducers\";\n\nconst CONFIG_KEY = \"LiberTEM.config\";\n\nexport function joinPaths(config: ConfigState, ...parts: string[]) {\n    const removeSep = (part: string) => part.replace(new RegExp(`${_.escapeRegExp(config.separator)}$`), \"\")\n    parts = [removeSep(parts[0]), ...parts.slice(1)];\n    return parts.map(part => part.trim()).join(config.separator);\n}\n\nexport function mergeLocalStorage(serverConfig: MsgPartConfig): ConfigParams {\n    const localSettings = window.localStorage.getItem(CONFIG_KEY);\n    if (localSettings === null) {\n        return Object.assign({}, serverConfig, getDefaultLocalConfig(serverConfig));\n    }\n    const localSettingsParsed = JSON.parse(localSettings);\n    const defaultConfig = getDefaultLocalConfig(serverConfig);\n    const mergedConfig = Object.assign({}, defaultConfig, serverConfig, localSettingsParsed);\n    return mergedConfig;\n}\n\nexport function setLocalStorage(config: ConfigState): void {\n    const keys: Array<Partial<keyof ConfigState>> = [\"cwd\", \"lastOpened\", \"fileHistory\"];\n    const localSettings = keys.reduce((acc, item) => {\n        acc[item] = config[item];\n        return acc;\n    }, {} as ConfigState);\n    window.localStorage.setItem(CONFIG_KEY, JSON.stringify(localSettings));\n}\n\nexport function clearLocalStorage(): void {\n    window.localStorage.removeItem(CONFIG_KEY);\n}\n\nexport function getDefaultLocalConfig(config: MsgPartConfig): LocalConfig {\n    return {\n        lastOpened: {},\n        fileHistory: [],\n    };\n}\n\nexport function makeUnique<T>(inp: T[]): T[] {\n    return inp.reduce((acc: T[], curr: T) => {\n        if (acc.indexOf(curr) === -1) {\n            return [...acc, curr];\n        } else {\n            return acc;\n        }\n    }, [] as T[]);\n}","import { DirectoryListingResponse } from \"../messages\";\n\nexport function getDirectoryListing(path: string): Promise<DirectoryListingResponse> {\n    const url = `/api/browse/localfs/?path=${path}`;\n    return fetch(url, {\n        method: 'GET',\n        credentials: \"same-origin\",\n    }).then(r => r.json());\n}","import { ActionsUnion, createAction } from '../helpers/actionHelpers';\nimport { JobResultType } from '../job/types';\nimport { MsgPartInitialDataset, MsgPartJob } from '../messages';\n\n\nexport type PartialResultType = JobResultType;\n\nexport enum ActionTypes {\n    INITIAL_STATE = 'CHANNEL_INITIAL_STATE',\n    JOB_STARTED = 'CHANNEL_JOB_STARTED',\n    FINISH_JOB = 'CHANNEL_FINISH_JOB',\n    TASK_RESULT = 'CHANNEL_TASK_RESULT',\n    JOB_ERROR = 'CHANNEL_JOB_ERROR',\n    OPEN = \"CHANNEL_OPEN\",\n    CLOSE = \"CHANNEL_CLOSE\",\n    ERROR = \"CHANNEL_ERROR\",\n}\n\nexport const Actions = {\n    initialState: (jobs: MsgPartJob[], datasets: MsgPartInitialDataset[], timestamp: number) => createAction(ActionTypes.INITIAL_STATE, { jobs, datasets, timestamp }),\n    jobStarted: (job: string, dataset: string, timestamp: number) => createAction(ActionTypes.JOB_STARTED, { job, timestamp, dataset }),\n    finishJob: (job: string, results: JobResultType[], timestamp: number) => createAction(ActionTypes.FINISH_JOB, { job, results, timestamp }),\n    taskResult: (job: string, results: PartialResultType[], timestamp: number) => createAction(ActionTypes.TASK_RESULT, { job, results, timestamp }),\n    jobError: (job: string, msg: string, id: string, timestamp: number) => createAction(ActionTypes.JOB_ERROR, { job, msg, id, timestamp }),\n    open: (timestamp: number) => createAction(ActionTypes.OPEN, { timestamp }),\n    close: (timestamp: number) => createAction(ActionTypes.CLOSE, { timestamp }),\n    error: (msg: string, timestamp: number, id: string) => createAction(ActionTypes.ERROR, { msg, timestamp, id }),\n}\n\nexport type Actions = ActionsUnion<typeof Actions>;","import { call, fork, put, select, take } from \"redux-saga/effects\";\nimport uuid from 'uuid/v4';\nimport { joinPaths } from \"../config/helpers\";\nimport { ConfigState } from \"../config/reducers\";\nimport { DirectoryListingResponse } from \"../messages\";\nimport { RootReducer } from \"../store\";\nimport * as browserActions from './actions';\nimport { getDirectoryListing } from \"./api\";\nimport { DirectoryBrowserState } from \"./types\";\n\nexport function* directoryListingSaga() {\n    yield fork(fetchOnRequest);\n    yield fork(fetchDirectoryListOnOpen);\n}\n\nfunction* fetchOnRequest() {\n    while (true) {\n        const action: ReturnType<typeof browserActions.Actions.list> = yield take(browserActions.ActionTypes.LIST_DIRECTORY);\n\n        const { name, path } = action.payload;\n        const config: ConfigState = yield select((state: RootReducer) => state.config)\n        const newPath = name !== undefined ? joinPaths(config, path, name) : path;\n        yield fork(fetchDirectoryListing, newPath);\n    }\n}\n\nfunction* fetchDirectoryListing(path: string) {\n    try {\n        const result: DirectoryListingResponse = yield call(getDirectoryListing, path);\n        if (result.status === \"ok\") {\n            yield put(browserActions.Actions.dirListing(result.path, result.dirs, result.files, result.drives, result.places));\n        } else if (result.status === \"error\") {\n            const browserState: DirectoryBrowserState = yield select((state: RootReducer) => state.browser);\n            const timestamp = Date.now();\n            const id = uuid();\n            const alternative = result.alternative ? result.alternative : browserState.places.home.path;\n            yield put(browserActions.Actions.error(`Error browsing directory: ${result.msg}`, timestamp, id));\n            yield put(browserActions.Actions.list(alternative));\n        }\n    } catch (e) {\n        const browserState: DirectoryBrowserState = yield select((state: RootReducer) => state.browser);\n        const timestamp = Date.now();\n        const id = uuid();\n        yield put(browserActions.Actions.error(`Error browsing directory: ${e.toString()}`, timestamp, id));\n        yield put(browserActions.Actions.list(browserState.places.home.path));\n    }\n}\n\nfunction* fetchDirectoryListOnOpen() {\n    while (true) {\n        yield take(browserActions.ActionTypes.OPEN);\n        const config: ConfigState = yield select((state: RootReducer) => state.config)\n        yield put(browserActions.Actions.list(config.cwd));\n    }\n}","import { ActionCreatorsMapObject } from \"redux\";\nimport { FollowupPart, MsgPartInitialDataset, MsgPartJob } from \"../messages\";\n\nexport interface Message<T extends string> {\n    messageType: T\n}\n\nexport function createMessage<T extends string, O>(messageType: T, attribs: O) {\n    return Object.assign({ messageType }, attribs);\n}\n\nexport enum MessageTypes {\n    INITIAL_STATE = \"INITIAL_STATE\",\n    JOB_STARTED = \"JOB_STARTED\",\n    FINISH_JOB = \"FINISH_JOB\",\n    TASK_RESULT = \"TASK_RESULT\",\n    JOB_ERROR = \"JOB_ERROR\",\n    BINARY = \"BINARY\",\n    OPEN = \"OPEN\",\n    CLOSE = \"CLOSE\",\n    ERROR = \"ERROR\",\n    DELETE_DATASET = \"DELETE_DATASET\"\n}\n\nexport const Messages = {\n    initialState: (jobs: MsgPartJob[], datasets: MsgPartInitialDataset[]) => createMessage(MessageTypes.INITIAL_STATE, { jobs, datasets }),\n    startJob: (job: string, dataset: string) => createMessage(MessageTypes.JOB_STARTED, { job, dataset }),\n    finishJob: (job: string, followup: FollowupPart) => createMessage(MessageTypes.FINISH_JOB, { job, followup }),\n    taskResult: (job: string, followup: FollowupPart) => createMessage(MessageTypes.TASK_RESULT, { job, followup }),\n    jobError: (job: string, msg: string) => createMessage(MessageTypes.JOB_ERROR, { job, msg }),\n    binary: (objectURL: string) => createMessage(MessageTypes.BINARY, { objectURL }),\n    open: () => createMessage(MessageTypes.OPEN, {}),\n    close: () => createMessage(MessageTypes.CLOSE, {}),\n    error: (msg: string) => createMessage(MessageTypes.ERROR, { msg }),\n    deleteDataset: (dataset: string) => createMessage(MessageTypes.DELETE_DATASET, { dataset }),\n}\n\nexport type MessagesUnion<A extends ActionCreatorsMapObject> = ReturnType<A[keyof A]>\nexport type Messages = MessagesUnion<typeof Messages>;\n\n// types of messages sent by the server:\n/*\nexport type InitialStateMessage = ReturnType<typeof Messages.initialState>;\nexport type StartJobMessage = ReturnType<typeof Messages.startJob>;\nexport type FinishJobMessage = ReturnType<typeof Messages.finishJob>;\nexport type TaskResultMessage = ReturnType<typeof Messages.taskResult>;\n*/\n\nexport type BinaryMessage = ReturnType<typeof Messages.binary>;","import { Channel, delay, END, eventChannel } from \"redux-saga\";\nimport { call, fork, put, take } from \"redux-saga/effects\";\nimport uuid from 'uuid/v4';\nimport * as datasetActions from '../dataset/actions';\nimport * as channelActions from \"./actions\";\nimport * as channelMessages from './messages';\n\ntype SocketChannel = Channel<channelMessages.Messages>;\n\n\n/**\n * create typesafe messages from the websocket messages\n * \n * also creates some synthetic events like open, close, error\n */\nfunction createWebSocketChannel(/* addr */): SocketChannel {\n    return eventChannel(emit => {\n        function onMessage(msg: MessageEvent) {\n            if (msg.data instanceof Blob) {\n                // TODO: cleanup createObjectURL results somewhere\n                emit(channelMessages.Messages.binary(URL.createObjectURL(msg.data)));\n            } else {\n                const parsed = JSON.parse(msg.data) as channelMessages.Messages;\n                emit(parsed);\n            }\n        }\n\n        function onOpen() {\n            emit(channelMessages.Messages.open());\n        }\n\n        function onClose() {\n            emit(channelMessages.Messages.close());\n            emit(END);\n        }\n\n        function onError(err: Event) {\n            emit(channelMessages.Messages.error(\"Error in weboscket connection\"));\n        }\n\n        const ws = new WebSocket(`ws://${window.location.hostname}:${window.location.port}/api/events/`);\n        ws.addEventListener(\"message\", onMessage);\n        ws.addEventListener(\"open\", onOpen);\n        ws.addEventListener(\"close\", onClose);\n        ws.addEventListener(\"error\", onError);\n\n        // return cleanup function:\n        return () => {\n            ws.removeEventListener(\"message\", onMessage);\n            ws.removeEventListener(\"open\", onOpen);\n            ws.removeEventListener(\"close\", onClose);\n            ws.removeEventListener(\"error\", onError);\n            // TODO: close connection if still open\n            // (or is it guaranteed that if an error was thrown, the connection is closed?)\n        };\n    });\n}\n\n/**\n * handles the connection lifecycle for our websocket\n */\nexport function* webSocketSaga() {\n    while (true) {\n        const socketChannel = yield call(createWebSocketChannel);\n        yield fork(actionsFromChannel, socketChannel);\n        const action: channelActions.Actions = yield take([\n            channelActions.ActionTypes.OPEN,\n            channelActions.ActionTypes.CLOSE,\n        ]);\n        if (action.type === channelActions.ActionTypes.OPEN) {\n            yield take([\n                channelActions.ActionTypes.CLOSE,\n                channelActions.ActionTypes.ERROR,\n            ]);\n        }\n        yield delay(1000);\n    }\n}\n\n/**\n * translates the messages from the channel to redux actions, handles aggregation etc.\n */\nexport function* actionsFromChannel(socketChannel: SocketChannel) {\n    try {\n        while (true) {\n            const msg = yield take(socketChannel);\n            const timestamp = Date.now();\n            switch (msg.messageType) {\n                case channelMessages.MessageTypes.OPEN: {\n                    yield put(channelActions.Actions.open(timestamp));\n                    break;\n                }\n                case channelMessages.MessageTypes.CLOSE: {\n                    yield put(channelActions.Actions.close(timestamp));\n                    break;\n                }\n                case channelMessages.MessageTypes.ERROR: {\n                    const id = uuid();\n                    yield put(channelActions.Actions.error(msg.msg, timestamp, id));\n                    break;\n                }\n                case channelMessages.MessageTypes.INITIAL_STATE: {\n                    yield put(channelActions.Actions.initialState(msg.jobs, msg.datasets, timestamp));\n                    break;\n                }\n                case channelMessages.MessageTypes.JOB_STARTED: {\n                    yield put(channelActions.Actions.jobStarted(msg.job, msg.details.dataset, timestamp));\n                    break;\n                }\n                case channelMessages.MessageTypes.FINISH_JOB: {\n                    yield call(handleFinishJob, msg, socketChannel, timestamp);\n                    break;\n                }\n                case channelMessages.MessageTypes.TASK_RESULT: {\n                    yield call(handleTaskResult, msg, socketChannel, timestamp);\n                    break;\n                }\n                case channelMessages.MessageTypes.DELETE_DATASET: {\n                    yield put(datasetActions.Actions.deleted(msg.dataset));\n                    break;\n                }\n                case channelMessages.MessageTypes.JOB_ERROR: {\n                    const id = uuid();\n                    yield put(channelActions.Actions.jobError(msg.job, msg.msg, id, timestamp));\n                }\n            }\n        }\n    } finally {\n        // disconnected\n    }\n}\n\nexport function* handleBinaryParts(numParts: number, socketChannel: SocketChannel) {\n    const parts: channelMessages.BinaryMessage[] = [];\n    while (parts.length < numParts) {\n        const binMsg = yield take(socketChannel)\n        parts.push(binMsg);\n    }\n    return parts;\n}\n\nexport function* handleTaskResult(msg: ReturnType<typeof channelMessages.Messages.taskResult>, socketChannel: SocketChannel, timestamp: number) {\n    const parts: channelMessages.BinaryMessage[] = yield call(handleBinaryParts, msg.followup.numMessages, socketChannel);\n    const images = parts.map((part, idx) => ({ imageURL: part.objectURL, description: msg.followup.descriptions[idx] }));\n    yield put(channelActions.Actions.taskResult(msg.job, images, timestamp));\n}\n\nexport function* handleFinishJob(msg: ReturnType<typeof channelMessages.Messages.finishJob>, socketChannel: SocketChannel, timestamp: number) {\n    const parts: channelMessages.BinaryMessage[] = yield call(handleBinaryParts, msg.followup.numMessages, socketChannel);\n    const images = parts.map((part, idx) => ({ imageURL: part.objectURL, description: msg.followup.descriptions[idx] }));\n    yield put(channelActions.Actions.finishJob(msg.job, images, timestamp));\n}","import { ConnectRequest, ConnectRequestParams, ConnectResponse } from \"../messages\";\n\nexport function connectToCluster(params: ConnectRequestParams): Promise<ConnectResponse> {\n    const payload: ConnectRequest = {\n        connection: params\n    }\n    return fetch(`/api/config/connection/`, {\n        body: JSON.stringify(payload),\n        credentials: \"same-origin\",\n        method: \"PUT\",\n    }).then(r => r.json());\n}\n\nexport function checkClusterConnection(): Promise<ConnectResponse> {\n    return fetch(`/api/config/connection/`, {\n        method: 'GET',\n    }).then(r => r.json());\n}","import { ActionsUnion, createAction } from \"../helpers/actionHelpers\";\nimport { ConfigParams } from \"./reducers\";\n\nexport enum ActionTypes {\n    FETCHED = \"CONFIG_FETCHED\",\n    FETCH = \"CONFIG_FETCH\",\n    FETCH_FAILED = \"CONFIG_FETCH_FAILED\",\n}\n\nexport const Actions = {\n    fetch: () => createAction(ActionTypes.FETCH),\n    fetched: (config: ConfigParams) => createAction(ActionTypes.FETCHED, { config }),\n    fetchFailed: (msg: string, timestamp: number, id: string) => createAction(ActionTypes.FETCH_FAILED, { msg, timestamp, id }),\n}\n\nexport type Actions = ActionsUnion<typeof Actions>;","import { all, call, put, take, takeEvery } from \"redux-saga/effects\";\nimport * as channelActions from '../channel/actions';\nimport { ConnectResponse } from \"../messages\";\nimport * as clusterActions from './actions';\nimport { checkClusterConnection, connectToCluster } from \"./api\";\n\nfunction* connectSaga(action: ReturnType<typeof clusterActions.Actions.connect>) {\n    const conn: ConnectResponse = yield call(connectToCluster, action.payload.params);\n    yield call(putClusterStatus, conn);\n}\n\nfunction* putClusterStatus(conn: ConnectResponse) {\n    if (conn.status === \"ok\") {\n        yield put(clusterActions.Actions.connected(conn.connection.connection));\n    } else {\n        yield put(clusterActions.Actions.notConnected());\n    }\n}\n\n/**\n * when the channel is connected, check if cluster is connected and update status accordingly\n */\nfunction* trackClusterConnection() {\n    while (true) {\n        yield take(channelActions.ActionTypes.OPEN)\n        const conn: ConnectResponse = yield call(checkClusterConnection);\n        yield call(putClusterStatus, conn);\n    }\n}\n\nexport function* clusterConnectionSaga() {\n    yield takeEvery(clusterActions.ActionTypes.CONNECT, connectSaga);\n    yield all([\n        trackClusterConnection(),\n    ])\n}","import { GetConfigResponse } from \"../messages\";\n\nexport function getConfig(): Promise<GetConfigResponse> {\n    return fetch(`/api/config/`, {\n        method: \"GET\",\n        credentials: \"same-origin\",\n    }).then(r => r.json());\n}","import { call, fork, put, select, take, takeEvery } from 'redux-saga/effects';\nimport uuid from 'uuid/v4';\nimport * as browserActions from '../browser/actions';\nimport * as channelActions from '../channel/actions';\nimport * as datasetActions from '../dataset/actions';\nimport { GetConfigResponse } from '../messages';\nimport { RootReducer } from '../store';\nimport * as configActions from './actions';\nimport { getConfig } from './api';\nimport { clearLocalStorage, getDefaultLocalConfig, mergeLocalStorage, setLocalStorage } from './helpers';\nimport { ConfigState } from './reducers';\n\nfunction* getConfigOnReconnect() {\n    yield takeEvery(channelActions.ActionTypes.OPEN, getConfigSaga);\n}\n\n/**\n * get config from server and try to merge in the localStorage config\n */\nfunction* getConfigSaga() {\n    yield put(configActions.Actions.fetch());\n    const configResponse: GetConfigResponse = yield call(getConfig);\n    try {\n        const mergedConfig = mergeLocalStorage(configResponse.config);\n        yield put(configActions.Actions.fetched(mergedConfig));\n    } catch (e) {\n        try {\n            clearLocalStorage();\n            // tslint:disable-next-line:no-empty\n        } catch (e) { }\n        const defaultConfig = Object.assign({}, configResponse.config, getDefaultLocalConfig(configResponse.config));\n        yield put(configActions.Actions.fetched(defaultConfig));\n    }\n}\n\n/**\n * update localStorage config on opening files or using the file browser\n */\nfunction* updateLocalStorageConfig() {\n    while (true) {\n        yield take([\n            datasetActions.ActionTypes.CREATE,\n            browserActions.ActionTypes.DIRECTORY_LISTING\n        ]);\n        const config: ConfigState = yield select((state: RootReducer) => state.config);\n        setLocalStorage(config);\n    }\n}\n\nexport function* firstConfigFetch() {\n    try {\n        yield call(getConfigSaga);\n    } catch (e) {\n        const timestamp = Date.now();\n        const id = uuid();\n        yield put(configActions.Actions.fetchFailed(`failed to fetch config: ${e.toString()}`, timestamp, id));\n    }\n}\n\nexport function* configRootSaga() {\n    yield fork(firstConfigFetch);\n    yield fork(getConfigOnReconnect);\n    yield fork(updateLocalStorageConfig);\n}","import { DeleteDatasetResponse, DetectDatasetResponse, OpenDatasetRequest, OpenDatasetResponse } from \"../messages\";\n\nexport function openDataset(id: string, dataset: OpenDatasetRequest): Promise<OpenDatasetResponse> {\n    return fetch(`/api/datasets/${id}/`, {\n        body: JSON.stringify(dataset),\n        credentials: \"same-origin\",\n        method: \"PUT\",\n    }).then(r => r.json());\n}\n\nexport function deleteDataset(id: string): Promise<DeleteDatasetResponse> {\n    return fetch(`/api/datasets/${id}/`, {\n        credentials: \"same-origin\",\n        method: \"DELETE\",\n    }).then(r => r.json());\n}\n\n\nexport function detectDataset(path: string): Promise<DetectDatasetResponse> {\n    return fetch(`/api/datasets/detect/?path=${path}`, {\n        credentials: \"same-origin\",\n        method: \"GET\",\n    }).then(r => r.json());\n}","import { call, put, select, takeEvery } from 'redux-saga/effects';\nimport uuid from 'uuid/v4';\nimport * as browserActions from '../browser/actions';\nimport { joinPaths } from '../config/helpers';\nimport { ConfigState } from '../config/reducers';\nimport { DetectDatasetResponse, OpenDatasetResponse } from '../messages';\nimport { RootReducer } from '../store';\nimport * as datasetActions from \"./actions\";\nimport { deleteDataset, detectDataset, openDataset } from './api';\n\n\nexport function* createDatasetSaga(action: ReturnType<typeof datasetActions.Actions.create>) {\n    try {\n        const resp: OpenDatasetResponse = yield call(openDataset, action.payload.dataset.id, { dataset: action.payload.dataset });\n        if (resp.status === \"ok\") {\n            yield put(datasetActions.Actions.created(resp.details));\n        } else if (resp.status === \"error\") {\n            const timestamp = Date.now();\n            const id = uuid();\n            yield put(datasetActions.Actions.error(resp.dataset, resp.msg, timestamp, id));\n        }\n    } catch (e) {\n        const timestamp = Date.now();\n        const id = uuid();\n        yield put(datasetActions.Actions.error(action.payload.dataset.id, `Error loading dataset: ${e.toString()}`, timestamp, id));\n    }\n}\n\nexport function* deleteDatasetSaga(action: ReturnType<typeof datasetActions.Actions.delete>) {\n    try {\n        yield call(deleteDataset, action.payload.dataset);\n    } catch (e) {\n        const timestamp = Date.now();\n        const id = uuid();\n        yield put(datasetActions.Actions.error(action.payload.dataset, `Error closing dataset: ${e.toString()}`, timestamp, id));\n    }\n}\n\nexport function* doOpenDataset(fullPath: string) {\n    const config: ConfigState = yield select((state: RootReducer) => state.config);\n    let prefillParams = config.lastOpened[fullPath];\n    if (!prefillParams) {\n        try {\n            yield put(datasetActions.Actions.detect(fullPath));\n            const detectResult: DetectDatasetResponse = yield call(detectDataset, fullPath);\n            if (detectResult.status === \"ok\") {\n                prefillParams = detectResult.datasetParams;\n                yield put(datasetActions.Actions.detected(fullPath, detectResult.datasetParams));\n            } else {\n                yield put(datasetActions.Actions.detectFailed(fullPath));\n            }\n        } catch (e) {\n            yield put(datasetActions.Actions.detectFailed(fullPath));\n        }\n    }\n    yield put(datasetActions.Actions.open(fullPath, prefillParams));\n}\n\nexport function* openDatasetSagaFullPath(action: ReturnType<typeof browserActions.Actions.selectFullPath>) {\n    const fullPath = action.payload.path;\n    yield call(doOpenDataset, fullPath);\n}\n\nexport function* openDatasetSaga(action: ReturnType<typeof browserActions.Actions.select>) {\n    const config: ConfigState = yield select((state: RootReducer) => state.config);\n    const fullPath = joinPaths(config, action.payload.path, action.payload.name);\n    yield call(doOpenDataset, fullPath);\n}\n\nexport function* datasetRootSaga() {\n    yield takeEvery(datasetActions.ActionTypes.CREATE, createDatasetSaga);\n    yield takeEvery(datasetActions.ActionTypes.DELETE, deleteDatasetSaga);\n    yield takeEvery(browserActions.ActionTypes.SELECT, openDatasetSaga);\n    yield takeEvery(browserActions.ActionTypes.SELECT_FULL_PATH, openDatasetSagaFullPath);\n}","import { all } from 'redux-saga/effects';\nimport { analysisRootSaga } from './analysis/sagas';\nimport { directoryListingSaga } from './browser/sagas';\nimport { webSocketSaga } from './channel/sagas';\nimport { clusterConnectionSaga } from './cluster/sagas';\nimport { configRootSaga } from './config/sagas';\nimport { datasetRootSaga } from './dataset/sagas';\n\nexport function* rootSaga() {\n    yield all([\n        configRootSaga(),\n        webSocketSaga(),\n        analysisRootSaga(),\n        datasetRootSaga(),\n        clusterConnectionSaga(),\n        directoryListingSaga(),\n    ]);\n}","import { AllActions } from \"../actions\";\nimport * as datasetActions from \"../dataset/actions\";\nimport { ById, filterWithPred, insertById, updateById } from \"../helpers/reducerHelpers\";\nimport * as analysisActions from \"./actions\";\nimport { Analysis, AnalysisState, FrameAnalysisDetails, JobList } from \"./types\";\n\nexport type AnalysisReducerState = ById<AnalysisState>;\n\nconst initialAnalysisState: AnalysisReducerState = {\n    byId: {},\n    ids: [],\n}\n\nexport function analysisReducer(state = initialAnalysisState, action: AllActions): AnalysisReducerState {\n    switch (action.type) {\n        case analysisActions.ActionTypes.CREATED: {\n            return insertById(state, action.payload.analysis.id, action.payload.analysis);\n        }\n        case analysisActions.ActionTypes.UPDATE_PARAMETERS: {\n            const key: keyof Analysis = action.payload.kind === \"FRAME\" ? \"frameDetails\" : \"resultDetails\";\n            const details = state.byId[action.payload.id][key];\n            const newDetails = Object.assign({}, details, {\n                parameters: Object.assign({}, details.parameters, action.payload.parameters),\n            })\n            // TODO: convince typescript that `[key]: newDetails` is a better way...\n            if (action.payload.kind === \"FRAME\") {\n                return updateById(state, action.payload.id, {\n                    frameDetails: newDetails as FrameAnalysisDetails,\n                });\n            } else {\n                return updateById(state, action.payload.id, {\n                    resultDetails: newDetails,\n                });\n            }\n        }\n        case analysisActions.ActionTypes.PREPARE_RUN: {\n            const { kind, id } = action.payload;\n            const analysis = state.byId[id];\n            const oldJob = analysis.jobs[kind];\n            let jobHistory = analysis.jobHistory;\n            if (oldJob !== undefined) {\n                // TODO: length restriction?\n                jobHistory = Object.assign({}, jobHistory, {\n                    [kind]: [oldJob, ...jobHistory[kind]],\n                });\n            }\n            const newJobs: JobList = Object.assign({}, analysis.jobs, {\n                [action.payload.kind]: action.payload.job,\n            });\n            return updateById(state, action.payload.id, { jobs: newJobs, jobHistory })\n        }\n        case analysisActions.ActionTypes.REMOVED: {\n            return filterWithPred(state, (r: AnalysisState) => r.id !== action.payload.id);\n        }\n        case analysisActions.ActionTypes.SET_FRAMEVIEW_MODE: {\n            const newFrameDetails = Object.assign({}, state.byId[action.payload.id].frameDetails, {\n                type: action.payload.mode,\n                parameters: action.payload.initialParams,\n            });\n            return updateById(state, action.payload.id, { frameDetails: newFrameDetails });\n        }\n        case datasetActions.ActionTypes.DELETE: {\n            return filterWithPred(state, (r: AnalysisState) => r.dataset !== action.payload.dataset);\n        }\n    }\n    return state;\n}","import { AllActions } from \"../actions\";\nimport * as configActions from '../config/actions';\nimport { DirectoryListingDetails, FSPlace } from \"../messages\";\nimport * as browserActions from './actions';\nimport { DirectoryBrowserState } from \"./types\";\n\nconst initialBrowserState: DirectoryBrowserState = {\n    isOpen: false,\n    isLoading: true,\n    path: \"/\",\n    drives: [],\n    places: {},\n    files: [] as DirectoryListingDetails[],\n    dirs: [] as DirectoryListingDetails[],\n}\n\nexport function directoryBrowserReducer(state: DirectoryBrowserState = initialBrowserState, action: AllActions): DirectoryBrowserState {\n    switch (action.type) {\n        case configActions.ActionTypes.FETCHED: {\n            return Object.assign({}, state, {\n                path: action.payload.config.cwd,\n            })\n            break;\n        }\n        case browserActions.ActionTypes.OPEN: {\n            return Object.assign({}, state, {\n                isOpen: true,\n            })\n            break;\n        }\n        case browserActions.ActionTypes.CANCEL: {\n            return Object.assign({}, state, {\n                isOpen: false,\n            })\n            break;\n        }\n        case browserActions.ActionTypes.LIST_DIRECTORY: {\n            return Object.assign({}, state, {\n                isLoading: true,\n            })\n            break;\n        }\n        case browserActions.ActionTypes.DIRECTORY_LISTING: {\n            const places = action.payload.places.reduce((acc, place: FSPlace) => {\n                return Object.assign({}, acc, {\n                    [place.key]: place,\n                })\n            }, {});\n            return Object.assign({}, state, {\n                isLoading: false,\n                path: action.payload.path,\n                files: action.payload.files,\n                dirs: action.payload.dirs,\n                drives: action.payload.drives,\n                places,\n            })\n            break;\n        }\n        case browserActions.ActionTypes.SELECT_FULL_PATH:\n        case browserActions.ActionTypes.SELECT: {\n            return Object.assign({}, state, {\n                isLoading: false,\n                isOpen: false,\n            });\n        }\n    }\n    return state;\n}","import { AllActions } from \"../actions\";\nimport * as channelActions from './actions';\n\nexport interface ChannelStatusReducer {\n    status: ChannelStatusCodes,\n}\n\nexport enum ChannelStatusCodes {\n    CONNECTING = \"connecting\",\n    CONNECTED = \"connected\",\n    READY = \"ready\",\n    WAITING = \"waiting\",\n}\n\nconst initialChannelState: ChannelStatusReducer = {\n    status: ChannelStatusCodes.WAITING,\n}\n\nexport function channelStatusReducer(state = initialChannelState, action: AllActions): ChannelStatusReducer {\n    switch (action.type) {\n        case channelActions.ActionTypes.OPEN: {\n            return { status: ChannelStatusCodes.CONNECTED };\n        }\n        case channelActions.ActionTypes.INITIAL_STATE: {\n            return { status: ChannelStatusCodes.READY };\n        }\n        case channelActions.ActionTypes.CLOSE: {\n            return { status: ChannelStatusCodes.WAITING };\n        }\n    }\n    return state;\n}","import { AllActions } from \"../actions\";\nimport { ConnectRequestParams } from \"../messages\";\nimport * as clusterActions from './actions';\n\nexport type ClusterConnectionState = {\n    status: \"connected\",\n    params: ConnectRequestParams,\n} | {\n    status: \"disconnected\",\n} | {\n    status: \"unknown\",\n}\n\nconst initialClusterConnectionState: ClusterConnectionState = {\n    status: \"unknown\"\n}\n\nexport function clusterConnectionReducer(state = initialClusterConnectionState, action: AllActions): ClusterConnectionState {\n    switch (action.type) {\n        case clusterActions.ActionTypes.NOT_CONNECTED: {\n            return {\n                status: \"disconnected\"\n            };\n        }\n        case clusterActions.ActionTypes.CONNECTED: {\n            return {\n                status: \"connected\",\n                params: action.payload.params,\n            }\n        }\n    }\n    return state;\n}","import { AllActions } from \"../actions\";\nimport * as browserActions from '../browser/actions';\nimport * as datasetActions from '../dataset/actions';\nimport { DatasetFormParams, MsgPartConfig } from \"../messages\";\nimport * as configActions from './actions';\nimport { makeUnique } from \"./helpers\";\n\nexport interface LocalConfig {\n    fileHistory: string[],\n    lastOpened: {\n        [path: string]: DatasetFormParams\n    }\n}\n\nexport interface ConfigMeta {\n    haveConfig: boolean,\n}\n\nexport type ConfigParams = MsgPartConfig & LocalConfig;\nexport type ConfigState = ConfigParams & ConfigMeta;\n\nconst initialConfigState: ConfigState = {\n    version: \"\",\n    revision: \"\",\n    localCores: 0,\n    cwd: \"/\",\n    separator: \"/\",\n    lastOpened: {},\n    fileHistory: [],\n    haveConfig: false,\n}\n\nexport function configReducer(state = initialConfigState, action: AllActions): ConfigState {\n    switch (action.type) {\n        case configActions.ActionTypes.FETCHED: {\n            return Object.assign({}, action.payload.config, { haveConfig: true });\n        }\n        case browserActions.ActionTypes.DIRECTORY_LISTING: {\n            return Object.assign({}, state, {\n                cwd: action.payload.path,\n            });\n        }\n        case datasetActions.ActionTypes.CREATE: {\n            const newLastOpened = Object.assign({}, state.lastOpened, { [action.payload.dataset.params.path]: action.payload.dataset.params });\n            const newFileHistory = makeUnique([\n                action.payload.dataset.params.path, ...state.fileHistory\n            ]).slice(0, 11);\n            return Object.assign({}, state, {\n                lastOpened: newLastOpened,\n                fileHistory: newFileHistory,\n            });\n        }\n    }\n    return state;\n}","import { AllActions } from \"../actions\";\nimport * as channelActions from '../channel/actions';\nimport { constructById, filterWithPred, insertById, updateById } from \"../helpers/reducerHelpers\";\nimport { Dataset, DatasetState, DatasetStatus } from \"../messages\";\nimport * as datasetActions from './actions';\nimport { DatasetsState, OpenDatasetState } from \"./types\";\n\nconst initialDatasetState: DatasetsState = {\n    byId: {},\n    ids: [],\n};\n\nexport function datasetReducer(state = initialDatasetState, action: AllActions): DatasetsState {\n    switch (action.type) {\n        case channelActions.ActionTypes.INITIAL_STATE: {\n            const datasets = action.payload.datasets.map(ds => Object.assign({}, ds, { status: DatasetStatus.OPEN }));\n            return {\n                byId: constructById(datasets, ds => ds.id),\n                ids: datasets.map(ds => ds.id),\n            }\n        }\n        case datasetActions.ActionTypes.CREATE: {\n            const ds: Dataset = {\n                ...action.payload.dataset,\n                status: DatasetStatus.OPENING\n            };\n            return insertById(state, action.payload.dataset.id, ds);\n        }\n        case datasetActions.ActionTypes.CREATED: {\n            const ds = Object.assign({}, action.payload.dataset, { status: DatasetStatus.OPEN });\n            return updateById(state, action.payload.dataset.id, ds);\n        }\n        case datasetActions.ActionTypes.ERROR: {\n            return filterWithPred(state, (r: DatasetState) => r.id !== action.payload.dataset);\n        }\n        case datasetActions.ActionTypes.DELETE: {\n            return updateById(state, action.payload.dataset, { status: DatasetStatus.DELETING });\n        }\n        case datasetActions.ActionTypes.DELETED: {\n            return filterWithPred(state, (r: DatasetState) => r.id !== action.payload.dataset);\n        }\n    }\n    return state;\n}\n\nconst initialOpenDatasetState: OpenDatasetState = {\n    busy: false,\n    busyPath: \"\",\n    formVisible: false,\n    formPath: \"/\",\n    formInitialParams: undefined,\n}\n\nexport function openDatasetReducer(state = initialOpenDatasetState, action: AllActions): OpenDatasetState {\n    switch (action.type) {\n        case datasetActions.ActionTypes.OPEN: {\n            return {\n                ...state,\n                formVisible: true,\n                formPath: action.payload.path,\n                formInitialParams: action.payload.initialParams,\n            };\n        }\n        case datasetActions.ActionTypes.CANCEL_OPEN: {\n            return {\n                ...state,\n                formVisible: false,\n            }\n        }\n        case datasetActions.ActionTypes.CREATE: {\n            return {\n                ...state,\n                formVisible: false,\n            }\n        }\n        case datasetActions.ActionTypes.DETECT: {\n            return {\n                ...state,\n                busyPath: action.payload.path,\n                busy: true,\n            }\n        }\n        case datasetActions.ActionTypes.DETECTED:\n        case datasetActions.ActionTypes.DETECT_FAILED: {\n            return {\n                ...state,\n                busyPath: \"\",\n                busy: false,\n            }\n        }\n    }\n    return state;\n}","import { AllActions } from \"../actions\";\nimport * as analysisActions from '../analysis/actions';\nimport * as browserActions from '../browser/actions';\nimport * as channelActions from '../channel/actions';\nimport * as datasetActions from '../dataset/actions';\nimport { ById, filterWithPred, insertById } from \"../helpers/reducerHelpers\";\nimport * as errorActions from './actions';\n\nexport interface ErrorMessage {\n    id: string,\n    msg: string,\n    timestamp: number,\n}\n\nexport type ErrorState = ById<ErrorMessage>;\n\nconst initialErrorState: ErrorState = {\n    byId: {},\n    ids: [],\n};\n\nexport function errorReducer(state = initialErrorState, action: AllActions): ErrorState {\n    switch (action.type) {\n        case browserActions.ActionTypes.ERROR:\n        case datasetActions.ActionTypes.ERROR:\n        case channelActions.ActionTypes.ERROR:\n        case analysisActions.ActionTypes.ERROR:\n        case channelActions.ActionTypes.JOB_ERROR: {\n            return insertById(state, action.payload.id, {\n                id: action.payload.id,\n                msg: action.payload.msg,\n                timestamp: action.payload.timestamp,\n            });\n        }\n        case channelActions.ActionTypes.OPEN: {\n            return initialErrorState;\n        }\n        case errorActions.ActionTypes.DISMISS: {\n            return filterWithPred(state, (r: ErrorMessage) => r.id !== action.payload.id);\n        }\n    }\n    return state;\n}","import { AllActions } from \"../actions\";\nimport * as channelActions from '../channel/actions';\nimport { ById, insertById, updateById } from \"../helpers/reducerHelpers\";\nimport * as jobActions from './actions';\nimport { JobRunning, JobState, JobStatus } from \"./types\";\n\nexport type JobReducerState = ById<JobState>;\n\nconst initialJobState: JobReducerState = {\n    byId: {},\n    ids: [],\n};\n\nexport function jobReducer(state = initialJobState, action: AllActions): JobReducerState {\n    switch (action.type) {\n        case jobActions.ActionTypes.CREATE: {\n            const createResult = insertById(\n                state,\n                action.payload.id,\n                {\n                    id: action.payload.id,\n                    dataset: action.payload.dataset,\n                    running: JobRunning.CREATING,\n                    status: JobStatus.CREATING,\n                    results: [],\n                    startTimestamp: action.payload.timestamp,\n                }\n            )\n            return createResult;\n        }\n        case channelActions.ActionTypes.JOB_STARTED: {\n            return updateById(\n                state,\n                action.payload.job,\n                {\n                    running: JobRunning.RUNNING,\n                    status: JobStatus.IN_PROGRESS,\n                    startTimestamp: action.payload.timestamp,\n                }\n            )\n        }\n        case channelActions.ActionTypes.TASK_RESULT: {\n            return updateById(\n                state,\n                action.payload.job,\n                {\n                    results: action.payload.results,\n                }\n            );\n        }\n        case channelActions.ActionTypes.FINISH_JOB: {\n            const { job, timestamp, results } = action.payload;\n            return updateById(\n                state,\n                job,\n                {\n                    running: JobRunning.DONE,\n                    status: JobStatus.SUCCESS,\n                    results,\n                    endTimestamp: timestamp,\n                }\n            );\n        }\n        case channelActions.ActionTypes.JOB_ERROR: {\n            const { job, timestamp } = action.payload;\n            return updateById(\n                state,\n                job,\n                {\n                    running: JobRunning.DONE,\n                    status: JobStatus.ERROR,\n                    endTimestamp: timestamp,\n                }\n            )\n        }\n    }\n    return state;\n}","import { combineReducers } from \"redux\";\nimport { analysisReducer } from \"./analysis/reducers\";\nimport { directoryBrowserReducer } from './browser/reducers';\nimport { channelStatusReducer } from \"./channel/reducers\";\nimport { clusterConnectionReducer } from \"./cluster/reducers\";\nimport { configReducer } from \"./config/reducers\";\nimport { datasetReducer, openDatasetReducer } from \"./dataset/reducers\";\nimport { errorReducer } from \"./errors/reducers\";\nimport { jobReducer } from \"./job/reducers\";\n\nexport const rootReducer = combineReducers({\n    analyses: analysisReducer,\n    channelStatus: channelStatusReducer,\n    clusterConnection: clusterConnectionReducer,\n    datasets: datasetReducer,\n    openDataset: openDatasetReducer,\n    jobs: jobReducer,\n    errors: errorReducer,\n    config: configReducer,\n    browser: directoryBrowserReducer,\n})\n\nexport type RootReducer = ReturnType<typeof rootReducer>;","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { applyMiddleware, compose, createStore } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\nimport { rootSaga } from './sagas';\nimport { rootReducer } from './store';\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst composeEnhancers = (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(rootReducer, composeEnhancers(\n    applyMiddleware(\n        sagaMiddleware,\n    )\n));\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n  document.getElementById('root') as HTMLElement\n);\nregisterServiceWorker();\n\nsagaMiddleware.run(rootSaga);"],"sourceRoot":""}