{"version":3,"sources":["job/components/ResultImage.module.css","images/LiberTEM logo-medium.png","cluster/actions.ts","About.tsx","helpers/actionHelpers.ts","helpers/index.ts","messages.ts","browser/actions.ts","cluster/components/LocalConnectionForm.tsx","cluster/components/TCPConnectionForm.tsx","cluster/components/ClusterConnectionForm.tsx","channel/components/ChannelConnecting.tsx","channel/components/ChannelStatus.tsx","browser/components/FileBrowserEntry.tsx","browser/components/FileBrowserHeader.tsx","browser/components/FileEntry.tsx","browser/components/FolderEntry.tsx","browser/components/PathDropDownItem.tsx","browser/components/PathInput.tsx","browser/components/RecentFiles.tsx","browser/components/PathBar.tsx","browser/components/FileBrowser.tsx","job/types.ts","browser/components/BrowserWrapper.tsx","widgets/BusySpinner.tsx","widgets/BusyWrapper.tsx","widgets/HandleParent.tsx","job/components/ResultImage.tsx","job/components/Result.tsx","job/components/Selectors.tsx","job/components/ResultList.tsx","widgets/constraints.ts","widgets/styles.ts","widgets/Disk.tsx","widgets/kbdHandler.ts","widgets/DraggableHandle.tsx","analysis/actions.ts","analysis/components/AnalysisLayoutTwoCol.tsx","analysis/components/FramePicker.tsx","analysis/components/ModeSelector.tsx","analysis/components/SumFrames.tsx","analysis/components/DefaultFrameView.tsx","analysis/components/RoiPicker.tsx","analysis/components/Toolbar.tsx","analysis/helpers.ts","analysis/components/CenterOfMassAnalysis.tsx","analysis/components/DiskMaskAnalysis.tsx","helpers/svg.ts","widgets/Ring.tsx","analysis/components/AnalysisLayoutThreeCol.tsx","analysis/components/FFTFramePicker.tsx","analysis/components/FFTSumFrames.tsx","analysis/components/FFTFrameView.tsx","analysis/components/FFTAnalysis.tsx","analysis/components/PointSelectionAnalysis.tsx","analysis/components/RadialFourierAnalysis.tsx","analysis/components/RingMaskAnalysis.tsx","analysis/types.ts","analysis/components/Analysis.tsx","analysis/components/AnalysisList.tsx","helpers/reducerHelpers.ts","analysis/components/AnalysisSelect.tsx","dataset/actions.ts","dataset/components/AddAnalysis.tsx","dataset/components/DatasetParams.tsx","dataset/components/DatasetInfo.tsx","dataset/components/DatasetToolbar.tsx","dataset/components/Dataset.tsx","dataset/helpers.ts","dataset/components/BLOParamsForm.tsx","errors/actions.ts","dataset/components/DatasetTypeSelect.tsx","dataset/components/EMPADParamsForm.tsx","dataset/components/FRMS6ParamsForm.tsx","dataset/components/HDF5ParamsForm.tsx","dataset/components/HDFSParamsForm.tsx","dataset/components/K2ISParamsForm.tsx","dataset/components/MIBParamsForm.tsx","dataset/components/RawFileParamsForm.tsx","dataset/components/SERParamsForm.tsx","dataset/components/DatasetOpen.tsx","dataset/components/DatasetOpenSpinner.tsx","dataset/components/DatasetList.tsx","errors/components/Error.tsx","errors/components/ErrorList.tsx","App.tsx","registerServiceWorker.ts","job/actions.ts","job/api.ts","analysis/sagas.ts","config/helpers.ts","browser/api.ts","channel/actions.ts","browser/sagas.ts","channel/messages.ts","channel/sagas.ts","cluster/api.ts","config/actions.ts","cluster/sagas.ts","config/api.ts","config/sagas.ts","dataset/api.ts","dataset/sagas.ts","sagas.ts","analysis/reducers.ts","browser/reducers.ts","channel/reducers.ts","cluster/reducers.ts","config/reducers.ts","dataset/reducers.ts","errors/reducers.ts","job/reducers.ts","store.ts","index.tsx"],"names":["module","exports","default","fallback","__webpack_require__","p","ActionTypes","connect","state","version","config","revision","_ref","react","Header","as","slice","List","Item","Icon","name","Content","href","src","alt","createAction","type","payload","meta","undefined","Actions","notConnected","NOT_CONNECTED","params","CONNECT","connected","CONNECTED","defaultDebounce","fn","delay","arguments","length","_","maxWait","getEnumValues","e","Object","keys","ClusterTypes","DatasetTypes","DatasetStatus","AnalysisTypes","ClusterTypeMetadata","_ClusterTypeMetadata","defineProperty","LOCAL","label","TCP","helpText","withFormik","mapPropsToValues","ownProps","numWorkers","localCores","handleSubmit","values","formikBag","onSubmit","props","objectSpread","touched","errors","isSubmitting","dirty","handleChange","handleBlur","handleReset","Form","Field","htmlFor","value","onChange","onBlur","Button","primary","disabled","address","mapDispatchToProps","connectToCluster","clusterActions","clusterTypeOptions","map","t","text","ClusterConnectionForm","clusterType","setType","_this","setState","data","this","components_LocalConnectionForm","components_TCPConnectionForm","Dropdown","inline","options","Segment","renderForm","React","ChannelConnecting","msg","Message","icon","loading","messages","waiting","connecting","clusterMessages","channelStatus","clusterConnection","haveConfig","children","status","components_ChannelConnecting","components_ClusterConnectionForm","list","path","LIST_DIRECTORY","dirListing","dirs","files","drives","places","DIRECTORY_LISTING","open","OPEN","cancel","CANCEL","select","SELECT","selectFullPath","SELECT_FULL_PATH","error","timestamp","id","ERROR","detectParams","DETECT_PARAMS","paramsDetected","PARAMS_DETECTED","TimeStamp","ts","date","Date","fmtDate","toLocaleDateString","fmtTime","toLocaleTimeString","title","concat","style","display","whiteSpace","width","marginRight","FileSize","_ref2","fmtSize","bytes","si","thresh","Math","abs","size","unit","units","u","toFixed","humanFileSize","textAlign","Cell","_ref3","overflow","textOverflow","FileBrowserEntry","onClick","_this$props","details","myStyle","cursor","tsStyles","paddingRight","flexGrow","FileBrowserEntry_Cell","FileBrowserEntry_FileSize","owner","FileBrowserEntry_TimeStamp","ctime","mtime","FileBrowserHeader","alignRight","paddingBottom","FileEntry","components_FileBrowserEntry","dispatch","browserActions","window","setTimeout","toString","objectWithoutProperties","newProps","initialPath","enableReinitialize","Input","autoComplete","lastOpened","fileHistory","separator","recentFiles","filter","item","floating","Menu","content","option","idx","key","refresh","currentPath","handleInputChange","goUp","driveOptions","placeOptions","components_RecentFiles","components_PathDropDownItem","components_PathInput","listRef","scrollToTop","current","scrollToItem","sortByKey","array","getKey","sort","a","b","x","y","JobRunning","JobStatus","browser","isLoading","getSortKey","toLowerCase","dirEntries","dir","components_FolderEntry","fileEntries","f","components_FileEntry","entries","index_esm","overflowY","ref","height","itemCount","itemSize","index","Group","components_PathBar","components_FileBrowserHeader","isOpen","components_FileBrowser","labelPosition","BusySpinner","margin","padding","position","bottom","right","color","opacity","BusyWrapper","busy","widgets_BusySpinner","HandleParent","_React$Component","_getPrototypeOf2","classCallCheck","_len","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","currentHandle","handleDragStart","h","handleDrop","handleMouseMove","externalMouseMove","handleMouseLeave","externalLeave","handleMouseUp","externalMouseUp","inherits","createClass","onMouseMove","onMouseLeave","onMouseUp","onKeyDown","onKeyboardEvent","outline","tabIndex","fill","renderHandles","_this2","_this$props2","handles","i","elem","ResultImage","job","result","results","className","styles","viewBox","xlinkHref","imageURL","ResultWrapper","styled","svg","_templateObject","Result","extraHandles","toConsumableArray","widgets_HandleParent","extraWidgets","running","DONE","widgets_BusyWrapper","components_ResultImage","Selectors","div","Selectors_templateObject","ResultList","selectedChannel","selectChannel","getJob","currentJob","analysis","jobsById","jobIndex","history","jobHistory","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","tmpJob","err","return","selectors","dataset","subtitle","currentResult","border","components_Result","dt","endTimestamp","startTimestamp","components_Selectors","ResultList_ResultImageSelector","selectedImg","ResultImageSelector","availableImages","description","analyses","byId","jobId","jobs","ds","datasets","inRectConstraint","max","min","cbToRadius","cx","cy","cb","dx","dy","sqrt","dist","keepOnCY","riConstraint","outerPos","otherX","roConstraints","innerPos","defaultMaskStyles","imageWidth","fillOpacity","strokeOpacity","stroke","strokeWidth","Disk","imageHeight","r","handleKeyEvent","update","delta","shiftKey","preventDefault","StyledCircle","circle","DraggableHandle_templateObject","Cross","_templateObject2","FocusGroup","g","_templateObject3","Handle","scale","withCross","focusRef","transform","crossSpec","cross","d","assign","relativeCoords","parent","ownerSVGElement","Error","inWidthAttr","getAttribute","inWidth","getBoundingClientRect","getScalingFactor","parentPos","pageX","left","pageXOffset","pageY","top","pageYOffset","DraggableHandle","posRef","dragging","drag","move","stopDrag","applyConstraint","constraint","startDrag","parentOnDragStart","assertThisInitialized","focus","onDragMove","constrained","parentOnDrop","_this$state","handleKeyDown","newCoords","visibility","DraggableHandle_Handle","onMouseDown","_this$state$drag","renderCommon","renderDragging","create","analysisType","CREATE","created","CREATED","prepareRun","PREPARE_RUN","run","parameters","RUN","RUNNING","remove","REMOVE","removed","REMOVED","AnalysisLayoutTwoCol","toolbar","attached","Grid","columns","Row","Column","useFramePicker","enabled","scanWidth","scanHeight","analysisId","setCx","setCy","useDispatch","useEffect","analysisActions","PICK_FRAME","onPickChange","pickX","pickY","newX","round","newY","coords","onDragStart","onDrop","react_default","createElement","widgets_DraggableHandle","ModeSelector","modes","currentMode","onModeChange","useSumFrames","SUM_FRAMES","useDefaultFrameView","availableModes","SUM_FRAMES_ROI","_useState","useState","_useState2","slicedToArray","frameMode","setMode","frameModeSelector","components_ModeSelector","_React$useState","_React$useState2","_React$useState3","_React$useState4","_useFramePicker","pickCoords","pickHandles","_useRoiPicker","minLength","_useState3","_useState4","_useState5","_useState6","setR","roiParameters","roi","shape","handle","clearTimeout","handleCenterChange","newCx","newCy","handleRChange","newR","rHandle","sumRoiWidgets","widgets_Disk","sumRoiHandles","useRoiPicker","widgets","frameViewTitle","jobIdxsToInclude","filteredJobs","indexOf","reduce","prevValue","getAnalysisStatus","busyIdxs","handleRemove","onApply","applyIconProps","CenterOfMassAnalysis","_shape","frameViewWidgets","_useDefaultFrameView","resultHandles","resultWidgets","components_Toolbar","CENTER_OF_MASS","components_AnalysisLayoutTwoCol","components_ResultList","DraggableHandle_DraggableHandle","DiskMaskAnalysis","APPLY_DISK_MASK","getPathArc","center","start","end","radius","degree","points","push","getLocationFromAngle","clockWise","join","getCirclePath","radian","PI","cos","sin","Ring","ri","pathSpec","ro","fillRule","AnalysisLayoutThreeCol","mid","title1","title2","title3","useFFTFramePicker","real_rad","real_centerx","real_centery","PICK_FFT_FRAME","useFFTSumFrames","FFTSUM_FRAMES","useFFTFrameView","FFTAnalysis","rad_in","setRi","rad_out","setRo","riHandle","roHandle","handleRIChange","handleROChange","frameViewWidgetsfft","widgets_Ring","check","setCheck","_useState7","_useState8","_useState9","_useState10","frameViewWidgetsreal","_useFFTFrameView","APPLY_FFT_MASK","components_AnalysisLayoutThreeCol","event","target","checked","PointSelectionAnalysis","APPLY_POINT_SELECTOR","RadialFourierAnalysis","nBins","_useState11","maxOrder","RADIAL_FOURIER","n_bins","max_order","RingMaskAnalysis","APPLY_RING_MASK","AnalysisMetadata","_AnalysisMetadata","desc","component","AnalysisDispatcherComponent","useSelector","AnalysisComponent","mainAnalysisType","AnalysisList","ids","Analysis","updateById","partialRecord","newObj","newById","insertById","record","filterWithPred","pred","acc","getMetadata","analysisTypeOptions","AnalysisSelect","labeled","button","handleAddAnalysis","components_AnalysisSelect","renderParams","Table","DatasetParams","HeaderCell","Body","DiagElem","DatasetInfo_DiagElems","diagnostics","renderValue","DiagElems","DatasetInfo_DiagElem","DatasetInfo","components_DatasetParams","initialParams","cancelOpen","CANCEL_OPEN","delete","DELETE","deleted","DELETED","detect","DETECT","detected","DETECTED","detectFailed","DETECT_FAILED","handleRemoveDataset","datasetActions","DatasetContainer","_msg","OPENING","DELETING","dividing","marginTop","marginBottom","horizontal","Modal","trigger","link","Popup","components_DatasetInfo","flexShrink","components_DatasetToolbar","components_AnalysisList","components_AddAnalysis","parseNumList","nums","split","part","getInitial","otherwise","initial","tileshape","_formikBag$props","BLO","onCancel","datasetTypeOptions","DatasetTypeSelect","currentType","scan_size","EMPAD","FRMS6","ds_path","HDF5","HDFS","K2IS","MIB","enable_direct","detector_size","dtype","RAW","SER","DatasetOpen","datasetType","setDatasetType","formInitial","formPath","createDataset","form","components_DatasetTypeSelect","components_HDF5ParamsForm","components_HDFSParamsForm","components_RawFileParamsForm","MIBParamsForm","BLOParamsForm","K2ISParamsForm","components_SERParamsForm","components_FRMS6ParamsForm","EMPADParamsForm","message","assertNotReached","formVisible","openDataset","formInitialParams","uuid","busyPath","DatasetList","dsId","Dataset","components_DatasetOpenSpinner","components_DatasetOpen","components_BrowserWrapper","DISMISS","dismiss","errorActions","negative","onDismiss","clusterConnected","channelConnected","latestErrors","showModal","components_Error","App","Container","logo","alignSelf","src_About","components_ErrorList","components_ChannelStatus","components_DatasetList","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","startJob","datasetId","fetch","body","JSON","stringify","credentials","method","json","cancelJob","createAnalysisSaga","analysisSidecar","doRemoveAnalysisSaga","analysisRootSaga","selectDataset","selectAnalysis","selectJob","action","sidecarTask","regenerator_default","wrap","_context","prev","sent","fork","put","take","t0","now","stop","_marked","runOrParamsChannel","_action$payload","oldJobId","_context3","actionChannel","buffers","sliding","abrupt","jobActions","_marked3","_context4","finish","_marked4","_context5","takeEvery","_marked5","CONFIG_KEY","joinPaths","parts","replace","RegExp","trim","mergeLocalStorage","serverConfig","localSettings","localStorage","getItem","localSettingsParsed","parse","defaultConfig","setLocalStorage","setItem","getDirectoryListing","url","encodeURIComponent","directoryListingSaga","fetchOnRequest","fetchDirectoryListing","fetchDirectoryListOnOpen","sagas_marked","newPath","_context2","sagas_marked2","browserState","alternative","_browserState","_timestamp","_id","home","sagas_marked3","cwd","sagas_marked4","MessageTypes","initialState","INITIAL_STATE","jobStarted","JOB_STARTED","finishJob","FINISH_JOB","taskResult","TASK_RESULT","jobError","JOB_ERROR","close","CLOSE","cancelled","CANCELLED","createMessage","messageType","attribs","Messages","followup","binary","objectURL","BINARY","deleteDataset","DELETE_DATASET","CANCEL_JOB_DONE","webSocketSaga","actionsFromChannel","handleBinaryParts","handleTaskResult","handleFinishJob","createWebSocketChannel","eventChannel","emit","onMessage","Blob","channelMessages","URL","createObjectURL","parsed","onOpen","onClose","END","onError","ws","WebSocket","port","addEventListener","removeEventListener","socketChannel","channelActions","channel_sagas_marked","channel_sagas_marked2","numParts","binMsg","channel_sagas_marked3","images","numMessages","descriptions","channel_sagas_marked4","sagas_marked5","connection","checkClusterConnection","connectSaga","putClusterStatus","trackClusterConnection","clusterConnectionSaga","conn","cluster_sagas_marked","cluster_sagas_marked2","cluster_sagas_marked3","all","cluster_sagas_marked4","FETCH","fetched","FETCHED","fetchFailed","FETCH_FAILED","getConfig","getConfigOnReconnect","getConfigSaga","updateLocalStorageConfig","firstConfigFetch","configRootSaga","config_sagas_marked","configResponse","mergedConfig","configActions","removeItem","config_sagas_marked2","config_sagas_marked3","config_sagas_marked4","config_sagas_marked5","detectDataset","createDatasetSaga","deleteDatasetSaga","doOpenDataset","openDatasetSagaFullPath","openDatasetSaga","datasetRootSaga","resp","dataset_sagas_marked","dataset_sagas_marked2","fullPath","prefillParams","detectResult","datasetParams","dataset_sagas_marked3","dataset_sagas_marked4","dataset_sagas_marked5","_context6","_marked6","rootSaga","src_sagas_marked","initialAnalysisState","ChannelStatusCodes","initialBrowserState","initialChannelState","WAITING","initialClusterConnectionState","initialConfigState","initialDatasetState","initialOpenDatasetState","initialErrorState","initialJobState","rootReducer","combineReducers","oldJob","hist","newJobs","READY","items","CREATING","IN_PROGRESS","SUCCESS","_action$payload2","inp","newLastOpened","newFileHistory","curr","place","sagaMiddleware","createSagaMiddleware","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","ReactDOM","es","src_App","document","getElementById","process","origin","response","headers","get","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.1a3e5a94.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"default\":\"ResultImage_default__3UGMF\",\"fallback\":\"ResultImage_fallback__7NTHF\"};","module.exports = __webpack_public_path__ + \"static/media/LiberTEM logo-medium.7999e0dc.png\";","import { ActionsUnion, createAction } from '../helpers/actionHelpers';\nimport { ConnectRequestParams } from '../messages';\n\nexport enum ActionTypes {\n    NOT_CONNECTED = 'CLUSTER_NOT_CONNECTED',\n    CONNECT = 'CLUSTER_CONNECT',\n    CONNECTED = 'CLUSTER_CONNECTED',\n}\n\nexport const Actions = {\n    notConnected: () => createAction(ActionTypes.NOT_CONNECTED),\n    connect: (params: ConnectRequestParams) => createAction(ActionTypes.CONNECT, { params }),\n    connected: (params: ConnectRequestParams) => createAction(ActionTypes.CONNECTED, { params }),\n}\n\nexport type Actions = ActionsUnion<typeof Actions>;\n","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Header, List } from \"semantic-ui-react\";\nimport { RootReducer } from \"./store\";\n\nconst mapStateToProps = (state: RootReducer) => {\n    return {\n        version: state.config.version,\n        revision: state.config.revision,\n    }\n}\n\ntype MergedProps = ReturnType<typeof mapStateToProps>;\n\nconst About: React.SFC<MergedProps> = ({ version, revision }) => {\n    return (\n        <>\n            <Header as=\"h3\">This is LiberTEM version {version} (revision {revision.slice(0, 8)})</Header>\n            <List>\n                <List.Item>\n                    <List.Icon name=\"github\" />\n                    <List.Content>\n                        Find us on <a href=\"https://github.com/LiberTEM/LiberTEM\">GitHub</a>\n                    </List.Content>\n                </List.Item>\n                <List.Item>\n                    <List.Icon name=\"bug\" />\n                    <List.Content>\n                        Found a bug? Got a feature request? Please <a href=\"https://github.com/LiberTEM/LiberTEM/issues/new\">open an issue!</a>\n                    </List.Content>\n                </List.Item>\n                <List.Item>\n                    <List.Icon name=\"legal\" />\n                    <List.Content>\n                        LiberTEM is licensed under the <a href=\"https://github.com/LiberTEM/LiberTEM/blob/master/LICENSE\">GNU General Public License v3.0</a>\n                    </List.Content>\n                </List.Item>\n                <List.Item>\n                    <List.Icon name=\"book\" />\n                    <List.Content>\n                        Read <a href=\"https://libertem.github.io/LiberTEM/\">the documentation</a>\n                    </List.Content>\n                </List.Item>\n                <List.Item>\n                    <List.Icon name=\"user\" />\n                    <List.Content>\n                        Read <a href=\"https://libertem.github.io/LiberTEM/acknowledgments.html\">the acknowledgments</a>\n                    </List.Content>\n                </List.Item>\n                <List.Item>\n                    <List.Icon name=\"gitter\" />\n                    <List.Content>\n                        Join our <a href=\"https://gitter.im/LiberTEM/Lobby\">chat on gitter!</a>\n                    </List.Content>\n                </List.Item>\n                <List.Item>\n                    <List.Icon name=\"linkify\" />\n                    <List.Content>\n                    <a href=\"https://doi.org/10.5281/zenodo.1478763\"><img src=\"https://zenodo.org/badge/DOI/10.5281/zenodo.1478763.svg\" alt=\"DOI\"/></a>\n                    </List.Content>\n                </List.Item>\n            </List>\n        </>\n    );\n}\n\nexport default connect(mapStateToProps)(About);","import { ActionCreatorsMapObject } from \"redux\";\n\nexport interface Action<T extends string> {\n    type: T\n}\n\nexport interface ActionWithPayload<T extends string, P> extends Action<T> {\n    payload: P\n}\n\nexport interface ActionWithMeta<T extends string, P, M> extends ActionWithPayload<T, P> {\n    meta: M\n}\n\nexport function createAction<T extends string>(type: T): Action<T>\nexport function createAction<T extends string, P, M>(type: T, payload?: P): ActionWithPayload<T, P>\nexport function createAction<T extends string, P, M>(type: T, payload?: P, meta?: M): ActionWithMeta<T, P, M>\nexport function createAction<T extends string, P, M>(type: T, payload?: P, meta?: M) {\n    if (meta === undefined && payload === undefined) {\n        return { type };\n    } else if (meta === undefined) {\n        return { type, payload };\n    } else {\n        return { type, payload, meta }\n    }\n}\n\nexport type ActionsUnion<A extends ActionCreatorsMapObject> = ReturnType<A[keyof A]>","import * as _ from \"lodash\";\n\nexport function assertNotReached(message: string): never {\n    throw new Error(message);\n}\n\nexport function defaultDebounce<T extends (...args: any[]) => any>(fn: T, delay: number = 50) {\n    return _.debounce(fn, delay, { maxWait: delay });\n}\n\nexport function getEnumValues<E>(e: E): Array<keyof E> {\n    return Object.keys(e) as Array<keyof E>;\n}","\n/* \n * Common\n */\n\nexport interface FollowupPart {\n    numMessages: number,\n    descriptions: Array<{ title: string, desc: string }>,\n}\n\nexport interface MsgPartConfig {\n    version: string,\n    revision: string,\n    localCores: number,\n    cwd: string,\n    separator: string,\n}\n\nexport interface GetConfigResponse {\n    status: \"ok\",\n    config: MsgPartConfig,\n}\n\n/*\n * Connection\n */\n\nexport enum ClusterTypes {\n    LOCAL = \"LOCAL\",\n    TCP = \"TCP\",\n}\n\nexport const ClusterTypeMetadata: { [s: string]: { [s: string]: string } } = {\n    [ClusterTypes.LOCAL]: {\n        label: \"Create local cluster\",\n    },\n    [ClusterTypes.TCP]: {\n        label: \"Connect to cluster\",\n        helpText: \"can be either local or remote, connection via TCP\",\n    }\n}\n\nexport interface ConnectRequestLocalCluster {\n    type: ClusterTypes.LOCAL,\n    numWorkers?: number,\n}\n\nexport interface ConnectRequestTCP {\n    type: ClusterTypes.TCP,\n    address: string,\n}\n\nexport type ConnectRequestParams = ConnectRequestLocalCluster | ConnectRequestTCP\n\nexport interface ConnectRequest {\n    connection: ConnectRequestParams\n}\n\nexport type ConnectResponse = {\n    status: \"ok\",\n    connection: ConnectRequest,\n} | {\n    status: \"disconnected\",\n    connection: {},\n}\n\n/*\n * Dataset\n */\n\nexport enum DatasetTypes {\n    HDF5 = \"HDF5\",\n    HDFS = \"HDFS\",\n    RAW = \"RAW\",\n    MIB = \"MIB\",\n    BLO = \"BLO\",\n    K2IS = \"K2IS\",\n    SER = \"SER\",\n    FRMS6 = \"FRMS6\",\n    EMPAD = \"EMPAD\",\n}\n\nexport interface DatasetParamsCommon {\n    name: string,\n}\n\nexport type DatasetParamsHDFS = {\n    type: DatasetTypes.HDFS,\n    path: string,\n    tileshape: number[],\n} & DatasetParamsCommon;\n\nexport type DatasetParamsHDF5 = {\n    type: DatasetTypes.HDF5,\n    path: string,\n    ds_path: string,\n    tileshape: number[],\n} & DatasetParamsCommon\n\nexport type DatasetParamsRaw = {\n    type: DatasetTypes.RAW,\n    path: string,\n    dtype: string,\n    detector_size: number[],\n    enable_direct: boolean,\n    scan_size: number[],\n    tileshape: number[],\n} & DatasetParamsCommon\n\nexport type DatasetParamsMIB = {\n    type: DatasetTypes.MIB,\n    path: string,\n    scan_size: number[],\n    tileshape: number[],\n} & DatasetParamsCommon\n\nexport type DatasetParamsBLO = {\n    type: DatasetTypes.BLO,\n    path: string,\n    tileshape: number[],\n} & DatasetParamsCommon\n\nexport type DatasetParamsK2IS = {\n    type: DatasetTypes.K2IS,\n    path: string,\n} & DatasetParamsCommon\n\nexport type DatasetParamsSER = {\n    type: DatasetTypes.SER,\n    path: string,\n} & DatasetParamsCommon\n\nexport type DatasetParamsFRMS6 = {\n    type: DatasetTypes.FRMS6,\n    path: string,\n} & DatasetParamsCommon\n\nexport type DatasetParamsEMPAD = {\n    type: DatasetTypes.EMPAD,\n    path: string,\n    scan_size: number[],\n} & DatasetParamsCommon\n\nexport type DatasetFormParams = DatasetParamsHDF5 | DatasetParamsHDFS | DatasetParamsRaw | DatasetParamsMIB | DatasetParamsBLO | DatasetParamsK2IS | DatasetParamsSER | DatasetParamsFRMS6 | DatasetParamsEMPAD\n\nexport interface DatasetCreateParams {\n    id: string,\n    params: DatasetFormParams,\n}\n\nexport enum DatasetStatus {\n    OPEN = \"OPEN\",\n    OPENING = \"OPENING\",\n    DELETING = \"DELETING\",\n}\n\nexport interface DiagElemMsg {\n    name: string,\n    value: string | DiagElemMsg[],\n}\n\ninterface DatasetCommon {\n    id: string,\n    params: DatasetFormParams,\n}\n\nexport type DatasetOpening = DatasetCommon & {\n    status: DatasetStatus.OPENING,\n}\n\nexport type DatasetDeleting = DatasetCommon & {\n    status: DatasetStatus.DELETING,\n}\n\nexport type DatasetOpen = DatasetCommon & {\n    status: DatasetStatus.OPEN,\n    params: {\n        shape: number[],\n    }\n    diagnostics: DiagElemMsg[],\n}\n\nexport type Dataset = DatasetOpening | DatasetOpen | DatasetDeleting;\n\nexport interface OpenDatasetRequest {\n    dataset: DatasetCreateParams\n}\n\nexport interface OpenDatasetResponseOk {\n    status: \"ok\",\n    dataset: string,  // TODO: uuid type?\n    details: Dataset,\n}\n\nexport interface OpenDatasetResponseError {\n    status: \"error\",\n    dataset: string,\n    msg: string,\n}\n\nexport type OpenDatasetResponse = OpenDatasetResponseOk | OpenDatasetResponseError\n\nexport interface DeleteDatasetResponse {\n    status: \"ok\",\n    dataset: string,\n}\n\nexport interface DetectDatasetSuccessResponse {\n    status: \"ok\",\n    datasetParams: DatasetFormParams,\n}\n\nexport interface DetectDatasetErrorResponse {\n    status: \"error\",\n    path: string,\n    msg: string,\n}\n\nexport type DetectDatasetResponse = DetectDatasetSuccessResponse | DetectDatasetErrorResponse;\n\nexport type MsgPartInitialDataset = DatasetOpen\n\n// type alias to add client-side state to datasets\nexport type DatasetState = Dataset & {}\n\n/*\n * Job\n */\nexport interface MsgPartJob {\n    id: string,\n    dataset: string,\n}\n\nexport interface MaskDefRing {\n    shape: \"ring\",\n    cx: number,\n    cy: number,\n    ri: number,\n    ro: number\n}\n\nexport interface MaskDefDisk {\n    shape: \"disk\",\n    cx: number,\n    cy: number,\n    r: number,\n}\n\nexport interface PointDef {\n    shape: \"point\",\n    cx: number,\n    cy: number,\n}\n\n// TODO: shape doesn't really make sense here, needs to be restructured\nexport interface CenterOfMassParams {\n    shape: \"com\",\n    cx: number,\n    cy: number,\n    r: number,\n}\n\nexport interface PickFrameParams {\n    x: number,\n    y: number,\n}\n\nexport interface FFTSumFramesParams {\n    real_rad: number | null ,\n    real_centerx: number | null,\n    real_centery: number | null,\n}\n\nexport interface PickFFTFrameParams {\n    x: number,\n    y: number,\n    real_rad: number | null ,\n    real_centerx: number | null,\n    real_centery: number | null,\n}\nexport interface RadialFourierParams {\n    shape: \"radial_fourier\",\n    cx: number,\n    cy: number,\n    ri: number,\n    ro: number,\n    n_bins: number,\n    max_order: number\n}\n\nexport interface FFTParams{\n    rad_in:number,\n    rad_out:number,\n    real_rad: number | null ,\n    real_centerx: number | null,\n    real_centery: number | null,\n}\n\n\nexport type SumFrameParams = {} | {\n    roi: {\n        shape: \"disk\",\n        cx: number,\n        cy: number,\n        r: number,\n    }\n}\n\nexport enum AnalysisTypes {\n    APPLY_RING_MASK = \"APPLY_RING_MASK\",\n    APPLY_DISK_MASK = \"APPLY_DISK_MASK\",\n    APPLY_POINT_SELECTOR = \"APPLY_POINT_SELECTOR\",\n    CENTER_OF_MASS = \"CENTER_OF_MASS\",\n    SUM_FRAMES = \"SUM_FRAMES\",\n    SUM_FRAMES_ROI = \"SUM_FRAMES_ROI\",\n    PICK_FRAME = \"PICK_FRAME\",\n    PICK_FFT_FRAME = \"PICK_FFT_FRAME\",\n    APPLY_FFT_MASK = \"APPLY_FFT_MASK\",\n    FFTSUM_FRAMES = \"FFTSUM_FRAMES\",\n    RADIAL_FOURIER = \"RADIAL_FOURIER\",\n}\n\nexport interface RingMaskDetails {\n    type: AnalysisTypes.APPLY_RING_MASK,\n    parameters: MaskDefRing,\n    \n}\n\nexport interface FFTDetails {\n    type: AnalysisTypes.APPLY_FFT_MASK,\n    parameters: FFTParams,\n}\n\nexport interface DiskMaskDetails {\n    type: AnalysisTypes.APPLY_DISK_MASK,\n    parameters: MaskDefDisk,\n}\n\nexport interface PointDefDetails {\n    type: AnalysisTypes.APPLY_POINT_SELECTOR,\n    parameters: PointDef,\n}\n\nexport interface CenterOfMassDetails {\n    type: AnalysisTypes.CENTER_OF_MASS,\n    parameters: CenterOfMassParams,\n}\n\nexport interface SumFramesDetails {\n    type: AnalysisTypes.SUM_FRAMES,\n    parameters: SumFrameParams\n}\n\nexport interface FFTSumFramesDetails {\n    type: AnalysisTypes.FFTSUM_FRAMES,\n    parameters: FFTSumFramesParams,\n}\n\nexport interface PickFrameDetails {\n    type: AnalysisTypes.PICK_FRAME,\n    parameters: PickFrameParams,\n}\n\nexport interface PickFFTFrameDetails {\n    type: AnalysisTypes.PICK_FFT_FRAME,\n    parameters: PickFFTFrameParams,\n}\n\n\nexport type AnalysisParameters = MaskDefRing | MaskDefDisk | CenterOfMassParams | PointDef | PickFrameParams | RadialFourierParams | FFTParams | PickFFTFrameParams | FFTSumFramesParams;\nexport type AnalysisDetails = RingMaskDetails | DiskMaskDetails | CenterOfMassDetails | PointDefDetails | SumFramesDetails | PickFrameDetails | FFTDetails | RadialFourierDetails | FFTSumFramesDetails | PickFFTFrameDetails;\nexport interface RadialFourierDetails {\n    type: AnalysisTypes.RADIAL_FOURIER,\n    parameters: RadialFourierParams,\n}\n\nexport interface StartJobRequest {\n    job: {\n        dataset: string,\n        analysis: AnalysisDetails,\n    }\n}\n\nexport interface StartJobResponse {\n    status: \"ok\",\n    job: string,\n    details: MsgPartJob,\n}\n\nexport interface CancelJobResponse {\n    status: \"ok\",\n    job: string,\n}\n\n/*\n * fs browser \n */\n\n// some named place, i.e. \"Documents\", \"Home\", ...\nexport interface FSPlace {\n    title: string,\n    path: string,\n    key: string,\n}\n\nexport interface DirectoryListingDetails {\n    name: string,\n    size: number,\n    ctime: number,\n    mtime: number,\n    owner: string,\n}\n\nexport interface DirectoryListingResponseOK {\n    status: \"ok\",\n    path: string,\n    files: DirectoryListingDetails[],\n    dirs: DirectoryListingDetails[],\n    drives: string[],\n    places: FSPlace[],\n}\n\nexport interface DirectoryListingResponseError {\n    status: \"error\",\n    path: string,\n    code: string,\n    msg: string,\n    alternative?: string,\n}\n\nexport type DirectoryListingResponse = DirectoryListingResponseOK | DirectoryListingResponseError;\n","import { ActionsUnion, createAction } from \"../helpers/actionHelpers\";\nimport { DatasetFormParams, DirectoryListingDetails, FSPlace } from \"../messages\";\n\nexport enum ActionTypes {\n    LIST_DIRECTORY = 'BROWSER_LIST_DIRECTORY',\n    LIST_FULL_PATH = 'BROWSER_LIST_DIRECTORY_FULL',\n    DIRECTORY_LISTING = 'BROWSER_DIRECTORY_LISTING',\n    DETECT_PARAMS = 'BROWSER_DETECT_PARAMS',\n    PARAMS_DETECTED = 'BROWSER_PARAMS_DETECTED',\n    ERROR = 'BROWSER_ERROR',\n    OPEN = 'BROWSER_OPEN',\n    CANCEL = 'BROWSER_CANCEL',\n    SELECT = 'BROWSER_SELECT',\n    SELECT_FULL_PATH = 'BROWSER_SELECT_FULL_PATH',\n}\n\nexport const Actions = {\n    list: (path: string, name?: string) => createAction(ActionTypes.LIST_DIRECTORY, { path, name }),\n    dirListing: (path: string, dirs: DirectoryListingDetails[], files: DirectoryListingDetails[], drives: string[], places: FSPlace[]) => createAction(ActionTypes.DIRECTORY_LISTING, { path, dirs, files, drives, places }),\n    open: () => createAction(ActionTypes.OPEN),\n    cancel: () => createAction(ActionTypes.CANCEL),\n    select: (path: string, name: string) => createAction(ActionTypes.SELECT, { path, name }),\n    selectFullPath: (path: string) => createAction(ActionTypes.SELECT_FULL_PATH, { path }),\n    error: (msg: string, timestamp: number, id: string) => createAction(ActionTypes.ERROR, { msg, timestamp, id }),\n    detectParams: (path: string) => createAction(ActionTypes.DETECT_PARAMS, { path }),\n    paramsDetected: (path: string, params: DatasetFormParams) => createAction(ActionTypes.PARAMS_DETECTED, { path, params }),\n}\n\nexport type Actions = ActionsUnion<typeof Actions>;","import { FormikProps, withFormik } from \"formik\";\nimport * as React from \"react\";\nimport { Button, Form } from \"semantic-ui-react\";\nimport { ConfigState } from \"../../config/reducers\";\nimport { Omit } from \"../../helpers/types\";\nimport { ClusterTypes, ConnectRequestLocalCluster } from \"../../messages\";\n\ntype FormValues = Omit<ConnectRequestLocalCluster, \"type\">;\n\ninterface FormProps {\n    onSubmit: (params: ConnectRequestLocalCluster) => void,\n    config: ConfigState,\n}\n\ntype MergedProps = FormikProps<FormValues> & FormProps;\n\nconst LocalConnectionForm: React.SFC<MergedProps> = ({\n    values,\n    touched,\n    errors,\n    dirty,\n    isSubmitting,\n    handleChange,\n    handleBlur,\n    handleSubmit,\n    handleReset,\n}) => {\n    return (\n        <Form onSubmit={handleSubmit}>\n            <Form.Field>\n                <label htmlFor=\"numWorkers\">Number of Workers:</label>\n                <input type=\"number\" name=\"numWorkers\" value={values.numWorkers}\n                    onChange={handleChange}\n                    onBlur={handleBlur} />\n                {errors.numWorkers && touched.numWorkers && errors.numWorkers}\n            </Form.Field>\n            <Button primary={true} type=\"submit\" disabled={isSubmitting}>Connect</Button>\n        </Form>\n    )\n}\n\nexport default withFormik<FormProps, FormValues>({\n    mapPropsToValues: (ownProps: FormProps) => ({\n        numWorkers: ownProps.config.localCores,\n    }),\n    handleSubmit: (values, formikBag) => {\n        const { onSubmit } = formikBag.props;\n        onSubmit({\n            type: ClusterTypes.LOCAL,\n            ...values,\n        });\n    }\n})(LocalConnectionForm);\n","\nimport { FormikProps, withFormik } from \"formik\";\nimport * as React from \"react\";\nimport { Button, Form } from \"semantic-ui-react\";\nimport { Omit } from \"../../helpers/types\";\nimport { ClusterTypes, ConnectRequestTCP } from \"../../messages\";\n\ntype FormValues = Omit<ConnectRequestTCP, \"type\">;\n\ninterface FormProps {\n    onSubmit: (params: ConnectRequestTCP) => void,\n}\n\ntype MergedProps = FormikProps<FormValues> & FormProps;\n\nconst TCPConnectionForm: React.SFC<MergedProps> = ({\n    values,\n    touched,\n    errors,\n    dirty,\n    isSubmitting,\n    handleChange,\n    handleBlur,\n    handleSubmit,\n    handleReset,\n}) => {\n    return (\n        <Form onSubmit={handleSubmit}>\n            <Form.Field>\n                <label htmlFor=\"address\">Scheduler URI</label>\n                <input type=\"text\" name=\"address\" value={values.address}\n                    onChange={handleChange}\n                    onBlur={handleBlur} />\n                {errors.address && touched.address && errors.address}\n            </Form.Field>\n            <Button primary={true} type=\"submit\" disabled={isSubmitting}>Connect</Button>\n        </Form>\n    )\n}\n\nexport default withFormik<FormProps, FormValues>({\n    mapPropsToValues: () => ({\n        address: \"tcp://localhost:8786\",\n    }),\n    handleSubmit: (values, formikBag) => {\n        const { onSubmit } = formikBag.props;\n        onSubmit({\n            type: ClusterTypes.TCP,\n            ...values\n        });\n    }\n})(TCPConnectionForm);\n","\nimport * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Dropdown, DropdownProps, Segment } from \"semantic-ui-react\";\nimport * as clusterActions from \"../../cluster/actions\";\nimport { getEnumValues } from \"../../helpers\";\nimport { ClusterTypeMetadata, ClusterTypes, ConnectRequestParams } from \"../../messages\";\nimport { RootReducer } from \"../../store\";\nimport LocalConnectionForm from \"./LocalConnectionForm\";\nimport TCPConnectionForm from \"./TCPConnectionForm\";\n\n\nconst mapDispatchToProps = {\n    connectToCluster: clusterActions.Actions.connect,\n};\n\nconst mapStateToProps = (state: RootReducer) => {\n    return {\n        config: state.config,\n    }\n}\n\ntype MergedProps = DispatchProps<typeof mapDispatchToProps> & ReturnType<typeof mapStateToProps>;\n\nconst clusterTypeKeys = getEnumValues(ClusterTypes);\nconst clusterTypeOptions = clusterTypeKeys.map(t => ({\n    text: ClusterTypeMetadata[ClusterTypes[t]].label,\n    value: ClusterTypes[t],\n}));\n\ninterface ConnectionParamsState {\n    clusterType: ClusterTypes\n}\n\nclass ClusterConnectionForm extends React.Component<MergedProps, ConnectionParamsState> {\n    public state = {\n        clusterType: ClusterTypes.LOCAL,\n    }\n\n    public setType = (type: ClusterTypes) => {\n        this.setState({\n            clusterType: type,\n        });\n    }\n\n    public handleChange = (e: React.SyntheticEvent, data: DropdownProps) => {\n        const value = data.value as ClusterTypes;\n        this.setType(value);\n    }\n\n    public handleSubmit = (params: ConnectRequestParams) => {\n        this.props.connectToCluster(params);\n    }\n\n    public renderForm() {\n        const { clusterType } = this.state;\n        const { config } = this.props;\n\n        switch (clusterType) {\n            case ClusterTypes.LOCAL: {\n                return <LocalConnectionForm config={config} onSubmit={this.handleSubmit} />\n            }\n            case ClusterTypes.TCP: {\n                return <TCPConnectionForm onSubmit={this.handleSubmit} />\n            }\n        }\n    }\n\n    public render() {\n        return (\n            <>\n                <div>\n                    <Dropdown\n                        inline={true}\n                        options={clusterTypeOptions}\n                        value={this.state.clusterType}\n                        onChange={this.handleChange}\n                    />\n                </div>\n                <Segment>\n                    {this.renderForm()}\n                </Segment>\n            </>\n        )\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ClusterConnectionForm);","import * as React from 'react';\nimport { Icon, Message } from 'semantic-ui-react';\n\ninterface ChannelConnectingProps {\n    msg: string,\n}\n\nconst ChannelConnecting: React.SFC<ChannelConnectingProps> = ({ msg }) => (\n    <Message icon={true}>\n        <Icon name='cog' loading={true} />\n        <Message.Content>\n            <Message.Header>Connecting to LiberTEM</Message.Header>\n            {msg}\n        </Message.Content>\n    </Message>\n)\n\nexport default ChannelConnecting;","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport ClusterConnectionForm from \"../../cluster/components/ClusterConnectionForm\";\nimport { RootReducer } from \"../../store\";\nimport ChannelConnecting from \"./ChannelConnecting\";\n\nconst mapStateToProps = (state: RootReducer) => {\n    return {\n        channelStatus: state.channelStatus,\n        clusterConnection: state.clusterConnection,\n        haveConfig: state.config.haveConfig,\n    }\n}\n\n\ntype MergedProps = ReturnType<typeof mapStateToProps>;\n\nconst messages = {\n    waiting: \"Waiting...\",\n    connecting: \"Connecting...\",\n}\n\nconst clusterMessages = {\n    connected: \"Connected, waiting for initial state...\",\n    unknown: \"Connected, fetching cluster status...\",\n}\n\nconst ChannelStatus: React.SFC<MergedProps> = ({ haveConfig, children, channelStatus, clusterConnection }) => {\n    switch (channelStatus.status) {\n        case \"waiting\":\n        case \"connecting\": {\n            return <ChannelConnecting msg={messages[channelStatus.status]} />;\n        }\n        case \"connected\": {\n            if (!haveConfig) {\n                return <ChannelConnecting msg=\"waiting for configuration...\" />;\n            }\n            if (clusterConnection.status === \"disconnected\") {\n                return <ClusterConnectionForm />\n            } else if (clusterConnection.status === \"connected\") {\n                return <ChannelConnecting msg={clusterMessages.connected} />;\n            } else if (clusterConnection.status === \"unknown\") {\n                return <ChannelConnecting msg={clusterMessages.unknown} />;\n            }\n        }\n    }\n    return <>{children}</>;\n}\n\nexport default connect(mapStateToProps)(ChannelStatus);","import * as React from \"react\";\nimport { Icon, SemanticICONS } from \"semantic-ui-react\";\nimport { DirectoryListingDetails } from \"../../messages\";\n\n\ninterface FileBrowserEntryProps {\n    style: object,\n    details: DirectoryListingDetails,\n    onClick?: () => void,\n    icon?: SemanticICONS,\n}\n\ninterface TimeStampProps {\n    ts: number,\n}\n\nexport const TimeStamp: React.SFC<TimeStampProps> = ({ ts }) => {\n    const date = new Date(ts * 1000);\n    const fmtDate = date.toLocaleDateString();\n    const fmtTime = date.toLocaleTimeString();\n    const title = `${fmtDate} ${fmtTime}`;\n    return (\n        <div style={{ display: \"flex\", whiteSpace: \"nowrap\" }} title={title}>\n            <div style={{ width: \"50%\", marginRight: \"10px\" }}>{fmtDate}</div>\n            <div style={{ width: \"45%\" }}>{fmtTime}</div>\n        </div>\n    )\n}\n\n// adapted from https://stackoverflow.com/a/14919494/540644\nfunction humanFileSize(bytes: number, si: boolean = false) {\n    const thresh = si ? 1000 : 1024;\n    if (Math.abs(bytes) < thresh) {\n        return {\n            size: bytes,\n            unit: 'B',\n        }\n    }\n    const units = si\n        ? ['kB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB']\n        : ['KiB', 'MiB', 'GiB', 'TiB', 'PiB', 'EiB', 'ZiB', 'YiB'];\n    let u = -1;\n    do {\n        bytes /= thresh;\n        ++u;\n    } while (Math.abs(bytes) >= thresh && u < units.length - 1);\n\n    return {\n        size: bytes.toFixed(1),\n        unit: units[u],\n    }\n}\n\ninterface FileSizeProps {\n    size: number,\n    si?: boolean,\n}\n\nexport const FileSize: React.SFC<FileSizeProps> = ({ size, si }) => {\n    const fmtSize = humanFileSize(size, si)\n    return (\n        <div style={{ textAlign: \"right\" }}>\n            {fmtSize.size} {fmtSize.unit}\n        </div>\n    );\n}\n\nexport const Cell: React.SFC<{ title?: string }> = ({ children, title }) => {\n    const styles: React.CSSProperties = {\n        whiteSpace: \"nowrap\",\n        overflow: \"hidden\",\n        textOverflow: \"ellipsis\",\n        marginRight: \"10px\",\n    }\n    return (\n        <div style={styles} title={title}>{children}</div>\n    );\n}\n\n\nclass FileBrowserEntry extends React.Component<FileBrowserEntryProps> {\n    public onClick = (e: React.MouseEvent) => {\n        const { onClick } = this.props;\n        if (onClick) {\n            onClick();\n        }\n    }\n\n    public render() {\n        const { details, style, icon } = this.props;\n        const myStyle: React.CSSProperties = {\n            cursor: \"pointer\",\n            ...style,\n        };\n\n        const tsStyles: React.CSSProperties = {\n            textAlign: \"right\",\n        };\n\n        return (\n            <div onClick={this.onClick} style={myStyle}>\n                <div style={{ display: \"flex\", paddingRight: \"10px\" }}>\n                    <div style={{ width: \"20%\", flexGrow: 1 }}>\n                        <Cell title={details.name}>\n                            {icon && <Icon name={icon} />}\n                            {details.name}\n                        </Cell>\n                    </div>\n                    <div style={{ width: \"10%\" }}><Cell><FileSize size={details.size} si={false} /></Cell></div>\n                    <div style={{ width: \"10%\" }}><Cell>{details.owner}</Cell></div>\n                    <div style={{ width: \"18%\", ...tsStyles }}>\n                        <Cell><TimeStamp ts={details.ctime} /></Cell>\n                    </div>\n                    <div style={{ width: \"18%\", ...tsStyles }}>\n                        <Cell><TimeStamp ts={details.mtime} /></Cell>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default FileBrowserEntry;","import * as React from \"react\";\nimport { Cell } from \"./FileBrowserEntry\";\n\nconst FileBrowserHeader: React.SFC = () => {\n    const alignRight: React.CSSProperties = {\n        textAlign: \"right\",\n    };\n\n    // ugly hack: padding-right to compensate for scrollbar size\n    return (\n        <div style={{ paddingRight: \"20px\", paddingBottom: \"10px\" }}>\n            <div style={{ display: \"flex\" }}>\n                <div style={{ width: \"20%\", flexGrow: 1 }}>\n                    <Cell>Name</Cell>\n                </div>\n                <div style={{ width: \"10%\", ...alignRight }}>\n                    <Cell>Size</Cell>\n                </div>\n                <div style={{ width: \"10%\" }}>\n                    <Cell>Owner</Cell>\n                </div>\n                <div style={{ width: \"18%\", ...alignRight }}>\n                    <Cell>Created</Cell>\n                </div>\n                <div style={{ width: \"18%\", ...alignRight }}>\n                    <Cell>Modified</Cell>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default FileBrowserHeader;","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { DirectoryListingDetails } from \"../../messages\";\nimport * as browserActions from '../actions';\nimport FileBrowserEntry from \"./FileBrowserEntry\";\n\ninterface FileEntryProps {\n    path: string,\n    style: object,\n    details: DirectoryListingDetails,\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch, ownProps: FileEntryProps) => {\n    return {\n        select: () => dispatch(browserActions.Actions.select(ownProps.path, ownProps.details.name)),\n    };\n}\n\ntype MergedProps = FileEntryProps & ReturnType<typeof mapDispatchToProps>;\n\nclass FileEntry extends React.Component<MergedProps> {\n    public render() {\n        const { details, style, select } = this.props;\n\n        return (\n            <FileBrowserEntry onClick={select} style={style} details={details}\n                icon=\"file outline\" />\n        )\n    }\n}\n\nexport default connect(null, mapDispatchToProps)(FileEntry);","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { DirectoryListingDetails } from \"../../messages\";\nimport * as browserActions from '../actions';\nimport FileBrowserEntry from \"./FileBrowserEntry\";\n\nconst mapDispatchToProps = (dispatch: Dispatch, ownProps: FolderEntryProps) => {\n    return {\n        list: () => {\n            dispatch(browserActions.Actions.list(ownProps.path, ownProps.details.name));\n            window.setTimeout(() => ownProps.onChange(), 0);\n        },\n    };\n}\n\ninterface FolderEntryProps {\n    path: string,\n    style: object,\n    details: DirectoryListingDetails,\n    onChange: () => void,\n}\n\ntype MergedProps = FolderEntryProps & ReturnType<typeof mapDispatchToProps>;\n\nconst FolderEntry: React.SFC<MergedProps> = ({ list, details, style, onChange }) => {\n    return (\n        <FileBrowserEntry onClick={list} style={style} details={details} icon=\"folder\" />\n    )\n}\n\nexport default connect(null, mapDispatchToProps)(FolderEntry);\n","import * as React from 'react';\nimport { connect } from \"react-redux\";\nimport { Dispatch } from 'redux';\nimport { Dropdown, DropdownItemProps } from \"semantic-ui-react\";\nimport * as browserActions from '../actions';\n\nconst mapDispatchToProps = (dispatch: Dispatch, ownProps: DropdownItemProps) => {\n    return {\n        list: () => {\n            if (ownProps.value !== undefined) {\n                dispatch(browserActions.Actions.list(ownProps.value.toString()));\n                window.setTimeout(() => ownProps.onChange(), 0);\n            }\n        },\n    };\n}\n\ntype MergedProps = ReturnType<typeof mapDispatchToProps> & DropdownItemProps & {\n    onChange: () => void,\n};\n\nconst PathDropDownItem: React.SFC<MergedProps> = ({ list, ...props }) => {\n    const newProps = {\n        onClick: list,\n        ...props,\n    }\n    return <Dropdown.Item {...newProps} />;\n}\n\nexport default connect(null, mapDispatchToProps)(PathDropDownItem);","import { FormikProps, withFormik } from \"formik\";\nimport * as React from \"react\";\nimport { Form, Input } from \"semantic-ui-react\";\n\ninterface FormValues {\n    path: string,\n}\n\ninterface PathInputProps {\n    onChange: (path: string) => void,\n    initialPath: string,\n}\n\ntype MergedProps = FormikProps<FormValues> & PathInputProps;\n\nconst PathInput: React.SFC<MergedProps> = ({\n    values,\n    touched,\n    errors,\n    dirty,\n    isSubmitting,\n    handleChange,\n    handleBlur,\n    handleSubmit,\n    handleReset,\n}) => {\n    return (\n        <Form onSubmit={handleSubmit} style={{ flexGrow: 1 }}>\n            <Form.Field>\n                <Input autoComplete=\"off\" onBlur={handleBlur} onChange={handleChange} value={values.path} name=\"path\" />\n            </Form.Field>\n        </Form>\n    )\n}\n\nexport default withFormik<PathInputProps, FormValues>({\n    mapPropsToValues: ({ initialPath }) => ({\n        path: initialPath,\n    }),\n    handleSubmit: (values, formikBag) => {\n        const { onChange } = formikBag.props;\n        onChange(values.path);\n    },\n    enableReinitialize: true,\n})(PathInput);","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { Dropdown, DropdownItemProps } from \"semantic-ui-react\";\nimport { DatasetTypes } from \"../../messages\";\nimport { RootReducer } from \"../../store\";\nimport * as browserActions from '../actions';\n\n\ntype DropdownOptions = Array<{\n    text: string,\n    value: {\n        type: DatasetTypes,\n        path: string,\n    },\n}>;\n\nconst mapStateToProps = (state: RootReducer) => {\n    return {\n        lastOpened: state.config.lastOpened,\n        fileHistory: state.config.fileHistory,\n        separator: state.config.separator,\n    };\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch) => {\n    return {\n        select: (path: string) => dispatch(browserActions.Actions.selectFullPath(path)),\n    };\n}\n\ntype MergedProps = ReturnType<typeof mapStateToProps> & ReturnType<typeof mapDispatchToProps>;\n\nconst RecentFiles: React.SFC<MergedProps> = ({ lastOpened, fileHistory, select }) => {\n\n    const recentFiles: DropdownOptions = fileHistory.filter((path: string) => lastOpened[path]).map((path: string) => {\n        const item = lastOpened[path];\n        return {\n            text: item.path,\n            value: {\n                type: item.type,\n                path: item.path,\n            },\n        };\n    });\n\n    const onClick = (e: React.MouseEvent<HTMLDivElement>, data: DropdownItemProps) => data.value && select(data.value.toString())\n\n    return (\n        <Dropdown item={true} text=\"Recent\" floating={true}>\n            <Dropdown.Menu>\n                <Dropdown.Header content=\"recent datasets\" />\n                {recentFiles.map((option, idx) => (\n                    <Dropdown.Item key={idx} value={option.value.path} content={option.text} onClick={onClick} />\n                ))}\n            </Dropdown.Menu>\n        </Dropdown>\n    );\n}\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(RecentFiles);","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { Dropdown, Menu } from \"semantic-ui-react\";\nimport * as browserActions from '../actions';\nimport { FSPlaces } from \"../types\";\nimport PathDropDownItem from \"./PathDropDownItem\";\nimport PathInput from \"./PathInput\";\nimport RecentFiles from \"./RecentFiles\";\n\nconst mapDispatchToProps = (dispatch: Dispatch, ownProps: PathBarProps) => {\n    return {\n        refresh: () => {\n            dispatch(browserActions.Actions.list(ownProps.currentPath));\n            window.setTimeout(() => ownProps.onChange(), 0);\n        },\n        handleInputChange: (path: string) => {\n            dispatch(browserActions.Actions.list(path));\n            window.setTimeout(() => ownProps.onChange(), 0);\n        },\n        goUp: () => {\n            dispatch(browserActions.Actions.list(ownProps.currentPath, '..'));\n            window.setTimeout(() => ownProps.onChange(), 0);\n        },\n    };\n}\n\ninterface PathBarProps {\n    currentPath: string,\n    onChange: () => void,\n    drives: string[],\n    places: FSPlaces,\n}\n\ntype MergedProps = ReturnType<typeof mapDispatchToProps> & PathBarProps;\n\nconst PathBar: React.SFC<MergedProps> = ({ currentPath, drives, places, onChange, refresh, goUp, handleInputChange }) => {\n    const driveOptions = drives.map((path) => ({ key: path, text: path }));\n    const placeOptions = Object.keys(places).map((key) => ({ key: places[key].path, text: places[key].title }))\n    return (\n        <Menu>\n            <RecentFiles />\n            <Dropdown text=\"Go to...\" floating={true} item={true}>\n                <Dropdown.Menu>\n                    <Dropdown.Header content=\"Drives\" />\n                    {driveOptions.map((option) => {\n                        return <PathDropDownItem key={option.key} value={option.key} content={option.text} onChange={onChange} />\n                    })}\n                    <Dropdown.Header content=\"Places\" />\n                    {placeOptions.map((option) => {\n                        return <PathDropDownItem key={option.key} value={option.key} content={option.text} onChange={onChange} />\n                    })}\n                </Dropdown.Menu>\n            </Dropdown>\n            <Menu.Item icon=\"arrow up\" onClick={goUp} />\n            <Menu.Item style={{ flexGrow: 1 }}>\n                <PathInput onChange={handleInputChange} initialPath={currentPath} />\n            </Menu.Item>\n            <Menu.Item icon=\"refresh\" onClick={refresh} />\n        </Menu>\n    );\n}\n\n\nexport default connect(null, mapDispatchToProps)(PathBar);","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { FixedSizeList as List } from \"react-window\";\nimport { Dispatch } from \"redux\";\nimport { Button, Header, Segment } from \"semantic-ui-react\";\nimport { DirectoryListingDetails } from \"../../messages\";\nimport { RootReducer } from \"../../store\";\nimport * as browserActions from '../actions';\nimport FileBrowserHeader from \"./FileBrowserHeader\";\nimport FileEntry from \"./FileEntry\";\nimport FolderEntry from \"./FolderEntry\";\nimport PathBar from \"./PathBar\";\n\nconst mapStateToProps = (state: RootReducer) => {\n    const { browser } = state;\n    return {\n        files: browser.files,\n        dirs: browser.dirs,\n        path: browser.path,\n        drives: browser.drives,\n        places: browser.places,\n        isLoading: browser.isLoading,\n    };\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch) => {\n    return {\n        cancel: () => dispatch(browserActions.Actions.cancel()),\n    };\n}\n\ntype MergedProps = ReturnType<typeof mapStateToProps> & ReturnType<typeof mapDispatchToProps>;\n\ninterface EntryFnArgs {\n    index: number,\n    style: object\n}\ntype EntryFn = (arg: EntryFnArgs) => void\n\nconst listRef = React.createRef<List>();\n\nconst scrollToTop = () => {\n    if (listRef.current === null) {\n        return;\n    }\n    listRef.current.scrollToItem(0);\n}\n\nfunction sortByKey<T extends object>(array: T[], getKey: (item: T) => any) {\n    return array.sort((a, b) => {\n        const x = getKey(a);\n        const y = getKey(b);\n        return ((x < y) ? -1 : ((x > y) ? 1 : 0));\n    });\n}\n\nconst FileBrowser: React.SFC<MergedProps> = ({ files, dirs, path, drives, places, cancel, isLoading }) => {\n    const getSortKey = (item: DirectoryListingDetails) => item.name.toLowerCase();\n    const dirEntries = sortByKey(dirs, getSortKey).map((dir) => (style: object) => <FolderEntry style={style} onChange={scrollToTop} path={path} details={dir} />);\n    const fileEntries = sortByKey(files, getSortKey).map((f) => ((style: object) => <FileEntry style={style} path={path} details={f} />));\n    const entries = dirEntries.concat(fileEntries);\n\n    const cellFn: EntryFn = ({ index, style }) => {\n        return entries[index](style)\n    }\n\n    let list = (\n        <List style={{ overflowY: \"scroll\" }} ref={listRef} height={300} width=\"100%\" itemCount={entries.length} itemSize={35}>\n            {cellFn}\n        </List>\n    );\n\n    if (isLoading) {\n        // FIXME: hardcoded height\n        list = (\n            <Segment loading={true} style={{ height: \"300px\" }} />\n        )\n    }\n\n    return (\n        <Segment.Group>\n            <Segment>\n                <Header as=\"h2\">Open dataset</Header>\n            </Segment>\n            <Segment>\n                <PathBar currentPath={path} drives={drives} places={places} onChange={scrollToTop} />\n            </Segment>\n            <Segment>\n                <FileBrowserHeader />\n                {list}\n            </Segment>\n            <Segment>\n                <Button onClick={cancel}>Cancel</Button>\n            </Segment>\n        </Segment.Group>\n    );\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(FileBrowser);","\nexport interface JobResultType {\n    imageURL: string,\n    description: { title: string, desc: string },\n}\n\nexport enum JobRunning {\n    CREATING = 'CREATING',\n    RUNNING = 'RUNNING',\n    DONE = 'DONE',\n}\n\nexport enum JobStatus {\n    CREATING = 'CREATING',\n    IN_PROGRESS = 'IN_PROGRESS',\n    CANCELLED = 'CANCELLED',\n    SUCCESS = 'SUCCESS',\n    ERROR = 'ERROR',\n}\n\nexport interface JobStateCommon {\n    id: string,\n    dataset: string,\n    status: JobStatus,\n    startTimestamp: number,\n    results: JobResultType[],\n}\n\nexport type JobStateStart = JobStateCommon & {\n    running: JobRunning.CREATING | JobRunning.RUNNING,\n}\n\nexport type JobStateDone = JobStateCommon & {\n    running: JobRunning.DONE,\n    endTimestamp: number,\n}\n\nexport type JobState = JobStateStart | JobStateDone;","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Button, Icon } from \"semantic-ui-react\";\nimport { RootReducer } from \"../../store\";\nimport * as browserActions from '../actions';\nimport FileBrowser from \"./FileBrowser\";\n\nexport const mapStateToProps = (state: RootReducer) => {\n    return {\n        isOpen: state.browser.isOpen,\n    }\n}\n\nexport const mapDispatchToProps = {\n    open: browserActions.Actions.open,\n}\n\ntype MergedProps = ReturnType<typeof mapStateToProps> & DispatchProps<typeof mapDispatchToProps>;\n\nconst BrowserWrapper: React.SFC<MergedProps> = ({ isOpen, open }) => {\n    if (!isOpen) {\n        return (\n            <Button icon={true} labelPosition=\"left\" onClick={open}>\n                <Icon name='add' />\n                Browse\n            </Button>\n        );\n    }\n    return (\n        <FileBrowser />\n    );\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(BrowserWrapper)","import * as React from \"react\";\nimport { Icon } from \"semantic-ui-react\";\n\nconst BusySpinner: React.SFC = () => {\n    const styles: React.CSSProperties = {\n        margin: 0,\n        padding: 0,\n        position: \"absolute\",\n        bottom: \"10px\",\n        right: \"10px\",\n        color: \"white\",\n        opacity: 0.7,\n        filter: \"drop-shadow(0 0 3px #000)\",\n    };\n    return (\n        <Icon name=\"cog\" loading={true} style={styles} />\n    )\n}\n\nexport default BusySpinner;","import * as React from \"react\";\nimport BusySpinner from \"./BusySpinner\";\n\ninterface BusyWrapperProps {\n    busy: boolean,\n}\n\nconst BusyWrapper: React.SFC<BusyWrapperProps> = ({ children, busy }) => {\n    const styles: React.CSSProperties = {\n        position: \"relative\",\n    };\n    return (\n        <div style={styles}>\n            {children}\n            {busy && <BusySpinner />}\n        </div>\n    )\n}\n\nexport default BusyWrapper;","import * as React from \"react\";\nimport { DraggableHandle } from \"./DraggableHandle\";\nimport { HandleRenderFunction } from \"./types\";\n\nexport interface HandleParentProps {\n    width: number,\n    height: number,\n    onKeyboardEvent?: React.KeyboardEventHandler<SVGElement>,\n    handles: HandleRenderFunction[],\n}\n\nexport class HandleParent extends React.Component<HandleParentProps> {\n    public currentHandle: DraggableHandle | undefined;\n\n    public handleDragStart = (h: DraggableHandle): void => {\n        this.currentHandle = h;\n    }\n\n    public handleDrop = (): void => {\n        this.currentHandle = undefined;\n    }\n\n    public handleMouseMove = (e: React.MouseEvent<SVGElement>): void => {\n        if (this.currentHandle) {\n            return this.currentHandle.externalMouseMove(e);\n        }\n    }\n\n    public handleMouseLeave = (e: React.MouseEvent<SVGElement>): void => {\n        if (this.currentHandle) {\n            this.currentHandle.externalLeave(e);\n        }\n    }\n\n    public handleMouseUp = (e: React.MouseEvent<SVGElement>): void => {\n        if (this.currentHandle) {\n            this.currentHandle.externalMouseUp(e);\n        }\n    }\n\n    public render() {\n        const { width, height } = this.props;\n        const styles = {\n            outline: \"1px dashed black\"\n        }\n        return (\n            <g\n                onMouseMove={this.handleMouseMove}\n                onMouseLeave={this.handleMouseLeave}\n                onMouseUp={this.handleMouseUp}\n                onKeyDown={this.props.onKeyboardEvent}\n                style={styles}\n                tabIndex={0}\n            >\n                <rect style={{ fill: \"transparent\" }}\n                    x={0} y={0} width={width} height={height}\n                />\n                {this.renderHandles()}\n            </g>\n        );\n    }\n\n    public renderHandles() {\n        const { handles, onKeyboardEvent } = this.props;\n        // we need to inform the handle when there are move/up/leave events\n        // on this parent element, for which we need to know the current handle.\n        // so we pass the handle a dragstart/drop function and kindly ask it\n        // to call us if it starts to be dragged or is dropped.\n        return handles.map((h, i) => {\n            const elem = h(this.handleDragStart, this.handleDrop, onKeyboardEvent);\n            if (React.isValidElement(elem)) {\n                return React.cloneElement(elem, { key: i });\n            }\n        });\n    }\n}\n\nexport default HandleParent;","import * as React from \"react\";\nimport { JobState } from \"../types\";\nimport styles from \"./ResultImage.module.css\";\n\ninterface ResultImageProps {\n    job: JobState,\n    idx: number,\n    width: number,\n    height: number,\n}\n\nconst ResultImage: React.SFC<ResultImageProps> = ({ job, idx, width, height }) => {\n    const result = job.results[idx];\n    if (result === undefined) {\n        return (\n            <svg className={styles.fallback} width={width} height={height} viewBox={`0 0 ${width} ${height}`} key={-1} />\n        )\n    }\n    return (\n        <image className={styles.default} xlinkHref={result.imageURL} width={width} height={height} />\n    );\n}\n\nexport default ResultImage;","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport styled from 'styled-components';\nimport { AnalysisState } from \"../../analysis/types\";\nimport { DatasetState } from \"../../messages\";\nimport BusyWrapper from \"../../widgets/BusyWrapper\";\nimport HandleParent from \"../../widgets/HandleParent\";\nimport { HandleRenderFunction } from \"../../widgets/types\";\nimport { JobRunning, JobState } from \"../types\";\nimport ResultImage from \"./ResultImage\";\n\ninterface ResultProps {\n    width: number,\n    height: number,\n    job: JobState,\n    dataset: DatasetState,\n    analysis: AnalysisState,\n    extraHandles?: HandleRenderFunction,\n    extraWidgets?: React.ReactElement<SVGElement>,\n    idx: number,\n    jobIndex: number,\n}\n\nconst ResultWrapper = styled.svg`\n    display: block;\n    border: 1px solid black;\n    width: 100%;\n    height: auto;\n`;\n\ntype MergedProps = ResultProps;\n\nclass Result extends React.Component<MergedProps> {\n    public renderHandles() {\n        const { width, height, extraHandles } = this.props;\n        let handles: HandleRenderFunction[] = [];\n        if (extraHandles) {\n            handles = [...handles, extraHandles];\n        }\n\n        return (\n            <HandleParent width={width} height={height} handles={handles} />\n        )\n    }\n\n    public render() {\n        const { job, idx, width, height, extraWidgets } = this.props;\n        const busy = job.running !== JobRunning.DONE;\n\n        return (\n            <BusyWrapper busy={busy}>\n                <ResultWrapper width={width} height={height} viewBox={`0 0 ${width} ${height}`}>\n                    <ResultImage job={job} idx={idx} width={width} height={height} />\n                    {extraWidgets}\n                    {this.renderHandles()}\n                </ResultWrapper>\n            </BusyWrapper>\n        );\n    }\n};\n\nexport default connect(null, null)(Result);","import styled from 'styled-components';\n\n\nconst Selectors = styled.div`\n    display: flex;\n    & > * {\n        margin-right: 10px;\n    }\n`;\n\n\n\nexport default Selectors;","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Dropdown, DropdownProps } from \"semantic-ui-react\";\nimport { RootReducer } from \"../../store\";\nimport { HandleRenderFunction } from \"../../widgets/types\";\nimport { JobRunning, JobState } from \"../types\";\nimport Result from \"./Result\";\nimport Selectors from \"./Selectors\";\n\ninterface ResultListProps {\n    width: number,\n    height: number,\n    selectors?: React.ReactElement<any>,\n    extraHandles?: HandleRenderFunction,\n    extraWidgets?: React.ReactElement<SVGElement>,\n    subtitle?: React.ReactNode,\n}\n\ninterface ExternalResultListProps {\n    analysis: string,\n    jobIndex: number,\n}\n\nconst mapStateToProps = (state: RootReducer, ownProps: ExternalResultListProps) => {\n    const analysis = state.analyses.byId[ownProps.analysis];\n    const jobId = analysis.jobs[ownProps.jobIndex];\n    const job = jobId ? state.jobs.byId[jobId] : undefined;\n    const ds = job ? state.datasets.byId[job.dataset] : undefined;\n\n    return {\n        currentJob: job,\n        jobsById: state.jobs.byId,\n        analysis,\n        dataset: ds,\n        jobIndex: ownProps.jobIndex,\n    };\n};\n\ntype MergedProps = ResultListProps & ReturnType<typeof mapStateToProps>;\n\ninterface ResultListState {\n    selectedChannel: number,\n}\n\nclass ResultList extends React.Component<MergedProps, ResultListState> {\n    public state: ResultListState = { selectedChannel: 0 };\n\n    public selectChannel = (e: React.SyntheticEvent, data: DropdownProps) => {\n        const value = data.value as number;\n        this.setState({ selectedChannel: value });\n    }\n\n    public getJob = () => {\n        const { currentJob, analysis, jobsById, jobIndex } = this.props;\n        if (!currentJob) {\n            return;\n        }\n        if (currentJob.results.length > 0) {\n            return currentJob;\n        }\n        const history = analysis.jobHistory[jobIndex];\n\n        if (history === undefined) {\n            return;\n        }\n        for (const tmpJobId of history) {\n            const tmpJob = jobsById[tmpJobId];\n            if (tmpJob.results.length > 0) {\n                return tmpJob;\n            }\n        }\n        return;\n    }\n\n    public render() {\n        const {\n            selectors, analysis, dataset, children, width, height, jobIndex,\n            extraHandles, extraWidgets, subtitle,\n        } = this.props;\n        let msg;\n        let currentResult = (\n            // placeholder:\n            <svg style={{ display: \"block\", border: \"1px solid black\", width: \"100%\", height: \"auto\" }} width={width} height={height} viewBox={`0 0 ${width} ${height}`} key={-1} />\n        );\n        const job = this.getJob();\n        if (!job || !dataset) {\n            msg = <>&nbsp;</>;\n        } else {\n            currentResult = (\n                <Result analysis={analysis} job={job} dataset={dataset}\n                    extraHandles={extraHandles}\n                    extraWidgets={extraWidgets}\n                    width={width} height={height}\n                    jobIndex={jobIndex}\n                    idx={this.state.selectedChannel}\n                />\n            );\n            if (job.running === JobRunning.DONE) {\n                const dt = (job.endTimestamp - job.startTimestamp) / 1000;\n                msg = <>Analysis done in {dt.toFixed(3)}s</>;\n            } else {\n                msg = <>Analysis running...</>;\n            }\n        }\n        return (\n            <div>\n                {currentResult}\n                {children}\n                <Selectors>\n                    <ResultImageSelector job={job} handleChange={this.selectChannel} selectedImg={this.state.selectedChannel} />\n                    {selectors}\n                </Selectors>\n                <p>{subtitle} {msg}</p>\n            </div>\n        );\n    }\n}\n\ninterface ImageSelectorProps {\n    job?: JobState,\n    handleChange: (e: React.SyntheticEvent, data: DropdownProps) => void,\n    selectedImg: number,\n}\n\nconst ResultImageSelector: React.SFC<ImageSelectorProps> = ({ job, handleChange, selectedImg }) => {\n    if (!job) {\n        return null;\n    }\n    const availableImages = job.results.map((result, idx) => ({ text: result.description.title, value: idx }));\n    return (\n        <>\n            <div>\n                Channel:{' '}\n                <Dropdown\n                    inline={true}\n                    options={availableImages}\n                    value={selectedImg}\n                    onChange={handleChange}\n                />\n            </div>\n        </>\n    )\n}\n\n\nexport default connect(mapStateToProps)(ResultList);\n","export const inRectConstraint = (width: number, height: number) => (p: Point2D) => {\n    return {\n        x: Math.max(0, Math.min(width - 1, p.x)),\n        y: Math.max(0, Math.min(height - 1, p.y)),\n    }\n}\n\nexport const dist = (cx: number, cy: number, x: number, y: number) => {\n    const dx = cx - x;\n    const dy = cy - y;\n    return Math.sqrt(dx * dx + dy * dy);\n}\n\nexport const cbToRadius = (cx: number, cy: number, cb: ((r: number) => void) | undefined) => (x: number, y: number) => cb && cb(dist(cx, cy, x, y))\n\nexport const keepOnCY = (cy: number) => (p: Point2D) => {\n    return {\n        x: p.x,\n        y: cy,\n    }\n}\n\nexport const keepXLargerThan = (otherX: number) => (p: Point2D) => {\n    return {\n        x: otherX > p.x ? otherX : p.x,\n        y: p.y,\n    }\n}\n\nexport const keepXSmallerThan = (otherX: number) => (p: Point2D) => {\n    return {\n        x: otherX < p.x ? otherX : p.x,\n        y: p.y,\n    }\n}\n\nexport const riConstraint = (outerPos: number, cy: number) => (p: Point2D) => {\n    return keepXLargerThan(outerPos)(\n        keepOnCY(cy)(p)\n    );\n}\n\nexport const roConstraints = (innerPos: number, cy: number) => (p: Point2D) => {\n    return keepXSmallerThan(innerPos)(\n        keepOnCY(cy)(p)\n    );\n}","import { CSSProperties } from \"react\";\n\nexport const defaultMaskStyles = (imageWidth: number): CSSProperties => ({\n    fillOpacity: 0.3,\n    fill: \"red\",\n    strokeOpacity: 0.7,\n    stroke: \"red\",\n    strokeWidth: imageWidth / 128 / 3,\n});","import * as React from \"react\";\nimport { defaultMaskStyles } from \"./styles\";\n\nexport interface DiskProps {\n    imageWidth: number,\n    imageHeight: number,\n    cx: number,\n    cy: number,\n    r: number,\n}\n\nconst Disk: React.SFC<DiskProps> = ({ imageWidth, imageHeight, cx, cy, r }) => {\n    return (\n        <circle cx={cx + .5} cy={cy + .5} r={r} style={{ ...defaultMaskStyles(imageWidth) }} />\n    );\n}\n\nexport default Disk;","export type ModifyCoords = ((x: number, y: number) => ({ x: number, y: number }));\n\n/**\n * Call this function whenever a keyboard event happens. The keyboard event is then translated\n * to a coordinate transformation, which is passed to the update callback. The update callback is\n * only called if relevant keys were pressed (example: arrow keys).\n * \n * @param e keyboard event\n * @param update a callback to handle coordinate updates\n */\nexport const handleKeyEvent = (e: React.KeyboardEvent<SVGElement>, update: (fn: ModifyCoords) => void) => {\n    let delta = 1;\n    if (e.shiftKey) {\n        delta = 10;\n    }\n    switch (e.key) {\n        case \"ArrowUp\":\n            update((x: number, y: number) => ({ x, y: y - delta }));\n            break;\n        case \"ArrowDown\":\n            update((x: number, y: number) => ({ x, y: y + delta }));\n            break;\n        case \"ArrowLeft\":\n            update((x: number, y: number) => ({ x: x - delta, y }));\n            break;\n        case \"ArrowRight\":\n            update((x: number, y: number) => ({ x: x + delta, y }));\n            break;\n        default:\n            return;\n    }\n    e.preventDefault();\n}\n","import * as React from \"react\";\nimport styled from 'styled-components';\nimport { handleKeyEvent, ModifyCoords } from \"./kbdHandler\";\n\nexport type HandleProps = {\n    x: number,\n    y: number,\n    scale: number,\n    withCross?: boolean,\n    focusRef: React.RefObject<SVGGElement>,\n} & React.SVGProps<SVGGElement>;\n\nconst StyledCircle = styled.circle`\n    stroke: red;\n    stroke-width: 1;\n    fill: transparent;\n    g:focus > & {\n        stroke: lightgreen;\n    }\n`;\n\nconst Cross = styled.path`\n    stroke: red;\n    stroke-width: 1;\n    fill: transparent;\n    g:focus > & {\n        stroke: lightgreen;\n    }\n`;\n\nconst FocusGroup = styled.g`\n    &:focus { outline: none; }\n`;\n\nconst Handle: React.SFC<HandleProps> = ({ scale, x, y, withCross, focusRef, ...args }) => {\n    const r = 3;\n    // scaleMatrix is needed to set the origin of the scale\n    const scaleMatrix = `matrix(${scale}, 0, 0, ${scale}, ${x - scale * x}, ${y - scale * y})`;\n    const style: React.CSSProperties = { transform: scaleMatrix };\n    const crossSpec = `\n        M${x - r / 2} ${y} L ${x + r / 2} ${y}\n        M${x} ${y - r / 2} L ${x} ${y + r / 2}\n    `;\n    const cross = withCross ? <Cross d={crossSpec} style={style} /> : null;\n    return (\n        <FocusGroup {...args} ref={focusRef}>\n            <StyledCircle cx={x} cy={y} r={r} style={style} />\n            {cross}\n        </FocusGroup>\n    )\n}\n\nexport interface DraggableHandleProps {\n    x: number,\n    y: number,\n    withCross?: boolean,\n    imageWidth?: number,\n    onDragMove?: (x: number, y: number) => void,\n    parentOnDragStart: (h: DraggableHandle) => void,\n    parentOnDrop: (x: number, y: number) => void,\n    onKeyboardEvent?: (e: React.KeyboardEvent<SVGElement>) => void,\n    constraint?: (p: Point2D) => Point2D,\n}\n\nexport function getScalingFactor(elem: SVGElement): number {\n    const svg = elem.ownerSVGElement;\n    if (svg === null) {\n        throw new Error(\"no owner SVG element?\");\n    }\n    const inWidthAttr = svg.getAttribute(\"width\");\n    if (inWidthAttr === null) {\n        throw new Error(\"no width on SVG element?\");\n    }\n    const inWidth = +inWidthAttr;\n    const svgMeasurements = svg.getBoundingClientRect();\n    return svgMeasurements.width / inWidth;\n}\n\nfunction relativeCoords(e: React.MouseEvent, parent: SVGElement) {\n    const f = getScalingFactor(parent);\n    const parentPos = parent.getBoundingClientRect();\n    const res = {\n        x: (e.pageX - (parentPos.left + window.pageXOffset)) / f,\n        y: (e.pageY - (parentPos.top + window.pageYOffset)) / f,\n    }\n    return res;\n}\n\n/**\n * stateful draggable handle, to be used as part of <svg/>\n */\nexport class DraggableHandle extends React.Component<DraggableHandleProps> {\n    public posRef: React.RefObject<SVGRectElement>;\n    public focusRef: React.RefObject<SVGGElement>;\n\n    public state = {\n        dragging: false,\n        drag: { x: 0, y: 0 },\n    }\n\n    constructor(props: DraggableHandleProps) {\n        super(props);\n        this.posRef = React.createRef<SVGRectElement>();\n        this.focusRef = React.createRef<SVGGElement>();\n    }\n\n    // mousemove event from outside (delegated from surrounding element)\n    public externalMouseMove = (e: React.MouseEvent<SVGElement>): void => {\n        this.move(e);\n    }\n\n    // mouseleave event from outside (delegated from surrounding element)\n    public externalLeave = (e: React.MouseEvent<SVGElement>): void => {\n        this.stopDrag(e);\n    }\n\n    // mouseup event from outside (delegated from surrounding element)\n    public externalMouseUp = (e: React.MouseEvent<SVGElement>): void => {\n        this.stopDrag(e);\n    }\n\n    public applyConstraint = (p: Point2D) => {\n        const { constraint } = this.props;\n        if (constraint) {\n            return constraint(p);\n        } else {\n            return p;\n        }\n    }\n\n    public startDrag = (e: React.MouseEvent<SVGElement>): void => {\n        e.preventDefault();\n        const { parentOnDragStart } = this.props;\n        if (this.posRef.current) {\n            this.setState({\n                dragging: true,\n                drag: this.applyConstraint(relativeCoords(e, this.posRef.current)),\n            });\n            if (parentOnDragStart) {\n                parentOnDragStart(this);\n            }\n            if (this.focusRef.current && this.focusRef.current.focus) {\n                this.focusRef.current.focus();\n            }\n        } else {\n            throw new Error(\"startDrag without posRef\");\n        }\n    }\n\n    public move = (e: React.MouseEvent<SVGElement>): void => {\n        const { onDragMove } = this.props;\n        if (!this.state.dragging) {\n            return;\n        }\n        if (this.posRef.current) {\n            this.setState({\n                drag: this.applyConstraint(relativeCoords(e, this.posRef.current)),\n            }, () => {\n                if (onDragMove) {\n                    const constrained = this.applyConstraint(this.state.drag)\n                    onDragMove(constrained.x, constrained.y);\n                }\n            })\n        } else {\n            throw new Error(\"move without posRef\");\n        }\n    }\n\n    public stopDrag = (e: React.MouseEvent<SVGElement>): void => {\n        const { parentOnDrop } = this.props;\n        const { dragging, drag } = this.state;\n        if (!dragging) {\n            return;\n        }\n        this.setState({\n            dragging: false,\n        })\n        if (parentOnDrop) {\n            parentOnDrop(drag.x, drag.y);\n        }\n    }\n\n    public handleKeyDown = (e: React.KeyboardEvent<SVGElement>) => {\n        const update = (fn: ModifyCoords) => {\n            const { x, y, onDragMove } = this.props;\n            const newCoords = fn(x, y);\n            const constrained = this.applyConstraint(newCoords);\n            if (onDragMove) {\n                onDragMove(constrained.x, constrained.y);\n            }\n        }\n        handleKeyEvent(e, update);\n    }\n\n    public renderCommon(x: number, y: number) {\n        const { imageWidth } = this.props;\n        const scale = imageWidth === undefined ? 1 : imageWidth / 128;\n        // empty zero-size <rect> as relative position reference\n        return (\n            <g>\n                <rect\n                    style={{ visibility: \"hidden\" }}\n                    ref={this.posRef}\n                    x={0} y={0} width={0} height={0}\n                />\n                <Handle scale={scale} x={x + .5} y={y + .5} withCross={this.props.withCross}\n                    focusRef={this.focusRef}\n                    onMouseUp={this.stopDrag}\n                    onMouseMove={this.move}\n                    onMouseDown={this.startDrag}\n                    onKeyDown={this.handleKeyDown}\n                    tabIndex={0}\n                />\n            </g>\n        );\n    }\n\n    public renderDragging() {\n        const { x, y } = this.state.drag;\n        return this.renderCommon(x, y);\n    }\n\n    public render() {\n        const { x, y } = this.props;\n        // either render from state (when dragging) or from props\n        if (this.state.dragging) {\n            return this.renderDragging();\n        } else {\n            return this.renderCommon(x, y);\n        }\n    }\n}\n\nexport default DraggableHandle;","import { ActionsUnion, createAction } from \"../helpers/actionHelpers\";\nimport { AnalysisDetails, AnalysisTypes } from \"../messages\";\nimport { AnalysisState } from \"./types\";\n\n\nexport enum ActionTypes {\n    CREATE = 'ANALYSIS_CREATE',\n    CREATED = 'ANALYSIS_CREATED',\n    PREPARE_RUN = 'ANALYSIS_PREPARE_RUN',\n    RUN = 'ANALYSIS_RUN',\n    RUNNING = 'ANALYSIS_RUNNING',\n    REMOVE = 'ANALYSIS_REMOVE',\n    REMOVED = 'ANALYSIS_REMOVED',\n    ERROR = 'ANALYSIS_ERROR',\n}\n\nexport const Actions = {\n    create: (dataset: string, analysisType: AnalysisTypes) => createAction(ActionTypes.CREATE, { dataset, analysisType }),\n    created: (analysis: AnalysisState) => createAction(ActionTypes.CREATED, { analysis }),\n    prepareRun: (id: string, jobIndex: number, job: string) => createAction(ActionTypes.PREPARE_RUN, { id, jobIndex, job }),\n    run: (id: string, jobIndex: number, parameters: AnalysisDetails) => createAction(ActionTypes.RUN, { id, jobIndex, parameters }),\n    running: (id: string, job: string, jobIndex: number) => createAction(ActionTypes.RUNNING, { id, job, jobIndex }),\n    remove: (id: string) => createAction(ActionTypes.REMOVE, { id }),\n    removed: (id: string) => createAction(ActionTypes.REMOVED, { id }),\n    error: (msg: string, timestamp: number, id: string) => createAction(ActionTypes.ERROR, { msg, timestamp, id }),\n}\n\nexport type Actions = ActionsUnion<typeof Actions>;\n\nexport type ActionParts = {\n    [K in keyof typeof Actions]: ReturnType<typeof Actions[K]>\n}","import * as React from \"react\";\nimport { Grid, Header, Icon, Segment } from \"semantic-ui-react\";\n\ninterface AnalysisLayoutTwoColProps {\n    title: string,\n    subtitle: React.ReactNode,\n    left: React.ReactNode,\n    right: React.ReactNode,\n    toolbar?: React.ReactNode,\n}\n\ntype MergedProps = AnalysisLayoutTwoColProps;\n\nconst AnalysisLayoutTwoCol: React.SFC<MergedProps> = ({\n    title, subtitle,\n    left, right,\n    toolbar,\n}) => {\n\n    return (\n        <>\n            <Header as='h3' attached=\"top\">\n                <Icon name=\"cog\" />\n                <Header.Content>{title}</Header.Content>\n            </Header>\n            <Segment attached={true}>\n                <Grid columns={2}>\n                    <Grid.Row>\n                        <Grid.Column>\n                            {left}\n                            <p>{subtitle}</p>\n                        </Grid.Column>\n                        <Grid.Column>\n                            {right}\n                        </Grid.Column>\n                    </Grid.Row>\n                </Grid>\n            </Segment>\n            {toolbar}\n        </>\n    )\n}\n\nexport default AnalysisLayoutTwoCol","import React from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { AnalysisParameters, AnalysisTypes } from \"../../messages\";\nimport { inRectConstraint } from \"../../widgets/constraints\";\nimport DraggableHandle from \"../../widgets/DraggableHandle\";\nimport { HandleRenderFunction } from \"../../widgets/types\";\nimport * as analysisActions from \"../actions\";\n\nconst useFramePicker = ({\n    enabled, scanWidth, scanHeight, jobIndex, analysisId, cx, cy, setCx, setCy\n}: {\n    enabled: boolean, scanWidth: number, scanHeight: number,\n    jobIndex: number, analysisId: string,\n    cx: number, cy: number, setCx: (newCx: number) => void, setCy: (newCy: number) => void,\n}) => {\n\n    const dispatch = useDispatch();\n\n    React.useEffect(() => {\n        if (enabled) {\n            const params: AnalysisParameters = {\n                x: cx,\n                y: cy,\n            };\n\n            dispatch(analysisActions.Actions.run(analysisId, jobIndex, {\n                type: AnalysisTypes.PICK_FRAME,\n                parameters: params,\n            }))\n        }\n    }, [analysisId, cx, cy, enabled, jobIndex]);\n\n    const onPickChange = (pickX: number, pickY: number) => {\n        const newX = Math.round(pickX);\n        const newY = Math.round(pickY);\n        if (cx === newX && cy === newY) {\n            return;\n        }\n        setCx(newX);\n        setCy(newY);\n    }\n\n    const renderPickHandle: HandleRenderFunction = (onDragStart, onDrop) => (\n        <DraggableHandle x={cx} y={cy} withCross={true}\n            imageWidth={scanWidth}\n            onDragMove={onPickChange}\n            parentOnDragStart={onDragStart}\n            parentOnDrop={onDrop}\n            constraint={inRectConstraint(scanWidth, scanHeight)} />\n    )\n\n    return { coords: { cx, cy }, handles: renderPickHandle };\n}\n\nexport default useFramePicker;","import * as React from \"react\";\nimport { Dropdown, DropdownProps } from \"semantic-ui-react\";\nimport { AnalysisTypes } from \"../../messages\";\n\ntype ModeOptions = Array<{\n    text: string;\n    value: AnalysisTypes;\n}>;\n\ninterface ModeSelectorProps {\n    modes: ModeOptions,\n    currentMode: AnalysisTypes,\n    onModeChange: (mode: AnalysisTypes) => void,\n}\n\nconst ModeSelector: React.FunctionComponent<ModeSelectorProps> = ({\n    modes, currentMode, onModeChange,\n}) => {\n\n    const onChange = (e: React.SyntheticEvent, data: DropdownProps) => {\n        onModeChange(data.value as AnalysisTypes)\n    }\n\n    return (\n        <>\n            <div>\n                Mode:{' '}\n                <Dropdown\n                    inline={true}\n                    options={modes}\n                    value={currentMode}\n                    onChange={onChange}\n                />\n            </div>\n        </>\n    )\n}\n\nexport default ModeSelector;","import React from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { AnalysisTypes } from \"../../messages\";\nimport * as analysisActions from \"../actions\";\n\nconst useSumFrames = ({\n    enabled, jobIndex, analysisId,\n}: {\n    enabled: boolean, jobIndex: number, analysisId: string,\n}) => {\n    const dispatch = useDispatch();\n\n    // FIXME: effect won't re-run when parameters change\n    React.useEffect(() => {\n        if (enabled) {\n            dispatch(analysisActions.Actions.run(analysisId, jobIndex, {\n                type: AnalysisTypes.SUM_FRAMES,\n                parameters: {},\n            }));\n        }\n    }, [analysisId, enabled, jobIndex]);\n};\n\nexport default useSumFrames;","import * as React from \"react\";\nimport { useState } from \"react\";\nimport { AnalysisTypes } from \"../../messages\";\nimport { HandleRenderFunction } from \"../../widgets/types\";\nimport useFramePicker from \"./FramePicker\";\nimport ModeSelector from \"./ModeSelector\";\nimport { useRoiPicker } from \"./RoiPicker\";\nimport useSumFrames from \"./SumFrames\";\n\nconst useDefaultFrameView = ({\n    scanWidth, scanHeight, analysisId,\n}: {\n    scanWidth: number, scanHeight: number, analysisId: string,\n}) => {\n    const availableModes = [\n        {\n            text: \"Average\",\n            value: AnalysisTypes.SUM_FRAMES,\n        },\n        {\n            text: \"Pick\",\n            value: AnalysisTypes.PICK_FRAME,\n        },\n        {\n            text: \"Average over ROI (disk)\",\n            value: AnalysisTypes.SUM_FRAMES_ROI,\n        }\n    ];\n\n    const [frameMode, setMode] = useState(AnalysisTypes.SUM_FRAMES);\n\n    const frameModeSelector = <ModeSelector modes={availableModes} currentMode={frameMode} onModeChange={setMode} />\n\n    const [cx, setCx] = React.useState(Math.round(scanWidth / 2));\n    const [cy, setCy] = React.useState(Math.round(scanHeight / 2));\n\n    const { coords: pickCoords, handles: pickHandles } = useFramePicker({\n        enabled: frameMode === AnalysisTypes.PICK_FRAME,\n        scanWidth, scanHeight,\n        jobIndex: 0,\n        analysisId,\n        cx, cy, setCx, setCy\n    });\n\n    const { sumRoiHandles, sumRoiWidgets } = useRoiPicker({\n        enabled: frameMode === AnalysisTypes.SUM_FRAMES_ROI,\n        scanWidth, scanHeight,\n        jobIndex: 0,\n        analysisId,\n    })\n\n    useSumFrames({\n        enabled: frameMode === AnalysisTypes.SUM_FRAMES,\n        jobIndex: 0,\n        analysisId,\n    })\n\n    const frameViewTitle = (\n        frameMode !== AnalysisTypes.PICK_FRAME ? null : <>Pick: x={pickCoords.cx}, y={pickCoords.cy} &emsp;</>\n    )\n\n    const nullHandles: HandleRenderFunction = (onDragStart, onDrop) => null\n\n    let handles = nullHandles;\n\n    switch (frameMode) {\n        case AnalysisTypes.PICK_FRAME:\n            handles = pickHandles;\n            break;\n        case AnalysisTypes.SUM_FRAMES_ROI:\n            handles = sumRoiHandles;\n            break;\n    }\n\n    let widgets;\n\n    switch (frameMode) {\n        case AnalysisTypes.SUM_FRAMES_ROI:\n            widgets = sumRoiWidgets;\n            break;\n    }\n\n    return {\n        frameViewTitle,\n        frameModeSelector,\n        handles,\n        widgets,\n    }\n}\n\nexport default useDefaultFrameView;","import * as React from \"react\";\nimport { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { AnalysisTypes, SumFrameParams } from \"../../messages\";\nimport { cbToRadius, inRectConstraint, keepOnCY } from \"../../widgets/constraints\";\nimport Disk from \"../../widgets/Disk\";\nimport DraggableHandle from \"../../widgets/DraggableHandle\";\nimport { HandleRenderFunction } from \"../../widgets/types\";\nimport * as analysisActions from \"../actions\";\n\nconst useRoiPicker = ({ scanWidth, scanHeight, analysisId, enabled, jobIndex }: {\n    scanWidth: number;\n    scanHeight: number;\n    enabled: boolean;\n    jobIndex: number,\n    analysisId: string;\n}) => {\n    const minLength = Math.min(scanWidth, scanHeight);\n    const [cx, setCx] = useState(scanWidth / 2);\n    const [cy, setCy] = useState(scanHeight / 2);\n    const [r, setR] = useState(minLength / 8);\n\n    const dispatch = useDispatch();\n\n    const roiParameters: SumFrameParams = {\n        roi: {\n            shape: \"disk\",\n            cx,\n            cy,\n            r,\n        },\n    }\n\n    React.useEffect(() => {\n        const handle = setTimeout(() => {\n            if (enabled) {\n                dispatch(analysisActions.Actions.run(analysisId, jobIndex, {\n                    type: AnalysisTypes.SUM_FRAMES,\n                    parameters: roiParameters,\n                }))\n            }\n        }, 100);\n\n        return () => clearTimeout(handle);\n    }, [analysisId, enabled, jobIndex, cx, cy, r]);\n\n    const handleCenterChange = (newCx: number, newCy: number) => {\n        setCx(newCx);\n        setCy(newCy);\n    };\n\n    const handleRChange = (newR: number) => {\n        setR(newR);\n    };\n\n    const rHandle = {\n        x: cx - r,\n        y: cy,\n    }\n\n    const sumRoiHandles: HandleRenderFunction = (handleDragStart, handleDrop) => (<>\n        <DraggableHandle x={cx} y={cy}\n            imageWidth={scanWidth}\n            onDragMove={handleCenterChange}\n            parentOnDragStart={handleDragStart}\n            parentOnDrop={handleDrop}\n            constraint={inRectConstraint(scanWidth, scanHeight)} />\n        <DraggableHandle x={rHandle.x} y={rHandle.y}\n            imageWidth={scanWidth}\n            onDragMove={cbToRadius(cx, cy, handleRChange)}\n            parentOnDragStart={handleDragStart}\n            parentOnDrop={handleDrop}\n            constraint={keepOnCY(cy)} />\n    </>);\n\n    const sumRoiWidgets = (\n        <Disk cx={cx} cy={cy} r={r}\n            imageWidth={scanWidth} imageHeight={scanHeight}\n        />\n    );\n\n    return {\n        roiParameters,\n        sumRoiHandles,\n        sumRoiWidgets,\n    };\n};\n\nexport { useRoiPicker };\n\n","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { Button, Icon, IconProps, Segment } from \"semantic-ui-react\";\nimport { RootReducer } from \"../../store\";\nimport * as analysisActions from \"../actions\";\nimport { getAnalysisStatus } from \"../helpers\";\nimport { AnalysisState } from \"../types\";\n\ninterface ToolbarProps {\n    analysis: AnalysisState,\n    busyIdxs: number[],\n    onApply: () => void,\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch, ownProps: ToolbarProps) => {\n    return {\n        handleRemove: () => dispatch(analysisActions.Actions.remove(ownProps.analysis.id)),\n    }\n}\n\ntype MergedProps = ToolbarProps & ReturnType<typeof mapDispatchToProps> & ReturnType<typeof mapStateToProps>;\n\nconst Toolbar: React.SFC<MergedProps> = ({ status, onApply, handleRemove }) => {\n    const running = status === \"busy\";\n    const applyIconProps: IconProps = running ? { name: 'cog', loading: true } : { name: 'check' }\n    return (\n        <Segment attached=\"bottom\">\n            <Button.Group>\n                <Button primary={true} onClick={onApply} icon={true}>\n                    <Icon {...applyIconProps} />\n                    Apply\n                </Button>\n                <Button onClick={handleRemove} icon={true}>\n                    <Icon name='remove' />\n                    Remove\n                </Button>\n            </Button.Group>\n        </Segment>\n    );\n}\n\nconst mapStateToProps = (state: RootReducer, ownProps: ToolbarProps) => {\n    const status = getAnalysisStatus(ownProps.analysis, state.jobs, ownProps.busyIdxs);\n    return {\n        status,\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Toolbar);","import { JobReducerState } from \"../job/reducers\";\nimport { JobRunning } from \"../job/types\";\nimport { AnalysisState } from \"./types\";\n\nexport const getAnalysisStatus = (analysis: AnalysisState, jobs: JobReducerState, jobIdxsToInclude: number[] = []): \"idle\" | \"busy\" => {\n    let filteredJobs = analysis.jobs;\n\n    if (jobIdxsToInclude.length > 0) {\n        filteredJobs = analysis.jobs.filter((jobId: string, idx: number) => {\n            return jobIdxsToInclude.indexOf(idx) !== -1;\n        })\n    }\n\n    return filteredJobs.reduce((prevValue: \"idle\" | \"busy\", jobId: string) => {\n        const isDone = jobs.byId[jobId].running === JobRunning.DONE;\n        return isDone ? prevValue : \"busy\";\n    }, \"idle\");\n}","import * as React from \"react\";\nimport { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { defaultDebounce } from \"../../helpers\";\nimport ResultList from \"../../job/components/ResultList\";\nimport { AnalysisTypes } from \"../../messages\";\nimport { cbToRadius, inRectConstraint, keepOnCY } from \"../../widgets/constraints\";\nimport Disk from \"../../widgets/Disk\";\nimport { DraggableHandle } from \"../../widgets/DraggableHandle\";\nimport { HandleRenderFunction } from \"../../widgets/types\";\nimport * as analysisActions from \"../actions\";\nimport { AnalysisProps } from \"../types\";\nimport AnalysisLayoutTwoCol from \"./AnalysisLayoutTwoCol\";\nimport useDefaultFrameView from \"./DefaultFrameView\";\nimport Toolbar from \"./Toolbar\";\n\nconst CenterOfMassAnalysis: React.SFC<AnalysisProps> = ({ analysis, dataset }) => {\n    const { shape } = dataset.params;\n    const [scanHeight, scanWidth, imageHeight, imageWidth] = shape;\n    const minLength = Math.min(imageWidth, imageHeight);\n    const [cx, setCx] = useState(imageWidth / 2);\n    const [cy, setCy] = useState(imageHeight / 2);\n    const [r, setR] = useState(minLength / 4);\n\n    const dispatch = useDispatch();\n\n    const rHandle = {\n        x: cx - r,\n        y: cy,\n    }\n\n    const handleCenterChange = defaultDebounce((newCx: number, newCy: number) => {\n        setCx(newCx);\n        setCy(newCy);\n    });\n    const handleRChange = defaultDebounce(setR);\n\n    const frameViewHandles: HandleRenderFunction = (handleDragStart, handleDrop) => (<>\n        <DraggableHandle x={cx} y={cy}\n            imageWidth={imageWidth}\n            onDragMove={handleCenterChange}\n            parentOnDragStart={handleDragStart}\n            parentOnDrop={handleDrop}\n            constraint={inRectConstraint(imageWidth, imageHeight)} />\n        <DraggableHandle x={rHandle.x} y={rHandle.y}\n            imageWidth={imageWidth}\n            onDragMove={cbToRadius(cx, cy, handleRChange)}\n            parentOnDragStart={handleDragStart}\n            parentOnDrop={handleDrop}\n            constraint={keepOnCY(cy)} />\n    </>);\n\n    const frameViewWidgets = (\n        <Disk cx={cx} cy={cy} r={r}\n            imageWidth={imageWidth} imageHeight={imageHeight} />\n    )\n\n    const {\n        frameViewTitle, frameModeSelector,\n        handles: resultHandles, widgets: resultWidgets\n    } = useDefaultFrameView({\n        scanWidth,\n        scanHeight,\n        analysisId: analysis.id,\n    })\n\n    const subtitle = <>{frameViewTitle} Disk: center=(x={cx.toFixed(2)}, y={cy.toFixed(2)}), r={r.toFixed(2)}</>;\n\n    const runAnalysis = () => {\n        dispatch(analysisActions.Actions.run(analysis.id, 1, {\n            type: AnalysisTypes.CENTER_OF_MASS,\n            parameters: {\n                shape: \"com\",\n                cx,\n                cy,\n                r\n            }\n        }));\n    };\n\n    const toolbar = <Toolbar analysis={analysis} onApply={runAnalysis} busyIdxs={[1]} />\n\n    return (\n        <AnalysisLayoutTwoCol\n            title=\"COM analysis\" subtitle={subtitle}\n            left={<>\n                <ResultList\n                    extraHandles={frameViewHandles} extraWidgets={frameViewWidgets}\n                    jobIndex={0} analysis={analysis.id}\n                    width={imageWidth} height={imageHeight}\n                    selectors={frameModeSelector}\n                />\n            </>}\n            right={<>\n                <ResultList\n                    jobIndex={1} analysis={analysis.id}\n                    width={scanWidth} height={scanHeight}\n                    extraHandles={resultHandles}\n                    extraWidgets={resultWidgets}\n                />\n            </>}\n            toolbar={toolbar}\n        />\n    );\n}\n\nexport default CenterOfMassAnalysis;","import * as React from \"react\";\nimport { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport ResultList from \"../../job/components/ResultList\";\nimport { AnalysisTypes } from \"../../messages\";\nimport { cbToRadius, inRectConstraint, keepOnCY } from \"../../widgets/constraints\";\nimport Disk from \"../../widgets/Disk\";\nimport DraggableHandle from \"../../widgets/DraggableHandle\";\nimport { HandleRenderFunction } from \"../../widgets/types\";\nimport * as analysisActions from \"../actions\";\nimport { AnalysisProps } from \"../types\";\nimport AnalysisLayoutTwoCol from \"./AnalysisLayoutTwoCol\";\nimport useDefaultFrameView from \"./DefaultFrameView\";\nimport Toolbar from \"./Toolbar\";\n\n\nconst DiskMaskAnalysis: React.SFC<AnalysisProps> = ({ analysis, dataset }) => {\n    const { shape } = dataset.params;\n    const [scanHeight, scanWidth, imageHeight, imageWidth] = shape;\n\n    const minLength = Math.min(imageWidth, imageHeight);\n    const [cx, setCx] = useState(imageWidth / 2);\n    const [cy, setCy] = useState(imageHeight / 2);\n    const [r, setR] = useState(minLength / 4);\n\n    const handleCenterChange = (newCx: number, newCy: number) => {\n        setCx(newCx);\n        setCy(newCy);\n    };\n    const handleRChange = setR;\n\n    const rHandle = {\n        x: cx - r,\n        y: cy,\n    }\n\n    const frameViewHandles: HandleRenderFunction = (handleDragStart, handleDrop) => (<>\n        <DraggableHandle x={cx} y={cy}\n            imageWidth={imageWidth}\n            onDragMove={handleCenterChange}\n            parentOnDragStart={handleDragStart}\n            parentOnDrop={handleDrop}\n            constraint={inRectConstraint(imageWidth, imageHeight)} />\n        <DraggableHandle x={rHandle.x} y={rHandle.y}\n            imageWidth={imageWidth}\n            onDragMove={cbToRadius(cx, cy, handleRChange)}\n            parentOnDragStart={handleDragStart}\n            parentOnDrop={handleDrop}\n            constraint={keepOnCY(cy)} />\n    </>);\n\n    const frameViewWidgets = (\n        <Disk cx={cx} cy={cy} r={r}\n            imageWidth={imageWidth} imageHeight={imageHeight}\n        />\n    );\n\n    const dispatch = useDispatch();\n\n    const runAnalysis = () => {\n        dispatch(analysisActions.Actions.run(analysis.id, 1, {\n            type: AnalysisTypes.APPLY_DISK_MASK,\n            parameters: {\n                shape: \"disk\",\n                cx, cy, r\n            }\n        }));\n    };\n\n    const {\n        frameViewTitle, frameModeSelector,\n        handles: resultHandles, widgets: resultWidgets\n    } = useDefaultFrameView({\n        scanWidth,\n        scanHeight,\n        analysisId: analysis.id,\n    })\n\n    const subtitle = <>{frameViewTitle} Disk: center=(x={cx.toFixed(2)}, y={cy.toFixed(2)}), r={r.toFixed(2)}</>;\n\n    const toolbar = <Toolbar analysis={analysis} onApply={runAnalysis} busyIdxs={[1]} />\n\n    return (\n        <AnalysisLayoutTwoCol\n            title=\"Disk analysis\" subtitle={subtitle}\n            left={<>\n                <ResultList\n                    extraHandles={frameViewHandles} extraWidgets={frameViewWidgets}\n                    jobIndex={0} analysis={analysis.id}\n                    width={imageWidth} height={imageHeight}\n                    selectors={frameModeSelector}\n                />\n            </>}\n            right={<>\n                <ResultList\n                    jobIndex={1} analysis={analysis.id}\n                    width={scanWidth} height={scanHeight}\n                    extraHandles={resultHandles}\n                    extraWidgets={resultWidgets}\n                />\n            </>}\n            toolbar={toolbar}\n        />\n    );\n}\n\nexport default DiskMaskAnalysis;","// from https://stackoverflow.com/a/45100420/540644\nexport function getPathArc(center: { x: number, y: number }, start: number, end: number, radius: number) {\n    if (end === start) { end += 360; }\n    let degree = end - start;\n    degree = degree < 0 ? (degree + 360) : degree;\n    const points = [];\n    points.push(getLocationFromAngle(start, radius, center));\n    points.push(getLocationFromAngle(start + degree / 3, radius, center));\n    points.push(getLocationFromAngle(start + degree * 2 / 3, radius, center));\n    points.push(getLocationFromAngle(end, radius, center));\n    return getCirclePath(points, radius, (degree < 180) ? 0 : 1);\n}\n\nfunction getCirclePath(points: Array<{ x: number, y: number }>, radius: number, clockWise: 0 | 1) {\n    return ['M', points[0].x, points[0].y,\n        'A', radius, radius, 0, 0, clockWise, points[1].x, points[1].y,\n        'A', radius, radius, 0, 0, clockWise, points[2].x, points[2].y,\n        'A', radius, radius, 0, 0, clockWise, points[3].x, points[3].y\n    ].join(' ');\n}\n\nfunction getLocationFromAngle(degree: number, radius: number, center: { x: number, y: number }) {\n    const radian = (degree * Math.PI) / 180;\n    return {\n        x: Math.cos(radian) * radius + center.x,\n        y: Math.sin(radian) * radius + center.y\n    }\n}\n","import * as React from \"react\";\nimport { getPathArc } from \"../helpers/svg\";\nimport { defaultMaskStyles } from \"./styles\";\n\nexport interface RingProps {\n    imageWidth: number,\n    cx: number,\n    cy: number,\n    ri: number,\n    ro: number,\n}\n\nconst Ring: React.SFC<RingProps> = ({ imageWidth, cx, cy, ri, ro }) => {\n    // see also: https://stackoverflow.com/a/37883328/540644\n    const pathSpecs = [\n        getPathArc({ x: cx + .5, y: cy + .5 }, 90, 90, ro),\n        getPathArc({ x: cx + .5, y: cy + .5 }, 90, 90, ri)\n    ]\n    const pathSpec = pathSpecs.join(' ');\n\n    return (\n        <path d={pathSpec} fillRule=\"evenodd\" style={{ ...defaultMaskStyles(imageWidth) }} />\n    );\n}\n\nexport default Ring;","import * as React from \"react\";\nimport { Grid, Header, Icon, Segment } from \"semantic-ui-react\";\n\ninterface AnalysisLayoutThreeColProps {\n    title: string,\n    subtitle: React.ReactNode,\n    left: React.ReactNode,\n    mid: React.ReactNode,\n    right: React.ReactNode,\n    toolbar?: React.ReactNode,\n    title1: string,\n    title2: React.ReactNode,\n    title3:string,\n\n}\n\ntype MergedProps = AnalysisLayoutThreeColProps;\n\nconst AnalysisLayoutThreeCol: React.SFC<MergedProps> = ({\n    title, subtitle,\n    left, mid, right,\n    toolbar,title1, title2, title3\n}) => {\n// tslint:disable-next-line: no-console\n    \n\n    // handleChange({target: {checked: true}})\n\n\n    \n\n    return (\n        <>\n            <Header as='h3' attached=\"top\">\n                <Icon name=\"cog\" />\n                <Header.Content>{title}</Header.Content>\n            </Header>\n            <Segment attached={true}>\n                <Grid columns={3}>\n                    <Grid.Row>\n                        <Grid.Column width={5}>\n                            <p>{title1}</p>\n                        </Grid.Column> \n\n                        <Grid.Column width={5}>\n                            <p>{title2}</p>   \n\n                        </Grid.Column>\n\n                        <Grid.Column width={6}>\n                            <p>{title3}</p>\n                        </Grid.Column>    \n                    </Grid.Row>\n\n                    <Grid.Row>\n                        <Grid.Column width={5}>\n                            {left}\n                        </Grid.Column>\n\n                        <Grid.Column width={5}>\n                            {mid}\n                        </Grid.Column>\n\n                        <Grid.Column width={6}>\n                            {right}\n                        </Grid.Column>\n\n                    </Grid.Row>\n\n                    <Grid.Row>\n                        <Grid.Column width={10}>\n\n                            <p>{subtitle}</p>\n                        </Grid.Column>\n\n                        <Grid.Column width={6}>\n\n                        </Grid.Column>\n\n                    </Grid.Row>\n                </Grid>\n            </Segment>\n            {toolbar}\n        </>\n    )\n}\n\nexport default AnalysisLayoutThreeCol","import React from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { AnalysisTypes } from \"../../messages\";\nimport { inRectConstraint } from \"../../widgets/constraints\";\nimport DraggableHandle from \"../../widgets/DraggableHandle\";\nimport { HandleRenderFunction } from \"../../widgets/types\";\nimport * as analysisActions from \"../actions\";\n\nconst useFFTFramePicker = ({\n    enabled, scanWidth, scanHeight, jobIndex, analysisId, cx, cy, real_rad, real_centerx, real_centery, setCx, setCy\n}: {\n    enabled: boolean, scanWidth: number, scanHeight: number,\n    jobIndex: number, analysisId: string,\n    cx: number, cy: number, setCx: (newCx: number) => void, setCy: (newCy: number) => void,\n    real_rad: number | null, real_centerx: number | null, real_centery: number | null\n\n}) => {\n\n    const dispatch = useDispatch();\n\n    React.useEffect(() => {\n        if (enabled) {\n            dispatch(analysisActions.Actions.run(analysisId, jobIndex, {\n                type: AnalysisTypes.PICK_FFT_FRAME,\n                parameters: { x: cx, y: cy, real_rad, real_centerx, real_centery },\n            }))\n\n        }\n    }, [analysisId, cx, cy, enabled, jobIndex, real_rad, real_centerx, real_centery]);\n\n    const onPickChange = (pickX: number, pickY: number) => {\n        const newX = Math.round(pickX);\n        const newY = Math.round(pickY);\n        if (cx === newX && cy === newY) {\n            return;\n        }\n        setCx(newX);\n        setCy(newY);\n    }\n\n    const renderPickHandle: HandleRenderFunction = (onDragStart, onDrop) => (\n        <DraggableHandle x={cx} y={cy} withCross={true}\n            imageWidth={scanWidth}\n            onDragMove={onPickChange}\n            parentOnDragStart={onDragStart}\n            parentOnDrop={onDrop}\n            constraint={inRectConstraint(scanWidth, scanHeight)} />\n    )\n\n    return { coords: { cx, cy }, handles: renderPickHandle };\n}\n\nexport default useFFTFramePicker;","import React from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { AnalysisTypes } from \"../../messages\";\nimport * as analysisActions from \"../actions\";\n\nconst useFFTSumFrames = ({\n    enabled, jobIndex, analysisId, real_rad, real_centerx, real_centery\n}: {\n    enabled: boolean, jobIndex: number, analysisId: string, real_rad:number|null, real_centerx:number|null, real_centery:number|null\n}) => {\n    const dispatch = useDispatch();\n\n    React.useEffect(() => {\n        if (enabled) {\n            dispatch(analysisActions.Actions.run(analysisId, jobIndex, {\n                type: AnalysisTypes.FFTSUM_FRAMES,\n                parameters: {real_rad, real_centerx, real_centery},\n            }));\n        }\n    }, [analysisId, enabled, jobIndex, real_rad, real_centerx, real_centery]);\n};\n\nexport default useFFTSumFrames;\n","import * as React from \"react\";\nimport { useState } from \"react\";\nimport { AnalysisTypes } from \"../../messages\";\nimport { HandleRenderFunction } from \"../../widgets/types\";\nimport useFFTFramePicker from \"./FFTFramePicker\";\nimport useFFTSumFrames from \"./FFTSumFrames\";\nimport useFramePicker from \"./FramePicker\";\nimport ModeSelector from \"./ModeSelector\";\nimport useSumFrames from \"./SumFrames\";\n\nconst useFFTFrameView = ({\n    scanWidth, scanHeight, analysisId, real_rad, real_centerx, real_centery\n}: {\n    scanWidth: number, scanHeight: number,\n    analysisId: string, real_rad:number|null, real_centerx:number|null, real_centery:number|null\n}) => {\n    const availableModes = [\n\n        {\n            text: \"Pick\",\n            value: AnalysisTypes.PICK_FRAME,\n        },\n\n        {\n            text: \"Average\",\n            value: AnalysisTypes.SUM_FRAMES,\n        },\n    ];\n\n    const [frameMode, setMode] = useState(AnalysisTypes.SUM_FRAMES);\n\n    const frameModeSelector = <ModeSelector modes={availableModes} currentMode={frameMode} onModeChange={setMode} />\n\n    const [cx, setCx] = React.useState(Math.round(scanWidth / 2));\n    const [cy, setCy] = React.useState(Math.round(scanHeight / 2));\n\n    const { coords: pickCoords, handles: pickHandles } = useFramePicker({\n        enabled: frameMode === AnalysisTypes.PICK_FRAME,\n        scanWidth, scanHeight,\n        jobIndex: 1,\n        analysisId,\n        cx, cy, setCx, setCy\n    });\n    \n    useFFTFramePicker({\n        enabled: frameMode === AnalysisTypes.PICK_FRAME,\n        scanWidth, scanHeight,\n        jobIndex: 0,\n        analysisId,\n        cx, cy, setCx, setCy,real_rad, real_centerx, real_centery\n    });\n    \n\n    useSumFrames({\n        enabled: frameMode === AnalysisTypes.SUM_FRAMES,\n        jobIndex: 1,\n        analysisId,\n    })\n\n    useFFTSumFrames({\n        enabled: frameMode === AnalysisTypes.SUM_FRAMES,\n        jobIndex: 0,\n        analysisId,\n        real_rad,\n        real_centerx,\n        real_centery\n    })\n\n    const frameViewTitle = (\n        frameMode !== AnalysisTypes.PICK_FRAME ? null : <>Pick: x={pickCoords.cx}, y={pickCoords.cy} &emsp;</>\n    )\n\n\n\n    const nullHandles: HandleRenderFunction = (onDragStart, onDrop) => null\n\n    return {\n        frameViewTitle,\n        handles: frameMode !== AnalysisTypes.PICK_FRAME ? nullHandles : pickHandles,\n\n        frameModeSelector,\n    }\n}\n\nexport default useFFTFrameView;","import * as React from \"react\";\nimport { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { defaultDebounce } from \"../../helpers\";\nimport ResultList from \"../../job/components/ResultList\";\nimport { AnalysisTypes} from \"../../messages\";\nimport { cbToRadius, inRectConstraint, keepOnCY, riConstraint, roConstraints } from \"../../widgets/constraints\";\nimport Disk from \"../../widgets/Disk\";\nimport DraggableHandle from \"../../widgets/DraggableHandle\";\nimport Ring from \"../../widgets/Ring\";\nimport { HandleRenderFunction } from \"../../widgets/types\";\nimport * as analysisActions from \"../actions\";\nimport { AnalysisProps } from \"../types\";\nimport AnalysisLayoutThreeCol from \"./AnalysisLayoutThreeCol\";\nimport useFFTFrameView from \"./FFTFrameView\";\nimport Toolbar from \"./Toolbar\";\n\n\n\n\nconst FFTAnalysis: React.SFC<AnalysisProps> = ({ analysis, dataset}) => {\n    const { shape } = dataset.params;\n    const [scanHeight, scanWidth, imageHeight, imageWidth] = shape;\n    const minLength = Math.min(imageWidth, imageHeight);\n\n    const cx = imageWidth / 2;\n    const cy=imageHeight / 2;\n    const [rad_in, setRi] = useState(minLength / 4);\n    const [rad_out, setRo] = useState(minLength / 2);\n\n    const dispatch = useDispatch();\n    const riHandle = {\n        x: cx - rad_in,\n        y: cy,\n    }\n    const roHandle = {\n        x: cx - rad_out,\n        y: cy,\n    }\n\n\n    const handleRIChange = defaultDebounce(setRi);\n    const handleROChange = defaultDebounce(setRo);\n\n    const frameViewHandlesfft: HandleRenderFunction = (handleDragStart, handleDrop) => (<>\n        \n        <DraggableHandle x={roHandle.x} y={roHandle.y}\n            imageWidth={imageWidth}\n            onDragMove={cbToRadius(cx, cy, handleROChange)}\n            parentOnDrop={handleDrop}\n            parentOnDragStart={handleDragStart}\n            constraint={roConstraints(riHandle.x, cy)} />\n        <DraggableHandle x={riHandle.x} y={riHandle.y}\n            imageWidth={imageWidth}\n            parentOnDrop={handleDrop}\n            parentOnDragStart={handleDragStart}\n            onDragMove={cbToRadius(cx, cy, handleRIChange)}\n            constraint={riConstraint(roHandle.x, cy)} />\n    </>);\n\n    const frameViewWidgetsfft = (\n        <Ring cx={cx} cy={cx} ri={rad_in} ro={rad_out}\n            imageWidth={imageWidth} />\n    )\n\n    const [check, setCheck] = React.useState(true);\n    \n    const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setCheck(event.target.checked);\n    }\n\n\n    \n    const [real_centerx, setCx] = useState(imageWidth / 2);\n    const [real_centery, setCy] = useState(imageHeight / 2);\n    const [real_rad, setR] = useState(minLength / 4);\n\n    const handleCenterChange = defaultDebounce((newCx: number, newCy: number) => {\n        setCx(newCx);\n        setCy(newCy);\n    });\n    const handleRChange = defaultDebounce(setR);\n\n    const rHandle = {\n        x: real_centerx - real_rad,\n        y: real_centery,\n    }\n\n    const frameViewHandlesreal: HandleRenderFunction = (handleDragStart, handleDrop) => (<>\n        <DraggableHandle x={real_centerx} y={real_centery}\n            imageWidth={imageWidth}\n            onDragMove={handleCenterChange}\n            parentOnDragStart={handleDragStart}\n            parentOnDrop={handleDrop}\n            constraint={inRectConstraint(imageWidth, imageHeight)} />\n        <DraggableHandle x={rHandle.x} y={rHandle.y}\n            imageWidth={imageWidth}\n            onDragMove={cbToRadius(real_centerx, real_centery, handleRChange)}\n            parentOnDragStart={handleDragStart}\n            parentOnDrop={handleDrop}\n            constraint={keepOnCY(real_centery)} />\n    </>);\n\n    const frameViewWidgetsreal = (\n        <Disk cx={real_centerx} cy={real_centery} r={real_rad}\n            imageWidth={imageWidth} imageHeight={imageHeight}\n        />\n    );\n\n    const runAnalysis = () => {\n        dispatch(analysisActions.Actions.run(analysis.id, 2, {\n            type: AnalysisTypes.APPLY_FFT_MASK,\n            parameters: {\n                rad_in,\n                rad_out,\n                real_rad: check ? real_rad : null,\n                real_centerx: check ? real_centerx : null,\n                real_centery: check ? real_centery : null\n                \n            }\n        }));\n    };\n\n    const { frameViewTitle, frameModeSelector, handles: resultHandles } = useFFTFrameView({\n        scanWidth,\n        scanHeight,\n        analysisId: analysis.id,\n        real_rad: check ? real_rad : null,\n        real_centerx: check ? real_centerx : null,\n        real_centery: check ? real_centery : null\n        })\n\n    \n\n    const toolbar = <Toolbar analysis={analysis} onApply={runAnalysis} busyIdxs={[2]} />\n    \n\n    let subtitle;\n    let mid: React.ReactNode;\n    if (check) {\n        mid = (<>\n            <ResultList\n                extraHandles={frameViewHandlesreal} extraWidgets={frameViewWidgetsreal}\n                jobIndex={1} analysis={analysis.id}\n                width={imageWidth} height={imageHeight}\n                selectors={frameModeSelector}\n            />\n        </>)\n        subtitle = (\n            <>{frameViewTitle} real_rad={rad_in.toFixed(2)}, real_center=(x={real_centerx.toFixed(2)}, y={real_centery.toFixed(2)}), fourier_rad_in={rad_in.toFixed(2)}, fourier_rad_out={rad_out.toFixed(2)}</>\n        )\n    }\n\n    else {\n        mid = (<>\n            <ResultList\n                jobIndex={1} analysis={analysis.id}\n                width={imageWidth} height={imageHeight}\n                selectors={frameModeSelector}\n            />\n        </>)\n        subtitle = (\n            <>{frameViewTitle} fourier_rad_in={rad_in.toFixed(2)}, fourier_rad_out={rad_out.toFixed(2)}</>\n        )\n    }\n    \n    \n    return (\n        <AnalysisLayoutThreeCol\n            title=\"FFT analysis\" subtitle={subtitle}\n            left={<>\n                <ResultList\n                    extraHandles={frameViewHandlesfft} extraWidgets={frameViewWidgetsfft}\n                    jobIndex={0} analysis={analysis.id}\n                    width={imageWidth} height={imageHeight}\n                />\n            </>}\n            mid={mid}\n\n            right={<>\n                <ResultList\n                    jobIndex={2} analysis={analysis.id}\n                    width={scanWidth} height={scanHeight}\n                    extraHandles={resultHandles}\n                />\n            </>}\n            toolbar={toolbar}\n\n            title2={<><label> Masking out of zero order diffraction peak <input type=\"checkbox\" name=\"check\" onChange={handleChange} checked={check}/> </label>\n            </>}\n            title1 =\"Masking of intergation region in Fourier space\"\n            title3 =\"Result of analysis\"\n\n        />\n    );\n}\n\n\nexport default FFTAnalysis;","import * as React from \"react\";\nimport { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { defaultDebounce } from \"../../helpers\";\nimport ResultList from \"../../job/components/ResultList\";\nimport { AnalysisTypes } from \"../../messages\";\nimport { inRectConstraint } from \"../../widgets/constraints\";\nimport DraggableHandle from \"../../widgets/DraggableHandle\";\nimport { HandleRenderFunction } from \"../../widgets/types\";\nimport * as analysisActions from \"../actions\";\nimport { AnalysisProps } from \"../types\";\nimport AnalysisLayoutTwoCol from \"./AnalysisLayoutTwoCol\";\nimport useDefaultFrameView from \"./DefaultFrameView\";\nimport Toolbar from \"./Toolbar\";\n\n\nconst PointSelectionAnalysis: React.SFC<AnalysisProps> = ({ analysis, dataset, }) => {\n    const { shape } = dataset.params;\n    const [scanHeight, scanWidth, imageHeight, imageWidth] = shape;\n\n    const [cx, setCx] = useState(imageWidth / 2);\n    const [cy, setCy] = useState(imageHeight / 2);\n    const handleCenterChange = defaultDebounce((newCx: number, newCy: number) => {\n        setCx(newCx);\n        setCy(newCy);\n    });\n\n    const frameViewHandles: HandleRenderFunction = (handleDragStart, handleDrop) => (<>\n        <DraggableHandle x={cx} y={cy} withCross={true}\n            onDragMove={handleCenterChange}\n            imageWidth={imageWidth}\n            parentOnDragStart={handleDragStart}\n            parentOnDrop={handleDrop}\n            constraint={inRectConstraint(imageWidth, imageHeight)} />\n    </>);\n\n    const {\n        frameViewTitle, frameModeSelector,\n        handles: resultHandles,\n        widgets: resultWidgets,\n    } = useDefaultFrameView({\n        scanWidth,\n        scanHeight,\n        analysisId: analysis.id,\n    })\n\n    const subtitle = (\n        <>{frameViewTitle} Point: center=(x={cx.toFixed(2)}, y={cy.toFixed(2)})</>\n    )\n\n    const dispatch = useDispatch();\n\n    const runAnalysis = () => {\n        dispatch(analysisActions.Actions.run(analysis.id, 1, {\n            type: AnalysisTypes.APPLY_POINT_SELECTOR,\n            parameters: {\n                shape: \"point\",\n                cx,\n                cy,\n            }\n        }));\n    };\n\n    const toolbar = <Toolbar analysis={analysis} onApply={runAnalysis} busyIdxs={[1]} />\n\n    return (\n        <AnalysisLayoutTwoCol\n            title=\"Point analysis\" subtitle={subtitle}\n            left={<>\n                <ResultList\n                    extraHandles={frameViewHandles}\n                    jobIndex={0} analysis={analysis.id}\n                    width={imageWidth} height={imageHeight}\n                    selectors={frameModeSelector}\n                />\n            </>}\n            right={<>\n                <ResultList\n                    jobIndex={1} analysis={analysis.id}\n                    width={scanWidth} height={scanHeight}\n                    extraHandles={resultHandles}\n                    extraWidgets={resultWidgets}\n                />\n            </>}\n            toolbar={toolbar}\n        />\n    );\n}\n\nexport default PointSelectionAnalysis;","import * as React from \"react\";\nimport { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { defaultDebounce } from \"../../helpers\";\nimport ResultList from \"../../job/components/ResultList\";\nimport { AnalysisTypes } from \"../../messages\";\nimport { cbToRadius, inRectConstraint, riConstraint, roConstraints } from \"../../widgets/constraints\";\nimport DraggableHandle from \"../../widgets/DraggableHandle\";\nimport Ring from \"../../widgets/Ring\";\nimport { HandleRenderFunction } from \"../../widgets/types\";\nimport * as analysisActions from \"../actions\";\nimport { AnalysisProps } from \"../types\";\nimport AnalysisLayoutTwoCol from \"./AnalysisLayoutTwoCol\";\nimport useDefaultFrameView from \"./DefaultFrameView\";\nimport Toolbar from \"./Toolbar\";\n\nconst RadialFourierAnalysis: React.SFC<AnalysisProps> = ({ analysis, dataset }) => {\n    const { shape } = dataset.params;\n    const [scanHeight, scanWidth, imageHeight, imageWidth] = shape;\n\n    const minLength = Math.min(imageWidth, imageHeight);\n    const [cx, setCx] = useState(imageWidth / 2);\n    const [cy, setCy] = useState(imageHeight / 2);\n    const [ri, setRi] = useState(minLength / 4);\n    const [ro, setRo] = useState(minLength / 2);\n    const [nBins] = useState(1);\n    const [maxOrder] = useState(8);\n\n    const riHandle = {\n        x: cx - ri,\n        y: cy,\n    }\n    const roHandle = {\n        x: cx - ro,\n        y: cy,\n    }\n\n    const handleCenterChange = defaultDebounce((newCx: number, newCy: number) => {\n        setCx(newCx);\n        setCy(newCy);\n    });\n    const handleRIChange = defaultDebounce(setRi);\n    const handleROChange = defaultDebounce(setRo);\n\n    const frameViewHandles: HandleRenderFunction = (handleDragStart, handleDrop) => (<>\n        <DraggableHandle x={cx} y={cy}\n            imageWidth={imageWidth}\n            onDragMove={handleCenterChange}\n            parentOnDrop={handleDrop}\n            parentOnDragStart={handleDragStart}\n            constraint={inRectConstraint(imageWidth, imageHeight)} />\n        <DraggableHandle x={roHandle.x} y={roHandle.y}\n            imageWidth={imageWidth}\n            onDragMove={cbToRadius(cx, cy, handleROChange)}\n            parentOnDrop={handleDrop}\n            parentOnDragStart={handleDragStart}\n            constraint={roConstraints(riHandle.x, cy)} />\n        <DraggableHandle x={riHandle.x} y={riHandle.y}\n            imageWidth={imageWidth}\n            parentOnDrop={handleDrop}\n            parentOnDragStart={handleDragStart}\n            onDragMove={cbToRadius(cx, cy, handleRIChange)}\n            constraint={riConstraint(roHandle.x, cy)} />\n    </>);\n\n    const frameViewWidgets = (\n        <Ring cx={cx} cy={cy} ri={ri} ro={ro}\n            imageWidth={imageWidth} />\n    )\n\n    const {\n        frameViewTitle, frameModeSelector,\n        handles: resultHandles,\n        widgets: resultWidgets,\n    } = useDefaultFrameView({\n        scanWidth,\n        scanHeight,\n        analysisId: analysis.id,\n    })\n\n    const subtitle = (\n        <>{frameViewTitle} Ring: center=(x={cx.toFixed(2)}, y={cy.toFixed(2)}), ri={ri.toFixed(2)}, ro={ro.toFixed(2)}</>\n    )\n\n    const dispatch = useDispatch();\n\n    const runAnalysis = () => {\n        dispatch(analysisActions.Actions.run(analysis.id, 1, {\n            type: AnalysisTypes.RADIAL_FOURIER,\n            parameters: {\n                shape: \"radial_fourier\",\n                cx, cy, ri, ro,\n                n_bins: nBins,\n                max_order: maxOrder,\n            }\n        }));\n    };\n\n    const toolbar = <Toolbar analysis={analysis} onApply={runAnalysis} busyIdxs={[1]} />\n\n    return (\n        <AnalysisLayoutTwoCol\n            title=\"Radial Fourier analysis\" subtitle={subtitle}\n            left={<>\n                <ResultList\n                    extraHandles={frameViewHandles} extraWidgets={frameViewWidgets}\n                    jobIndex={0} analysis={analysis.id}\n                    width={imageWidth} height={imageHeight}\n                    selectors={frameModeSelector}\n                />\n            </>}\n            right={<>\n                <ResultList\n                    jobIndex={1} analysis={analysis.id}\n                    width={scanWidth} height={scanHeight}\n                    extraHandles={resultHandles}\n                    extraWidgets={resultWidgets}\n                />\n            </>}\n            toolbar={toolbar}\n        />\n    );\n}\n\nexport default RadialFourierAnalysis;","import * as React from \"react\";\nimport { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { defaultDebounce } from \"../../helpers\";\nimport ResultList from \"../../job/components/ResultList\";\nimport { AnalysisTypes } from \"../../messages\";\nimport { cbToRadius, inRectConstraint, riConstraint, roConstraints } from \"../../widgets/constraints\";\nimport DraggableHandle from \"../../widgets/DraggableHandle\";\nimport Ring from \"../../widgets/Ring\";\nimport { HandleRenderFunction } from \"../../widgets/types\";\nimport * as analysisActions from \"../actions\";\nimport { AnalysisProps } from \"../types\";\nimport AnalysisLayoutTwoCol from \"./AnalysisLayoutTwoCol\";\nimport useDefaultFrameView from \"./DefaultFrameView\";\nimport Toolbar from \"./Toolbar\";\n\nconst RingMaskAnalysis: React.SFC<AnalysisProps> = ({ analysis, dataset }) => {\n    const { shape } = dataset.params;\n    const [scanHeight, scanWidth, imageHeight, imageWidth] = shape;\n    const minLength = Math.min(imageWidth, imageHeight);\n\n    const [cx, setCx] = useState(imageWidth / 2);\n    const [cy, setCy] = useState(imageHeight / 2);\n    const [ri, setRi] = useState(minLength / 4);\n    const [ro, setRo] = useState(minLength / 2);\n\n    const riHandle = {\n        x: cx - ri,\n        y: cy,\n    }\n    const roHandle = {\n        x: cx - ro,\n        y: cy,\n    }\n\n    const handleCenterChange = defaultDebounce((newCx: number, newCy: number) => {\n        setCx(newCx);\n        setCy(newCy);\n    });\n    const handleRIChange = defaultDebounce(setRi);\n    const handleROChange = defaultDebounce(setRo);\n\n    const frameViewHandles: HandleRenderFunction = (handleDragStart, handleDrop) => (<>\n        <DraggableHandle x={cx} y={cy}\n            imageWidth={imageWidth}\n            onDragMove={handleCenterChange}\n            parentOnDrop={handleDrop}\n            parentOnDragStart={handleDragStart}\n            constraint={inRectConstraint(imageWidth, imageHeight)} />\n        <DraggableHandle x={roHandle.x} y={roHandle.y}\n            imageWidth={imageWidth}\n            onDragMove={cbToRadius(cx, cy, handleROChange)}\n            parentOnDrop={handleDrop}\n            parentOnDragStart={handleDragStart}\n            constraint={roConstraints(riHandle.x, cy)} />\n        <DraggableHandle x={riHandle.x} y={riHandle.y}\n            imageWidth={imageWidth}\n            parentOnDrop={handleDrop}\n            parentOnDragStart={handleDragStart}\n            onDragMove={cbToRadius(cx, cy, handleRIChange)}\n            constraint={riConstraint(roHandle.x, cy)} />\n    </>);\n\n    const frameViewWidgets = (\n        <Ring cx={cx} cy={cy} ri={ri} ro={ro}\n            imageWidth={imageWidth} />\n    )\n\n    const dispatch = useDispatch();\n\n    const runAnalysis = () => {\n        dispatch(analysisActions.Actions.run(analysis.id, 1, {\n            type: AnalysisTypes.APPLY_RING_MASK,\n            parameters: {\n                shape: \"ring\",\n                cx, cy, ri, ro,\n            }\n        }));\n    };\n\n    const {\n        frameViewTitle, frameModeSelector,\n        handles: resultHandles,\n        widgets: resultWidgets,\n    } = useDefaultFrameView({\n        scanWidth,\n        scanHeight,\n        analysisId: analysis.id,\n    })\n\n    const subtitle = (\n        <>{frameViewTitle} Ring: center=(x={cx.toFixed(2)}, y={cy.toFixed(2)}), ri={ri.toFixed(2)}, ro={ro.toFixed(2)}</>\n    )\n\n    const toolbar = <Toolbar analysis={analysis} onApply={runAnalysis} busyIdxs={[1]} />\n\n    return (\n        <AnalysisLayoutTwoCol\n            title=\"Ring analysis\" subtitle={subtitle}\n            left={<>\n                <ResultList\n                    extraHandles={frameViewHandles} extraWidgets={frameViewWidgets}\n                    jobIndex={0} analysis={analysis.id}\n                    width={imageWidth} height={imageHeight}\n                    selectors={frameModeSelector}\n                />\n            </>}\n            right={<>\n                <ResultList\n                    jobIndex={1} analysis={analysis.id}\n                    width={scanWidth} height={scanHeight}\n                    extraHandles={resultHandles}\n                    extraWidgets={resultWidgets}\n                />\n            </>}\n            toolbar={toolbar}\n        />\n    );\n}\n\nexport default RingMaskAnalysis;","import { AnalysisTypes, DatasetOpen, PickFrameDetails, SumFramesDetails } from \"../messages\";\nimport CenterOfMassAnalysis from \"./components/CenterOfMassAnalysis\";\nimport DiskMaskAnalysis from \"./components/DiskMaskAnalysis\";\nimport FFTAnalysis from \"./components/FFTAnalysis\";\nimport PointSelectionAnalysis from \"./components/PointSelectionAnalysis\";\nimport RadialFourierAnalysis from \"./components/RadialFourierAnalysis\";\nimport RingMaskAnalysis from \"./components/RingMaskAnalysis\";\n\n\nexport type AnalysisStatus = \"busy\" | \"idle\";\n\nexport type JobList = string[];\n\nexport type JobHistory = string[][];\n\nexport type FrameAnalysisDetails = PickFrameDetails | SumFramesDetails;\n\nexport interface Analysis {\n    id: string,\n    dataset: string,\n    jobs: JobList,\n    jobHistory: JobHistory,\n    mainAnalysisType: AnalysisTypes,\n}\n\n\n/**\n * AnalysisProps is the interface you should implement with your Analysis, as a functional component.\n * For example:\n * \n * const MyAnalysis: React.FunctionalComponent<AnalysisProps> = ({ analysis, dataset }) = { ... }\n * \n */\nexport interface AnalysisProps {\n    analysis: AnalysisState,\n    dataset: DatasetOpen,\n}\n\nexport type AnalysisState = Analysis & {\n};\n\ninterface AnalysisMetadataItem {\n    desc: string,\n    title: string,\n    component?: React.FunctionComponent<AnalysisProps>,\n}\n\n/**\n * list of all analyses; those having a component will be available for selection in the UI\n * \n * please fill in a title and description, and reference your component.\n */\nexport const AnalysisMetadata: { [s: string]: AnalysisMetadataItem } = {\n    [AnalysisTypes.APPLY_RING_MASK]: {\n        desc: \"Apply a ring mask with center cx, cy; inner radius ri, outer radius ro\",\n        title: \"Ring\",\n        component: RingMaskAnalysis,\n    },\n    [AnalysisTypes.APPLY_DISK_MASK]: {\n        desc: \"Apply a disk mask with center cx, cy; radius r\",\n        title: \"Disk\",\n        component: DiskMaskAnalysis,\n    },\n    [AnalysisTypes.CENTER_OF_MASS]: {\n        desc: \"Compute the center of mass of all diffraction images\",\n        title: \"Center of mass\",\n        component: CenterOfMassAnalysis,\n    },\n    [AnalysisTypes.APPLY_POINT_SELECTOR]: {\n        desc: \"Create an image from a single pixel selected in the detector\",\n        title: \"Point selection\",\n        component: PointSelectionAnalysis,\n    },\n    [AnalysisTypes.SUM_FRAMES]: {\n        desc: \"Create a sum of all detector frames\",\n        title: \"Sum all frames\",\n    },\n    [AnalysisTypes.SUM_FRAMES_ROI]: {\n        desc: \"Create a sum of ROI\",\n        title: \"Sum over ROI\",\n    },\n    [AnalysisTypes.PICK_FRAME]: {\n        desc: \"Pick a single frame\",\n        title: \"Pick frame\",\n    },\n\n    [AnalysisTypes.PICK_FFT_FRAME]: {\n        desc: \"Pick a single frame\",\n        title: \"Pick frame\",\n    },\n\n    [AnalysisTypes.APPLY_FFT_MASK]: {\n        desc: \"Apply a ring mask with inner radius fourier_rad_in and outer radius fourier_rad_out in Fourier space\",\n        title: \"FFT analysis\",\n        component: FFTAnalysis\n    },\n    \n    [AnalysisTypes.FFTSUM_FRAMES]: {\n        desc: \"Fourier transform of sum of all detector frames\",\n        title: \"FFT of Sum all frames\",\n    },\n\n    [AnalysisTypes.RADIAL_FOURIER]: {\n        desc: \"Compute a radial Fourier analysis\",\n        title: \"Radial Fourier\",\n        component: RadialFourierAnalysis,\n    },\n}","import * as React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { DatasetStatus } from \"../../messages\";\nimport { RootReducer } from \"../../store\";\nimport { AnalysisMetadata, AnalysisProps, AnalysisState } from \"../types\";\n\ninterface AnalysisDispatcherProps {\n    analysis: AnalysisState,\n}\n\nconst AnalysisDispatcherComponent: React.SFC<AnalysisDispatcherProps> = ({ analysis }) => {\n    const dataset = useSelector((state: RootReducer) => state.datasets.byId[analysis.dataset])\n\n    if (dataset.status !== DatasetStatus.OPEN) {\n        return null;\n    }\n\n    const AnalysisComponent: React.FunctionComponent<AnalysisProps> | undefined = AnalysisMetadata[analysis.mainAnalysisType].component;\n    if (!AnalysisComponent) {\n        throw new Error(\"unknown analysis type\");\n    }\n\n    return <AnalysisComponent dataset={dataset} analysis={analysis} />;\n}\n\nexport default AnalysisDispatcherComponent;","import * as React from \"react\";\nimport { AnalysisReducerState } from \"../reducers\";\nimport Analysis from \"./Analysis\";\n\ninterface AnalysisProps {\n    analyses: AnalysisReducerState,\n}\n\nconst AnalysisList: React.SFC<AnalysisProps> = ({ analyses }) => {\n    return (<>{\n        analyses.ids.map(analysisId => <Analysis key={analysisId} analysis={analyses.byId[analysisId]} />)\n    }</>);\n}\n\nexport default AnalysisList;","interface IdMap<R> {\n    [s: string]: R\n}\n\nexport interface ById<R> {\n    ids: string[],\n    byId: IdMap<R>,\n};\n\n// TODO: make ById DeepReadonly\n// import { DeepReadonly } from 'utility-types'\n\nexport function updateById<R>(state: ById<R>, id: string, partialRecord: Partial<R>): ById<R> {\n    const newObj = Object.assign({}, state.byId[id], partialRecord);\n    const newById = Object.assign({}, state.byId, { [id]: newObj });\n    return Object.assign({}, state, { byId: newById });\n}\n\nexport function insertById<R>(state: ById<R>, id: string, record: R): ById<R> {\n    const newById = Object.assign({}, state.byId, { [id]: record });\n    const newIds = [...state.ids, id];\n    return { byId: newById, ids: newIds };\n}\n\nexport function constructById<R>(items: R[], key: (k: R) => string): IdMap<R> {\n    const byId = items.reduce((acc, item) => Object.assign(acc, {\n        [key(item)]: item,\n    }), {} as IdMap<R>);\n    return byId;\n}\n\nexport type Predicate<R> = (item: R) => boolean;\n\nexport function filterWithPred<R>(state: ById<R>, pred: Predicate<R>): ById<R> {\n    const ids = state.ids.filter(id => pred(state.byId[id]));\n    const byId: IdMap<R> = ids.reduce((acc, id) => Object.assign(acc, {\n        [id]: state.byId[id],\n    }), {});\n    return {\n        byId,\n        ids,\n    };\n}","import * as React from \"react\";\nimport { Dropdown, DropdownItemProps } from \"semantic-ui-react\";\nimport { getEnumValues } from \"../../helpers\";\nimport { AnalysisTypes } from \"../../messages\";\nimport { AnalysisMetadata } from \"../types\";\n\n\nconst getMetadata = (t: any) => AnalysisMetadata[AnalysisTypes[t]];\nconst analysisTypeKeys = getEnumValues(AnalysisTypes);\nconst analysisTypeOptions = analysisTypeKeys.filter(t => getMetadata(t).component !== undefined).map(t => ({\n    text: getMetadata(t).title,\n    value: AnalysisTypes[t],\n}));\n\ninterface AnalysisSelectProps {\n    onClick: (analysisType: AnalysisTypes) => void,\n    label: string,\n}\n\nconst selectData = (fn: (v: AnalysisTypes) => void) => (e: React.MouseEvent, data: DropdownItemProps) => {\n    return fn(data.value as AnalysisTypes);\n}\n\nconst AnalysisSelect: React.SFC<AnalysisSelectProps> = ({ onClick, label }) => {\n    return (\n        <Dropdown text={label} icon='add' floating={true} labeled={true} button={true} className='icon'>\n            <Dropdown.Menu>\n                <Dropdown.Header content='implemented analyses' />\n                {analysisTypeOptions.map(option => <Dropdown.Item key={option.value} onClick={selectData(onClick)} {...option} />)}\n            </Dropdown.Menu>\n        </Dropdown>\n    );\n}\n\nexport default AnalysisSelect;","import { ActionsUnion, createAction } from '../helpers/actionHelpers';\nimport { DatasetCreateParams, DatasetFormParams, DatasetState } from '../messages';\n\nexport enum ActionTypes {\n    OPEN = 'DATASET_OPEN',\n    CANCEL_OPEN = 'DATASET_CANCEL_OPEN',\n    CREATE = 'DATASET_CREATE',\n    CREATED = 'DATASET_CREATED',\n    ERROR = 'DATASET_ERROR',\n    DELETE = 'DATASET_DELETE',\n    DELETED = 'DATASET_DELETED',\n    DETECT = 'DATASET_DETECT',\n    DETECTED = 'DATASET_DETECTED',\n    DETECT_FAILED = 'DATASET_DETECT_FAILED',\n}\n\nexport const Actions = {\n    open: (path: string, initialParams?: DatasetFormParams) => createAction(ActionTypes.OPEN, { path, initialParams }),\n    cancelOpen: () => createAction(ActionTypes.CANCEL_OPEN),\n    create: (dataset: DatasetCreateParams) => createAction(ActionTypes.CREATE, { dataset }),\n    created: (dataset: DatasetState) => createAction(ActionTypes.CREATED, { dataset }),\n    error: (dataset: string, msg: string, timestamp: number, id: string) => createAction(ActionTypes.ERROR, { dataset, msg, timestamp, id }),\n    delete: (dataset: string) => createAction(ActionTypes.DELETE, { dataset }),\n    deleted: (dataset: string) => createAction(ActionTypes.DELETED, { dataset }),\n    detect: (path: string) => createAction(ActionTypes.DETECT, { path }),\n    detected: (path: string, params: DatasetFormParams) => createAction(ActionTypes.DETECTED, { path, params }),\n    detectFailed: (path: string) => createAction(ActionTypes.DETECT_FAILED, { path }),\n}\n\nexport type Actions = ActionsUnion<typeof Actions>;\n","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport * as analysisActions from \"../../analysis/actions\";\nimport AnalysisSelect from \"../../analysis/components/AnalysisSelect\";\nimport { AnalysisTypes, DatasetState } from \"../../messages\";\n\ninterface DatasetProps {\n    dataset: DatasetState\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch, ownProps: DatasetProps) => {\n    return {\n        handleAddAnalysis: (type: AnalysisTypes) => {\n            dispatch(analysisActions.Actions.create(ownProps.dataset.id, type));\n        },\n    }\n}\ntype MergedProps = DatasetProps & ReturnType<typeof mapDispatchToProps>;\n\nconst AddAnalysis: React.SFC<MergedProps> = ({ handleAddAnalysis }) => {\n    return <AnalysisSelect onClick={handleAddAnalysis} label='Add analysis' />\n}\n\n\nexport default connect(null, mapDispatchToProps)(AddAnalysis);","import * as React from \"react\";\nimport { Table } from \"semantic-ui-react\";\nimport { DatasetState } from \"../../messages\";\n\ninterface DatasetProps {\n    dataset: DatasetState\n}\n\nconst renderParamValue = (value: any) => {\n    if (value instanceof Array) {\n        return `(${value.join(\",\")})`;\n    } else {\n        return value;\n    }\n}\n\nconst renderParams = (params: any) => {\n    return Object.keys(params).map((key: string, idx: number) => {\n        return (\n            <Table.Row key={idx}>\n                <Table.Cell>{key}</Table.Cell>\n                <Table.Cell>{renderParamValue(params[key])}</Table.Cell>\n            </Table.Row>\n        );\n    })\n}\n\n\nconst DatasetParams: React.SFC<DatasetProps> = ({ dataset }) => {\n    return (\n        <Table>\n            <Table.Header>\n                <Table.Row>\n                    <Table.HeaderCell>Parameter</Table.HeaderCell>\n                    <Table.HeaderCell>Value</Table.HeaderCell>\n                </Table.Row>\n            </Table.Header>\n            <Table.Body>\n                {renderParams(dataset.params)}\n            </Table.Body>\n        </Table>\n    );\n}\n\n\nexport default DatasetParams;","import * as React from \"react\";\nimport { Table } from \"semantic-ui-react\";\nimport { DatasetOpen, DiagElemMsg } from \"../../messages\";\nimport DatasetParams from \"./DatasetParams\";\n\ninterface DatasetInfoProps {\n    dataset: DatasetOpen,\n}\n\nconst renderValue = (elem: DiagElemMsg) => {\n    if (elem.value instanceof Array) {\n        return <DiagElems diagnostics={elem.value} />\n    } else {\n        return elem.value;\n    }\n}\n\nconst DiagElem: React.SFC<{ elem: DiagElemMsg }> = ({ elem }) => {\n    return (\n        <Table.Row>\n            <Table.Cell>{elem.name}</Table.Cell>\n            <Table.Cell>{renderValue(elem)}</Table.Cell>\n        </Table.Row>\n    )\n}\n\nconst DiagElems: React.SFC<{ diagnostics: DiagElemMsg[] }> = ({ diagnostics }) => {\n    if (diagnostics.length === 0) {\n        return null;\n    }\n    return (\n        <Table>\n            <Table.Header>\n                <Table.Row>\n                    <Table.HeaderCell>Name</Table.HeaderCell>\n                    <Table.HeaderCell>Value</Table.HeaderCell>\n                </Table.Row>\n            </Table.Header>\n            <Table.Body>\n                {diagnostics.map((elem, idx) => (\n                    <DiagElem elem={elem} key={idx} />\n                ))}\n            </Table.Body>\n        </Table>\n    );\n}\n\nconst DatasetInfo: React.SFC<DatasetInfoProps> = ({ dataset }) => {\n    return (\n        <>\n            <DatasetParams dataset={dataset} />\n            <DiagElems diagnostics={dataset.diagnostics} />\n        </>\n    );\n}\n\nexport default DatasetInfo;","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { Button } from \"semantic-ui-react\";\nimport { DatasetState } from \"../../messages\";\nimport * as datasetActions from \"../actions\";\n\ninterface DatasetProps {\n    dataset: DatasetState,\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch, ownProps: DatasetProps) => {\n    return {\n        handleRemoveDataset: () => {\n            dispatch(datasetActions.Actions.delete(ownProps.dataset.id));\n        }\n    }\n}\n\ntype MergedProps = DatasetProps & ReturnType<typeof mapDispatchToProps>;\n\nconst DatasetToolbar: React.SFC<MergedProps> = ({ dataset, handleRemoveDataset }) => {\n    return (\n        <>\n            <Button icon=\"remove\" labelPosition=\"left\" onClick={handleRemoveDataset} content='Close Dataset' />\n        </>\n    );\n}\n\n\nexport default connect(null, mapDispatchToProps)(DatasetToolbar);","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Header, Icon, Message, Modal, Popup, Segment } from 'semantic-ui-react';\nimport AnalysisList from \"../../analysis/components/AnalysisList\";\nimport { AnalysisState } from \"../../analysis/types\";\nimport { filterWithPred } from \"../../helpers/reducerHelpers\";\nimport { DatasetState, DatasetStatus } from \"../../messages\";\nimport { RootReducer } from \"../../store\";\nimport AddAnalysis from \"./AddAnalysis\";\nimport DatasetInfo from \"./DatasetInfo\";\nimport DatasetToolbar from \"./DatasetToolbar\";\n\ninterface DatasetProps {\n    dataset: DatasetState\n}\n\nconst mapStateToProps = (state: RootReducer, ownProps: DatasetProps) => {\n    const p = (analysis: AnalysisState) => analysis.dataset === ownProps.dataset.id;\n    return {\n        analyses: filterWithPred(state.analyses, p),\n    }\n}\n\ntype MergedProps = DatasetProps & ReturnType<typeof mapStateToProps>;\n\nconst DatasetComponent: React.SFC<MergedProps> = ({ dataset, analyses }) => {\n    const msg = {\n        [DatasetStatus.OPENING]: `Opening dataset ${dataset.params.name}`,\n        [DatasetStatus.DELETING]: `Closing dataset ${dataset.params.name}`,\n    }\n    if (dataset.status === DatasetStatus.OPENING || dataset.status === DatasetStatus.DELETING) {\n        return (\n            <>\n                <Header as=\"h2\" dividing={true}>{dataset.params.name}</Header>\n                <Message icon={true}>\n                    <Icon name='cog' loading={true} />\n                    <Message.Content>\n                        <Message.Header>{msg[dataset.status]}</Message.Header>\n                    </Message.Content>\n                </Message>\n            </>\n        );\n    }\n\n    return (\n        <Segment.Group style={{ marginTop: \"3em\", marginBottom: \"3em\" }}>\n            <Segment.Group horizontal={true}>\n                <Segment>\n                    <Header as=\"h2\">\n                        <Icon name=\"database\" />\n                        <Modal trigger={\n                            <Header.Content>\n                                {dataset.params.name}\n                                {' '}\n                                <Icon name=\"info circle\" size=\"small\" link={true} />\n                            </Header.Content>\n                        }>\n                            <Popup.Header>{dataset.params.type} Dataset {dataset.params.name}</Popup.Header>\n                            <Popup.Content>\n                                <DatasetInfo dataset={dataset} />\n                            </Popup.Content>\n                        </Modal>\n                    </Header>\n                </Segment>\n                <Segment style={{ flexShrink: 1, flexGrow: 0 }}>\n                    <DatasetToolbar dataset={dataset} />\n                </Segment>\n            </Segment.Group>\n            {\n                analyses.ids.length > 0 ? (\n                    <>\n                        <Segment>\n                            <AnalysisList analyses={analyses} />\n                        </Segment>\n                    </>\n                ) : null\n            }\n            <Segment textAlign=\"center\">\n                <AddAnalysis dataset={dataset} />\n            </Segment>\n        </Segment.Group>\n    );\n}\n\nconst DatasetContainer = connect(mapStateToProps)(DatasetComponent);\n\nexport default DatasetContainer;","\nexport function parseNumList(nums: string) {\n    return nums.split(\",\").map(part => +part);\n}\n\nexport function getInitial<T extends object, K extends keyof T, V>(key: K, otherwise: V, values?: T): V | T[K] {\n    if (!values) {\n        return otherwise;\n    }\n    const res = values[key] !== undefined ? values[key] : otherwise;\n    return res;\n}","import { FormikProps, withFormik } from \"formik\";\nimport * as React from \"react\";\nimport { Button, Form } from \"semantic-ui-react\";\nimport { Omit } from \"../../helpers/types\";\nimport { DatasetParamsBLO, DatasetTypes } from \"../../messages\";\nimport { getInitial, parseNumList } from \"../helpers\";\nimport { OpenFormProps } from \"../types\";\n\n// some fields have different types in the form vs. in messages\ntype DatasetParamsBLOForForm = Omit<DatasetParamsBLO,\n    \"path\"\n    | \"type\"\n    | \"tileshape\"> & {\n        tileshape: string,\n    };\n\ntype FormValues = DatasetParamsBLOForForm\n\n\ntype MergedProps = FormikProps<FormValues> & OpenFormProps<DatasetParamsBLO>;\n\nconst BLOFileParamsForm: React.SFC<MergedProps> = ({\n    values,\n    touched,\n    errors,\n    dirty,\n    isSubmitting,\n    handleChange,\n    handleBlur,\n    handleSubmit,\n    handleReset,\n    onCancel,\n}) => {\n    return (\n        <Form onSubmit={handleSubmit}>\n            <Form.Field>\n                <label htmlFor=\"id_name\">Name:</label>\n                <input type=\"text\" name=\"name\" id=\"id_name\" value={values.name}\n                    onChange={handleChange}\n                    onBlur={handleBlur} />\n                {errors.name && touched.name && errors.name}\n            </Form.Field>\n            <Form.Field>\n                <label htmlFor=\"id_tileshape\">Tileshape:</label>\n                <input type=\"text\" name=\"tileshape\" id=\"id_tileshape\" value={values.tileshape}\n                    onChange={handleChange} onBlur={handleBlur} />\n            </Form.Field>\n\n            <Button primary={true} type=\"submit\" disabled={isSubmitting}>Load Dataset</Button>\n            <Button type=\"button\" onClick={onCancel}>Cancel</Button>\n        </Form>\n    )\n}\n\nexport default withFormik<OpenFormProps<DatasetParamsBLO>, FormValues>({\n    mapPropsToValues: ({ initial }) => ({\n        name: getInitial(\"name\", \"\", initial),\n        tileshape: getInitial(\"tileshape\", \"1, 8, 128, 128\", initial).toString(),\n    }),\n    handleSubmit: (values, formikBag) => {\n        const { onSubmit, path } = formikBag.props;\n        onSubmit({\n            path,\n            type: DatasetTypes.BLO,\n            name: values.name,\n            tileshape: parseNumList(values.tileshape),\n        });\n    }\n})(BLOFileParamsForm);\n","import { ActionsUnion, createAction } from \"../helpers/actionHelpers\";\n\nexport enum ActionTypes {\n    DISMISS = \"ERROR_DISMISS\",\n}\n\nexport const Actions = {\n    dismiss: (id: string) => createAction(ActionTypes.DISMISS, { id }),\n}\n\nexport type Actions = ActionsUnion<typeof Actions>;","import * as React from \"react\";\nimport { Dropdown, DropdownProps } from \"semantic-ui-react\";\nimport { getEnumValues } from \"../../helpers\";\nimport { DatasetTypes } from \"../../messages\";\n\n\nconst datasetTypeKeys = getEnumValues(DatasetTypes);\nconst datasetTypeOptions = datasetTypeKeys.map(t => ({\n    // text: DatasetTypeMetadata[DatasetTypes[t as any]].short,\n    text: DatasetTypes[t],\n    value: DatasetTypes[t],\n}));\n\ninterface DatasetTypeSelectProps {\n    onClick: (e: React.SyntheticEvent, data: DropdownProps) => void,\n    currentType: DatasetTypes,\n}\n\nconst DatasetTypeSelect: React.SFC<DatasetTypeSelectProps> = ({ currentType, onClick }) => {\n    return (\n        <>\n            <Dropdown\n                inline={true}\n                options={datasetTypeOptions}\n                value={currentType}\n                onChange={onClick}\n            />\n        </>\n    );\n}\n\nexport default DatasetTypeSelect;","import { FormikProps, withFormik } from \"formik\";\nimport * as React from \"react\";\nimport { Button, Form } from \"semantic-ui-react\";\nimport { Omit } from \"../../helpers/types\";\nimport { DatasetParamsEMPAD, DatasetTypes } from \"../../messages\";\nimport { getInitial, parseNumList } from \"../helpers\";\nimport { OpenFormProps } from \"../types\";\n\n// some fields have different types in the form vs. in messages\ntype DatasetParamsEMPADForForm = Omit<DatasetParamsEMPAD,\n    \"path\"\n    | \"type\"\n    | \"scan_size\"\n> & {\n    scan_size: string,\n};\n\ntype FormValues = DatasetParamsEMPADForForm\n\ntype MergedProps = FormikProps<FormValues> & OpenFormProps<DatasetParamsEMPAD>;\n\nconst RawFileParamsForm: React.SFC<MergedProps> = ({\n    values,\n    touched,\n    errors,\n    dirty,\n    isSubmitting,\n    handleChange,\n    handleBlur,\n    handleSubmit,\n    handleReset,\n    onCancel,\n}) => {\n    return (\n        <Form onSubmit={handleSubmit}>\n            <Form.Field>\n                <label htmlFor=\"id_name\">Name:</label>\n                <input type=\"text\" name=\"name\" id=\"id_name\" value={values.name}\n                    onChange={handleChange}\n                    onBlur={handleBlur} />\n                {errors.name && touched.name && errors.name}\n            </Form.Field>\n            <Form.Field>\n                <label htmlFor=\"id_scan_size\">Scan Size:</label>\n                <input type=\"text\" name=\"scan_size\" id=\"id_scan_size\" value={values.scan_size}\n                    onChange={handleChange} onBlur={handleBlur} />\n            </Form.Field>\n            <Button primary={true} type=\"submit\" disabled={isSubmitting}>Load Dataset</Button>\n            <Button type=\"button\" onClick={onCancel}>Cancel</Button>\n        </Form>\n    )\n}\n\nexport default withFormik<OpenFormProps<DatasetParamsEMPAD>, FormValues>({\n    mapPropsToValues: ({ initial }) => ({\n        name: getInitial(\"name\", \"\", initial),\n        scan_size: getInitial(\"scan_size\", \"\", initial).toString(),\n    }),\n    handleSubmit: (values, formikBag) => {\n        const { onSubmit, path } = formikBag.props;\n        onSubmit({\n            path,\n            type: DatasetTypes.EMPAD,\n            name: values.name,\n            scan_size: parseNumList(values.scan_size),\n        });\n    }\n})(RawFileParamsForm);\n\n","import { DatasetParamsFRMS6 } from \"../../messages\";\n\nimport { FormikProps, withFormik } from \"formik\";\nimport * as React from \"react\";\nimport { Button, Form } from \"semantic-ui-react\";\nimport { Omit } from \"../../helpers/types\";\nimport { DatasetTypes } from \"../../messages\";\nimport { getInitial } from \"../helpers\";\nimport { OpenFormProps } from \"../types\";\n\n// some fields have different types in the form vs. in messages\ntype DatasetParamsFRMS6ForForm = Omit<DatasetParamsFRMS6,\n    \"path\" | \"type\">;\n\ntype FormValues = DatasetParamsFRMS6ForForm\n\n\ntype MergedProps = FormikProps<FormValues> & OpenFormProps<DatasetParamsFRMS6>;\nconst FRMS6ParamsForm: React.SFC<MergedProps> = ({\n    values,\n    touched,\n    errors,\n    dirty,\n    isSubmitting,\n    handleChange,\n    handleBlur,\n    handleSubmit,\n    handleReset,\n    onCancel,\n}) => {\n    return (\n        <Form onSubmit={handleSubmit}>\n            <Form.Field>\n                <label htmlFor=\"id_name\">Name:</label>\n                <input type=\"text\" name=\"name\" id=\"id_name\" value={values.name}\n                    onChange={handleChange}\n                    onBlur={handleBlur} />\n                {errors.name && touched.name && errors.name}\n            </Form.Field>\n\n            <Button primary={true} type=\"submit\" disabled={isSubmitting}>Load Dataset</Button>\n            <Button type=\"button\" onClick={onCancel}>Cancel</Button>\n        </Form>\n    )\n}\n\nexport default withFormik<OpenFormProps<DatasetParamsFRMS6>, FormValues>({\n    mapPropsToValues: ({ initial }) => ({\n        name: getInitial(\"name\", \"\", initial),\n    }),\n    handleSubmit: (values, formikBag) => {\n        const { onSubmit, path } = formikBag.props;\n        onSubmit({\n            path,\n            type: DatasetTypes.FRMS6,\n            name: values.name,\n        });\n    }\n})(FRMS6ParamsForm);\n","import { FormikProps, withFormik } from \"formik\";\nimport * as React from \"react\";\nimport { Button, Form } from \"semantic-ui-react\";\nimport { Omit } from \"../../helpers/types\";\nimport { DatasetParamsHDF5, DatasetTypes } from \"../../messages\";\nimport { getInitial } from \"../helpers\";\nimport { OpenFormProps } from \"../types\";\n\ntype DatasetParamsHDF5ForForm = Omit<DatasetParamsHDF5, \"path\" | \"type\" | \"tileshape\"> & { tileshape: string, };\n\ntype FormValues = DatasetParamsHDF5ForForm\n\ntype MergedProps = FormikProps<FormValues> & OpenFormProps<DatasetParamsHDF5>;\n\nconst HDF5ParamsForm: React.SFC<MergedProps> = ({\n    values,\n    touched,\n    errors,\n    dirty,\n    isSubmitting,\n    handleChange,\n    handleBlur,\n    handleSubmit,\n    handleReset,\n    onCancel,\n}) => {\n    return (\n        <Form onSubmit={handleSubmit}>\n            <Form.Field>\n                <label htmlFor=\"id_name\">Name:</label>\n                <input type=\"text\" name=\"name\" id=\"id_name\" value={values.name}\n                    onChange={handleChange}\n                    onBlur={handleBlur} />\n                {errors.name && touched.name && errors.name}\n            </Form.Field>\n            <Form.Field>\n                <label htmlFor=\"id_ds_path\">HDF5 Dataset Path:</label>\n                <input type=\"text\" name=\"ds_path\" id=\"id_ds_path\" value={values.ds_path}\n                    onChange={handleChange} onBlur={handleBlur} />\n            </Form.Field>\n            <Form.Field>\n                <label htmlFor=\"id_tileshape\">Tileshape:</label>\n                <input type=\"text\" name=\"tileshape\" id=\"id_tileshape\" value={values.tileshape}\n                    onChange={handleChange} onBlur={handleBlur} />\n            </Form.Field>\n            <Button primary={true} type=\"submit\" disabled={isSubmitting}>Load Dataset</Button>\n            <Button onClick={onCancel} >Cancel</Button>\n        </Form>\n    )\n}\n\nexport default withFormik<OpenFormProps<DatasetParamsHDF5>, FormValues>({\n    mapPropsToValues: ({ initial }) => ({\n        name: getInitial(\"name\", \"\", initial),\n        tileshape: getInitial(\"tileshape\", \"1, 8, 128, 128\", initial).toString(),\n        ds_path: getInitial(\"ds_path\", \"\", initial),\n    }),\n    handleSubmit: (values, formikBag) => {\n        const { onSubmit, path } = formikBag.props;\n        onSubmit({\n            path,\n            type: DatasetTypes.HDF5,\n            name: values.name,\n            ds_path: values.ds_path,\n            tileshape: values.tileshape.split(\",\").map(part => +part),\n        });\n    }\n})(HDF5ParamsForm);","import { FormikProps, withFormik } from \"formik\";\nimport * as React from \"react\";\nimport { Button, Form } from \"semantic-ui-react\";\nimport { Omit } from \"../../helpers/types\";\nimport { DatasetParamsHDFS, DatasetTypes } from \"../../messages\";\nimport { getInitial } from \"../helpers\";\nimport { OpenFormProps } from \"../types\";\n\ntype RawDatasetParamsHDFS = Omit<DatasetParamsHDFS, \"path\" | \"type\" | \"tileshape\"> & {\n    tileshape: string,\n};\n\ntype FormValues = RawDatasetParamsHDFS\n\ntype MergedProps = FormikProps<FormValues> & OpenFormProps<DatasetParamsHDFS>;\n\nconst HDFSParamsForm: React.SFC<MergedProps> = ({\n    values,\n    touched,\n    errors,\n    dirty,\n    isSubmitting,\n    handleChange,\n    handleBlur,\n    handleSubmit,\n    handleReset,\n    onCancel,\n}) => {\n    return (\n        <Form onSubmit={handleSubmit}>\n            <Form.Field>\n                <label htmlFor=\"id_name\">Name:</label>\n                <input type=\"text\" name=\"name\" id=\"id_name\" value={values.name}\n                    onChange={handleChange}\n                    onBlur={handleBlur} />\n                {errors.name && touched.name && errors.name}\n            </Form.Field>\n            <Form.Field>\n                <label htmlFor=\"id_tileshape\">Tileshape:</label>\n                <input type=\"text\" name=\"tileshape\" id=\"id_tileshape\" value={values.tileshape}\n                    onChange={handleChange} onBlur={handleBlur} />\n            </Form.Field>\n            <Button primary={true} type=\"submit\" disabled={isSubmitting}>Load Dataset</Button>\n            <Button type=\"button\" onClick={onCancel}>Cancel</Button>\n        </Form>\n    )\n}\n\nexport default withFormik<OpenFormProps<DatasetParamsHDFS>, FormValues>({\n    mapPropsToValues: ({ initial }) => ({\n        name: getInitial(\"name\", \"\", initial),\n        tileshape: getInitial(\"tileshape\", \"1, 8, 128, 128\", initial).toString(),\n    }),\n    handleSubmit: (values, formikBag) => {\n        const { onSubmit, path } = formikBag.props;\n        onSubmit({\n            path,\n            type: DatasetTypes.HDFS,\n            name: values.name,\n            tileshape: values.tileshape.split(\",\").map(part => +part),\n        });\n    }\n})(HDFSParamsForm);","import { FormikProps, withFormik } from \"formik\";\nimport * as React from \"react\";\nimport { Button, Form } from \"semantic-ui-react\";\nimport { Omit } from \"../../helpers/types\";\nimport { DatasetParamsK2IS, DatasetTypes } from \"../../messages\";\nimport { getInitial } from \"../helpers\";\nimport { OpenFormProps } from \"../types\";\n\n// some fields have different types in the form vs. in messages\ntype DatasetParamsK2ISForForm = Omit<DatasetParamsK2IS,\n    \"path\" | \"type\">;\n\ntype FormValues = DatasetParamsK2ISForForm\n\n\ntype MergedProps = FormikProps<FormValues> & OpenFormProps<DatasetParamsK2IS>;\n\nconst K2ISFileParamsForm: React.SFC<MergedProps> = ({\n    values,\n    touched,\n    errors,\n    dirty,\n    isSubmitting,\n    handleChange,\n    handleBlur,\n    handleSubmit,\n    handleReset,\n    onCancel,\n}) => {\n    return (\n        <Form onSubmit={handleSubmit}>\n            <Form.Field>\n                <label htmlFor=\"id_name\">Name:</label>\n                <input type=\"text\" name=\"name\" id=\"id_name\" value={values.name}\n                    onChange={handleChange}\n                    onBlur={handleBlur} />\n                {errors.name && touched.name && errors.name}\n            </Form.Field>\n\n            <Button primary={true} type=\"submit\" disabled={isSubmitting}>Load Dataset</Button>\n            <Button type=\"button\" onClick={onCancel}>Cancel</Button>\n        </Form>\n    )\n}\n\nexport default withFormik<OpenFormProps<DatasetParamsK2IS>, FormValues>({\n    mapPropsToValues: ({ initial }) => ({\n        name: getInitial(\"name\", \"\", initial),\n    }),\n    handleSubmit: (values, formikBag) => {\n        const { onSubmit, path } = formikBag.props;\n        onSubmit({\n            path,\n            type: DatasetTypes.K2IS,\n            name: values.name,\n        });\n    }\n})(K2ISFileParamsForm);\n\n","import { FormikProps, withFormik } from \"formik\";\nimport * as React from \"react\";\nimport { Button, Form } from \"semantic-ui-react\";\nimport { Omit } from \"../../helpers/types\";\nimport { DatasetParamsMIB, DatasetTypes } from \"../../messages\";\nimport { getInitial, parseNumList } from \"../helpers\";\nimport { OpenFormProps } from \"../types\";\n\n// some fields have different types in the form vs. in messages\ntype DatasetParamsMIBForForm = Omit<DatasetParamsMIB,\n    \"path\"\n    | \"type\"\n    | \"tileshape\"\n    | \"scan_size\"\n> & {\n    tileshape: string,\n    scan_size: string,\n};\n\ntype FormValues = DatasetParamsMIBForForm\n\ntype MergedProps = FormikProps<FormValues> & OpenFormProps<DatasetParamsMIB>;\n\nconst RawFileParamsForm: React.SFC<MergedProps> = ({\n    values,\n    touched,\n    errors,\n    dirty,\n    isSubmitting,\n    handleChange,\n    handleBlur,\n    handleSubmit,\n    handleReset,\n    onCancel,\n}) => {\n    return (\n        <Form onSubmit={handleSubmit}>\n            <Form.Field>\n                <label htmlFor=\"id_name\">Name:</label>\n                <input type=\"text\" name=\"name\" id=\"id_name\" value={values.name}\n                    onChange={handleChange}\n                    onBlur={handleBlur} />\n                {errors.name && touched.name && errors.name}\n            </Form.Field>\n            <Form.Field>\n                <label htmlFor=\"id_tileshape\">Tileshape:</label>\n                <input type=\"text\" name=\"tileshape\" id=\"id_tileshape\" value={values.tileshape}\n                    onChange={handleChange} onBlur={handleBlur} />\n            </Form.Field>\n            <Form.Field>\n                <label htmlFor=\"id_scan_size\">Scan Size:</label>\n                <input type=\"text\" name=\"scan_size\" id=\"id_scan_size\" value={values.scan_size}\n                    onChange={handleChange} onBlur={handleBlur} />\n            </Form.Field>\n            <Button primary={true} type=\"submit\" disabled={isSubmitting}>Load Dataset</Button>\n            <Button type=\"button\" onClick={onCancel}>Cancel</Button>\n        </Form>\n    )\n}\n\nexport default withFormik<OpenFormProps<DatasetParamsMIB>, FormValues>({\n    mapPropsToValues: ({ initial }) => ({\n        name: getInitial(\"name\", \"\", initial),\n        tileshape: getInitial(\"tileshape\", \"1, 8, 256, 256\", initial).toString(),\n        scan_size: getInitial(\"scan_size\", \"\", initial).toString(),\n    }),\n    handleSubmit: (values, formikBag) => {\n        const { onSubmit, path } = formikBag.props;\n        onSubmit({\n            path,\n            type: DatasetTypes.MIB,\n            name: values.name,\n            tileshape: parseNumList(values.tileshape),\n            scan_size: parseNumList(values.scan_size),\n        });\n    }\n})(RawFileParamsForm);\n","import { FormikProps, withFormik } from \"formik\";\nimport * as React from \"react\";\nimport { Button, Form } from \"semantic-ui-react\";\nimport { Omit } from \"../../helpers/types\";\nimport { DatasetParamsRaw, DatasetTypes } from \"../../messages\";\nimport { getInitial, parseNumList } from \"../helpers\";\nimport { OpenFormProps } from \"../types\";\n\n// some fields have different types in the form vs. in messages\ntype DatasetParamsRawForForm = Omit<DatasetParamsRaw,\n    \"type\"\n    | \"path\"\n    | \"tileshape\"\n    | \"scan_size\"\n    | \"detector_size\"> & {\n        tileshape: string,\n        scan_size: string\n        detector_size: string,\n    };\n\ntype FormValues = DatasetParamsRawForForm\n\ntype MergedProps = FormikProps<FormValues> & OpenFormProps<DatasetParamsRaw>;\n\nconst RawFileParamsForm: React.SFC<MergedProps> = ({\n    values,\n    touched,\n    errors,\n    dirty,\n    isSubmitting,\n    handleChange,\n    handleBlur,\n    handleSubmit,\n    handleReset,\n    onCancel,\n}) => {\n    return (\n        <Form onSubmit={handleSubmit}>\n            <Form.Field>\n                <label htmlFor=\"id_name\">Name:</label>\n                <input type=\"text\" name=\"name\" id=\"id_name\" value={values.name}\n                    onChange={handleChange}\n                    onBlur={handleBlur} />\n                {errors.name && touched.name && errors.name}\n            </Form.Field>\n            <Form.Field>\n                <label htmlFor=\"id_tileshape\">Tileshape:</label>\n                <input type=\"text\" name=\"tileshape\" id=\"id_tileshape\" value={values.tileshape}\n                    onChange={handleChange} onBlur={handleBlur} />\n            </Form.Field>\n            <Form.Field>\n                <label htmlFor=\"id_scan_size\">Scan Size:</label>\n                <input type=\"text\" name=\"scan_size\" id=\"id_scan_size\" value={values.scan_size}\n                    onChange={handleChange} onBlur={handleBlur} />\n            </Form.Field>\n            <Form.Field>\n                <label htmlFor=\"id_dtype\">Datatype (uint16, uint32, float32, float64, &gt;u2, ..., can be anything that is <a href=\"https://docs.scipy.org/doc/numpy-1.15.1/reference/arrays.dtypes.html\">understood by numpy as a dtype</a>):</label>\n                <input type=\"text\" name=\"dtype\" id=\"id_dtype\" value={values.dtype}\n                    onChange={handleChange} onBlur={handleBlur} />\n            </Form.Field>\n\n            <Form.Field>\n                <label htmlFor=\"id_detector_size\">Detector Size (as in the file):</label>\n                <input type=\"text\" name=\"detector_size\" id=\"id_detector_size\" value={values.detector_size}\n                    onChange={handleChange} onBlur={handleBlur} />\n            </Form.Field>\n            <Form.Field>\n                <label htmlFor=\"id_enable_direct\">Enable Direct I/O (for usage with fast SSDs and files much larger than RAM):</label>\n                <input type=\"checkbox\" name=\"enable_direct\" id=\"id_enable_direct\" checked={values.enable_direct}\n                    onChange={handleChange} onBlur={handleBlur} />\n            </Form.Field>\n            <Button primary={true} type=\"submit\" disabled={isSubmitting}>Load Dataset</Button>\n            <Button type=\"button\" onClick={onCancel}>Cancel</Button>\n        </Form>\n    )\n}\n\nexport default withFormik<OpenFormProps<DatasetParamsRaw>, FormValues>({\n    mapPropsToValues: ({ initial }) => ({\n        name: getInitial(\"name\", \"\", initial),\n        enable_direct: getInitial(\"enable_direct\", false, initial),\n        tileshape: getInitial(\"tileshape\", \"1, 8, 128, 128\", initial).toString(),\n        detector_size: getInitial(\"detector_size\", \"\", initial).toString(),\n        scan_size: getInitial(\"scan_size\", \"\", initial).toString(),\n        dtype: getInitial(\"dtype\", \"float32\", initial),\n    }),\n    handleSubmit: (values, formikBag) => {\n        const { onSubmit, path } = formikBag.props;\n        onSubmit({\n            path,\n            type: DatasetTypes.RAW,\n            name: values.name,\n            dtype: values.dtype,\n            enable_direct: values.enable_direct,\n            tileshape: parseNumList(values.tileshape),\n            scan_size: parseNumList(values.scan_size),\n            detector_size: parseNumList(values.detector_size),\n        });\n    }\n})(RawFileParamsForm);\n","import { DatasetParamsSER } from \"../../messages\";\n\nimport { FormikProps, withFormik } from \"formik\";\nimport * as React from \"react\";\nimport { Button, Form } from \"semantic-ui-react\";\nimport { Omit } from \"../../helpers/types\";\nimport { DatasetTypes } from \"../../messages\";\nimport { getInitial } from \"../helpers\";\nimport { OpenFormProps } from \"../types\";\n\n// some fields have different types in the form vs. in messages\ntype DatasetParamsSERForForm = Omit<DatasetParamsSER,\n    \"path\" | \"type\">;\n\ntype FormValues = DatasetParamsSERForForm\n\n\ntype MergedProps = FormikProps<FormValues> & OpenFormProps<DatasetParamsSER>;\nconst SERParamsForm: React.SFC<MergedProps> = ({\n    values,\n    touched,\n    errors,\n    dirty,\n    isSubmitting,\n    handleChange,\n    handleBlur,\n    handleSubmit,\n    handleReset,\n    onCancel,\n}) => {\n    return (\n        <Form onSubmit={handleSubmit}>\n            <Form.Field>\n                <label htmlFor=\"id_name\">Name:</label>\n                <input type=\"text\" name=\"name\" id=\"id_name\" value={values.name}\n                    onChange={handleChange}\n                    onBlur={handleBlur} />\n                {errors.name && touched.name && errors.name}\n            </Form.Field>\n\n            <Button primary={true} type=\"submit\" disabled={isSubmitting}>Load Dataset</Button>\n            <Button type=\"button\" onClick={onCancel}>Cancel</Button>\n        </Form>\n    )\n}\n\nexport default withFormik<OpenFormProps<DatasetParamsSER>, FormValues>({\n    mapPropsToValues: ({ initial }) => ({\n        name: getInitial(\"name\", \"\", initial),\n    }),\n    handleSubmit: (values, formikBag) => {\n        const { onSubmit, path } = formikBag.props;\n        onSubmit({\n            path,\n            type: DatasetTypes.SER,\n            name: values.name,\n        });\n    }\n})(SERParamsForm);","import * as React from \"react\";\nimport { connect } from 'react-redux';\nimport { Dispatch } from \"redux\";\nimport { DropdownProps, Header, Segment } from \"semantic-ui-react\";\nimport uuid from \"uuid/v4\";\nimport { assertNotReached } from \"../../helpers\";\nimport { DatasetFormParams, DatasetTypes } from '../../messages';\nimport { RootReducer } from \"../../store\";\nimport * as datasetActions from \"../actions\";\nimport BLOParamsForm from \"./BLOParamsForm\";\nimport DatasetTypeSelect from \"./DatasetTypeSelect\";\nimport EMPADParamsForm from \"./EMPADParamsForm\";\nimport FRMS6ParamsForm from \"./FRMS6ParamsForm\";\nimport HDF5ParamsForm from \"./HDF5ParamsForm\";\nimport HDFSParamsForm from './HDFSParamsForm';\nimport K2ISParamsForm from \"./K2ISParamsForm\";\nimport MIBParamsForm from \"./MIBParamsForm\";\nimport RawFileParamsForm from \"./RawFileParamsForm\";\nimport SERParamsForm from \"./SERParamsForm\";\n\nconst mapDispatchToProps = (dispatch: Dispatch) => {\n    return {\n        createDataset: (params: DatasetFormParams) => {\n            dispatch(datasetActions.Actions.create({\n                id: uuid(),\n                params,\n            }));\n        },\n        onCancel: () => dispatch(datasetActions.Actions.cancelOpen()),\n    };\n}\n\nconst mapStateToProps = (state: RootReducer) => {\n    return {\n        formVisible: state.openDataset.formVisible,\n        formPath: state.openDataset.formPath,\n        formInitial: state.openDataset.formInitialParams,\n    };\n}\n\n\ntype MergedProps = ReturnType<typeof mapDispatchToProps> & ReturnType<typeof mapStateToProps>;\n\ninterface DatasetOpenState {\n    datasetType: DatasetTypes\n}\n\n\nclass DatasetOpen extends React.Component<MergedProps, DatasetOpenState> {\n    public state = {\n        datasetType: DatasetTypes.RAW,\n    }\n\n    constructor(props: MergedProps) {\n        super(props);\n        if (props.formInitial !== undefined) {\n            this.state = {\n                datasetType: props.formInitial.type,\n            };\n        }\n    }\n\n    public setDatasetType = (e: React.SyntheticEvent, data: DropdownProps) => {\n        const type = data.value as DatasetTypes;\n        this.setState({\n            datasetType: type,\n        })\n    }\n\n    public render() {\n        const { formPath, formInitial, createDataset, onCancel } = this.props;\n        const { datasetType } = this.state;\n\n        const renderForm = (form: React.ReactNode) => {\n            return (\n                <Segment>\n                    Type: <DatasetTypeSelect onClick={this.setDatasetType} currentType={datasetType} />\n                    <Header as=\"h2\">Open: {formPath}</Header>\n                    {form}\n                </Segment>\n            );\n        }\n        switch (datasetType) {\n            case DatasetTypes.HDF5: {\n                const initial = formInitial && datasetType === formInitial.type ? formInitial : undefined;\n                return renderForm(<HDF5ParamsForm path={formPath} initial={initial} onSubmit={createDataset} onCancel={onCancel} />);\n            }\n            case DatasetTypes.HDFS: {\n                const initial = formInitial && datasetType === formInitial.type ? formInitial : undefined;\n                return renderForm(<HDFSParamsForm path={formPath} initial={initial} onSubmit={createDataset} onCancel={onCancel} />);\n            }\n            case DatasetTypes.RAW: {\n                const initial = formInitial && datasetType === formInitial.type ? formInitial : undefined;\n                return renderForm(<RawFileParamsForm path={formPath} initial={initial} onSubmit={createDataset} onCancel={onCancel} />);\n            }\n            case DatasetTypes.MIB: {\n                const initial = formInitial && datasetType === formInitial.type ? formInitial : undefined;\n                return renderForm(<MIBParamsForm path={formPath} initial={initial} onSubmit={createDataset} onCancel={onCancel} />);\n            }\n            case DatasetTypes.BLO: {\n                const initial = formInitial && datasetType === formInitial.type ? formInitial : undefined;\n                return renderForm(<BLOParamsForm path={formPath} initial={initial} onSubmit={createDataset} onCancel={onCancel} />);\n            }\n            case DatasetTypes.K2IS: {\n                const initial = formInitial && datasetType === formInitial.type ? formInitial : undefined;\n                return renderForm(<K2ISParamsForm path={formPath} initial={initial} onSubmit={createDataset} onCancel={onCancel} />);\n            }\n            case DatasetTypes.SER: {\n                const initial = formInitial && datasetType === formInitial.type ? formInitial : undefined;\n                return renderForm(<SERParamsForm path={formPath} initial={initial} onSubmit={createDataset} onCancel={onCancel} />);\n            }\n            case DatasetTypes.FRMS6: {\n                const initial = formInitial && datasetType === formInitial.type ? formInitial : undefined;\n                return renderForm(<FRMS6ParamsForm path={formPath} initial={initial} onSubmit={createDataset} onCancel={onCancel} />);\n            }\n            case DatasetTypes.EMPAD: {\n                const initial = formInitial && datasetType === formInitial.type ? formInitial : undefined;\n                return renderForm(<EMPADParamsForm path={formPath} initial={initial} onSubmit={createDataset} onCancel={onCancel} />)\n            }\n        }\n        return assertNotReached(\"unknown dataset type\");\n    }\n\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(DatasetOpen)","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Header, Icon, Message } from \"semantic-ui-react\";\nimport { RootReducer } from \"../../store\";\n\nconst mapStateToProps = (state: RootReducer) => {\n    return {\n        busy: state.openDataset.busy,\n        path: state.openDataset.busyPath,\n    };\n}\n\ntype MergedProps = ReturnType<typeof mapStateToProps>;\n\nconst DatasetOpenSpinner: React.SFC<MergedProps> = ({ busy, path }) => {\n    if (!busy) {\n        return null;\n    }\n    return (\n        <>\n            <Header as=\"h2\" dividing={true}>Loading...</Header>\n            <Message icon={true}>\n                <Icon name='cog' loading={true} />\n                <Message.Content>\n                    <Message.Header>Detecting parameters for {path}</Message.Header>\n                </Message.Content>\n            </Message>\n        </>\n    );\n}\n\nexport default connect(mapStateToProps)(DatasetOpenSpinner);","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport BrowserWrapper from \"../../browser/components/BrowserWrapper\";\nimport { RootReducer } from \"../../store\";\nimport { DatasetsState } from \"../types\";\nimport Dataset from \"./Dataset\";\nimport DatasetOpen from \"./DatasetOpen\";\nimport DatasetOpenSpinner from \"./DatasetOpenSpinner\";\n\ninterface DatasetListProps {\n    datasets: DatasetsState\n}\n\nconst mapStateToProps = (state: RootReducer) => {\n    return {\n        datasets: state.datasets,\n        formVisible: state.openDataset.formVisible,\n        formPath: state.openDataset.formPath,\n    };\n}\n\ntype MergedProps = DatasetListProps & ReturnType<typeof mapStateToProps>;\n\nclass DatasetList extends React.Component<MergedProps> {\n    public render() {\n        const { formVisible, datasets } = this.props;\n\n        return (\n            <>\n                {datasets.ids.map((dsId: string) => <Dataset dataset={datasets.byId[dsId]} key={dsId} />)}\n                <DatasetOpenSpinner />\n                {formVisible && <DatasetOpen />}\n                <BrowserWrapper />\n            </>\n        );\n    }\n}\n\nexport default connect(mapStateToProps)(DatasetList);","import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { Dispatch } from 'redux';\nimport { Message } from 'semantic-ui-react';\nimport * as errorActions from '../actions';\nimport { ErrorMessage } from '../reducers';\n\nconst mapDispatchToProps = (dispatch: Dispatch, ownProps: ErrorProps) => {\n    return {\n        dismiss: () => dispatch(errorActions.Actions.dismiss(ownProps.error.id)),\n    }\n}\n\ninterface ErrorProps {\n    error: ErrorMessage,\n}\n\ntype MergedProps = ErrorProps & ReturnType<typeof mapDispatchToProps>;\n\nconst ErrorComponent: React.SFC<MergedProps> = ({ dismiss, error }) => {\n    return (\n        <Message negative={true} onDismiss={dismiss}>{error.msg}</Message>\n    )\n}\n\nexport default connect(null, mapDispatchToProps)(ErrorComponent);","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Modal } from \"semantic-ui-react\";\nimport { RootReducer } from \"../../store\";\nimport Error from \"./Error\";\n\nconst mapStateToProps = (state: RootReducer) => {\n    return {\n        errors: state.errors,\n        clusterConnected: state.clusterConnection.status === \"connected\",\n        channelConnected: (state.channelStatus.status === \"connected\" ||\n            state.channelStatus.status === \"ready\"),\n    }\n}\n\ntype MergedProps = ReturnType<typeof mapStateToProps>;\n\nconst ErrorList: React.SFC<MergedProps> = ({ errors, clusterConnected, channelConnected }) => {\n    const numShown = 3;\n    const latestErrors = errors.ids.slice(Math.max(0, errors.ids.length - numShown));\n    const showModal = errors.ids.length > 0 && clusterConnected && channelConnected;\n    return (\n        <Modal open={showModal}>\n            {latestErrors.map(error => <Error error={errors.byId[error]} key={error} />)}\n        </Modal>\n    );\n}\n\nexport default connect(mapStateToProps)(ErrorList);","import * as React from 'react';\nimport 'semantic-ui-css/semantic.min.css';\nimport { Container, Icon, Modal, Popup } from 'semantic-ui-react';\nimport About from './About';\nimport ChannelStatus from './channel/components/ChannelStatus';\nimport DatasetList from './dataset/components/DatasetList';\nimport ErrorList from './errors/components/ErrorList';\nimport logo from './images/LiberTEM logo-medium.png';\n\nclass App extends React.Component {\n    public render() {\n        return (\n            <Container style={{ margin: \"5em 1em 5em 1em\" }}>\n                <div style={{ display: \"flex\" }}>\n                    <img src={logo} width=\"200\" height=\"46\" alt=\"LiberTEM\" style={{ marginBottom: \"20px\" }} />\n                    {' '}\n                    <Modal trigger={\n                        <Icon name=\"info circle\" link={true} style={{ alignSelf: \"flex-start\" }} />\n                    }>\n                        <Popup.Header>About LiberTEM</Popup.Header>\n                        <Popup.Content>\n                            <About />\n                        </Popup.Content>\n                    </Modal>\n                </div>\n                <ErrorList />\n                <ChannelStatus>\n                    <DatasetList />\n                </ChannelStatus>\n            </Container>\n        );\n    }\n}\n\nexport default App;\n","// tslint:disable:no-console\n// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the 'N+1' visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL!,\n      window.location.toString()\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker) {\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the old content will have been purged and\n                // the fresh content will have been added to the cache.\n                // It's the perfect time to display a 'New content is\n                // available; please refresh.' message in your web app.\n                console.log('New content is available; please refresh.');\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // 'Content is cached for offline use.' message.\n                console.log('Content is cached for offline use.');\n              }\n            }\n          };\n        }\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type')!.indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { ActionsUnion, createAction } from \"../helpers/actionHelpers\";\n\nexport enum ActionTypes {\n    CREATE = 'JOB_CREATE',\n}\n\nexport const Actions = {\n    create: (id: string, dataset: string, timestamp: number) => createAction(ActionTypes.CREATE, { id, dataset, timestamp }),\n}\n\nexport type Actions = ActionsUnion<typeof Actions>;\n\nexport type ActionParts = {\n    [K in keyof typeof Actions]: ReturnType<typeof Actions[K]>\n}","import { AnalysisDetails, CancelJobResponse, StartJobRequest, StartJobResponse } from \"../messages\";\n\nexport function startJob(jobId: string, datasetId: string, analysis: AnalysisDetails): Promise<StartJobResponse> {\n    const payload: StartJobRequest = {\n        job: {\n            dataset: datasetId,\n            analysis,\n        }\n    }\n    return fetch(`/api/jobs/${jobId}/`, {\n        body: JSON.stringify(payload),\n        credentials: \"same-origin\",\n        method: \"PUT\",\n    }).then(r => r.json());\n}\n\nexport function cancelJob(jobId: string): Promise<CancelJobResponse> {\n    return fetch(`/api/jobs/${jobId}/`, {\n        method: \"DELETE\",\n        credentials: \"same-origin\",\n    }).then(r => r.json());\n}","import { buffers } from 'redux-saga';\nimport { actionChannel, call, cancel, fork, put, select, take, takeEvery } from 'redux-saga/effects';\nimport uuid from 'uuid/v4';\nimport * as jobActions from '../job/actions';\nimport { cancelJob, startJob } from '../job/api';\nimport { JobState } from '../job/types';\nimport { DatasetState, DatasetStatus } from '../messages';\nimport { RootReducer } from '../store';\nimport * as analysisActions from './actions';\nimport { AnalysisState } from './types';\n\nfunction selectDataset(state: RootReducer, dataset: string) {\n    return state.datasets.byId[dataset];\n}\n\nfunction selectAnalysis(state: RootReducer, id: string) {\n    return state.analyses.byId[id];\n}\n\nfunction selectJob(state: RootReducer, id: string) {\n    return state.jobs.byId[id];\n}\n\n\nexport function* createAnalysisSaga(action: ReturnType<typeof analysisActions.Actions.create>) {\n    try {\n        const datasetState: DatasetState = yield select(selectDataset, action.payload.dataset)\n        if (datasetState.status !== DatasetStatus.OPEN) {\n            throw new Error(\"invalid dataset status\");\n        }\n        const analysis: AnalysisState = {\n            id: uuid(),\n            dataset: action.payload.dataset,\n            mainAnalysisType: action.payload.analysisType,\n            jobs: [],\n            jobHistory: [],\n        }\n\n        const sidecarTask = yield fork(analysisSidecar, analysis.id);\n\n        yield put(analysisActions.Actions.created(analysis));\n\n        while (true) {\n            const removeAction: ReturnType<typeof analysisActions.Actions.remove> = yield take(analysisActions.ActionTypes.REMOVE);\n            if (removeAction.payload.id === analysis.id) {\n                yield cancel(sidecarTask);\n            }\n        }\n    } catch (e) {\n        const timestamp = Date.now();\n        const id = uuid();\n        yield put(analysisActions.Actions.error(`Error creating analysis: ${e.toString()}`, timestamp, id));\n    }\n}\n\nexport function* cancelOldJob(analysis: AnalysisState, jobIndex: number) {\n    const jobId = analysis.jobs[jobIndex];\n    if (jobId === undefined) {\n        return;\n    } else {\n        const job: JobState = yield select(selectJob, jobId);\n        if (job.running !== \"DONE\") {\n            yield call(cancelJob, jobId);\n        }\n    }\n}\n\nexport function* analysisSidecar(analysisId: string) {\n    // channel for incoming actions:\n    // all actions that arrive while we block in `call` will be buffered here.\n    // because the buffer is sliding of size 1, we only keep the latest action!\n    const runOrParamsChannel = yield actionChannel(analysisActions.ActionTypes.RUN, buffers.sliding(2));\n\n    while (true) {\n        try {\n            const action: analysisActions.ActionParts[\"run\"] = yield take(runOrParamsChannel);\n\n            // ignore actions meant for other analyses\n            if (action.payload.id !== analysisId) {\n                continue;\n            }\n\n            // get the current state incl. configuration\n            const analysis: AnalysisState = yield select(selectAnalysis, analysisId);\n            const { jobIndex, parameters } = action.payload;\n\n            // prepare running the job:\n            const jobId = uuid();\n            yield put(jobActions.Actions.create(jobId, analysis.dataset, Date.now()));\n            yield put(analysisActions.Actions.prepareRun(analysis.id, jobIndex, jobId));\n\n            const oldJobId = analysis.jobs[jobIndex];\n            if (oldJobId !== undefined) {\n                const job: JobState = yield select(selectJob, oldJobId);\n                if (job && job.running !== \"DONE\") {\n                    // wait until the job is cancelled:\n                    yield call(cancelJob, oldJobId);\n                }\n            }\n\n            // FIXME: we have a race here, as the websocket msg FINISH_JOB may\n            // arrive before call(startJob, ...) returns. this causes the apply button\n            // to feel unresponsive (the action gets done, but only after we finish here...)\n            // best reproduced in \"Slow 3G\" network simulation mode in devtools\n\n            // wait until the job is started\n            yield call(startJob, jobId, analysis.dataset, parameters);\n            yield put(analysisActions.Actions.running(analysis.id, jobId, jobIndex));\n        } catch (e) {\n            const timestamp = Date.now();\n            const id = uuid();\n            yield put(analysisActions.Actions.error(`Error running analysis: ${e.toString()}`, timestamp, id));\n        }\n    }\n}\n\nexport function* doRemoveAnalysisSaga(action: ReturnType<typeof analysisActions.Actions.remove>) {\n    // const analysis: AnalysisState = yield select(selectAnalysis, action.payload.id)\n    try {\n        // TODO: cancel all jobs! loop over all of them...\n        // yield call(cancelOldJob, analysis, \"RESULT\");\n        // yield call(cancelOldJob, analysis, \"FRAME\");\n    } finally {\n        yield put(analysisActions.Actions.removed(action.payload.id));\n    }\n}\n\nexport function* analysisRootSaga() {\n    yield takeEvery(analysisActions.ActionTypes.CREATE, createAnalysisSaga);\n    yield takeEvery(analysisActions.ActionTypes.REMOVE, doRemoveAnalysisSaga);\n}","import * as _ from 'lodash';\nimport { MsgPartConfig } from \"../messages\";\nimport { ConfigParams, ConfigState, LocalConfig } from \"./reducers\";\n\nconst CONFIG_KEY = \"LiberTEM.config\";\n\nexport function joinPaths(config: ConfigState, ...parts: string[]) {\n    const removeSep = (part: string) => part.replace(new RegExp(`${_.escapeRegExp(config.separator)}$`), \"\")\n    parts = [removeSep(parts[0]), ...parts.slice(1)];\n    return parts.map(part => part.trim()).join(config.separator);\n}\n\nexport function mergeLocalStorage(serverConfig: MsgPartConfig): ConfigParams {\n    const localSettings = window.localStorage.getItem(CONFIG_KEY);\n    if (localSettings === null) {\n        return Object.assign({}, serverConfig, getDefaultLocalConfig(serverConfig));\n    }\n    const localSettingsParsed = JSON.parse(localSettings);\n    const defaultConfig = getDefaultLocalConfig(serverConfig);\n    const mergedConfig = Object.assign({}, defaultConfig, serverConfig, localSettingsParsed);\n    return mergedConfig;\n}\n\nexport function setLocalStorage(config: ConfigState): void {\n    const keys: Array<Partial<keyof ConfigState>> = [\"cwd\", \"lastOpened\", \"fileHistory\"];\n    const localSettings = keys.reduce((acc, item) => {\n        acc[item] = config[item];\n        return acc;\n    }, {} as ConfigState);\n    window.localStorage.setItem(CONFIG_KEY, JSON.stringify(localSettings));\n}\n\nexport function clearLocalStorage(): void {\n    window.localStorage.removeItem(CONFIG_KEY);\n}\n\nexport function getDefaultLocalConfig(config: MsgPartConfig): LocalConfig {\n    return {\n        lastOpened: {},\n        fileHistory: [],\n    };\n}\n\nexport function makeUnique<T>(inp: T[]): T[] {\n    return inp.reduce((acc: T[], curr: T) => {\n        if (acc.indexOf(curr) === -1) {\n            return [...acc, curr];\n        } else {\n            return acc;\n        }\n    }, [] as T[]);\n}","import { DirectoryListingResponse } from \"../messages\";\n\nexport function getDirectoryListing(path: string): Promise<DirectoryListingResponse> {\n    const url = `/api/browse/localfs/?path=${encodeURIComponent(path)}`;\n    return fetch(url, {\n        method: 'GET',\n        credentials: \"same-origin\",\n    }).then(r => r.json());\n}","import { ActionsUnion, createAction } from '../helpers/actionHelpers';\nimport { JobResultType } from '../job/types';\nimport { MsgPartInitialDataset, MsgPartJob } from '../messages';\n\n\nexport type PartialResultType = JobResultType;\n\nexport enum ActionTypes {\n    INITIAL_STATE = 'CHANNEL_INITIAL_STATE',\n    JOB_STARTED = 'CHANNEL_JOB_STARTED',\n    FINISH_JOB = 'CHANNEL_FINISH_JOB',\n    TASK_RESULT = 'CHANNEL_TASK_RESULT',\n    JOB_ERROR = 'CHANNEL_JOB_ERROR',\n    OPEN = \"CHANNEL_OPEN\",\n    CLOSE = \"CHANNEL_CLOSE\",\n    ERROR = \"CHANNEL_ERROR\",\n    CANCELLED = \"CANCELLED\",\n}\n\nexport const Actions = {\n    initialState: (jobs: MsgPartJob[], datasets: MsgPartInitialDataset[], timestamp: number) => createAction(ActionTypes.INITIAL_STATE, { jobs, datasets, timestamp }),\n    jobStarted: (job: string, dataset: string, timestamp: number) => createAction(ActionTypes.JOB_STARTED, { job, timestamp, dataset }),\n    finishJob: (job: string, results: JobResultType[], timestamp: number) => createAction(ActionTypes.FINISH_JOB, { job, results, timestamp }),\n    taskResult: (job: string, results: PartialResultType[], timestamp: number) => createAction(ActionTypes.TASK_RESULT, { job, results, timestamp }),\n    jobError: (job: string, msg: string, id: string, timestamp: number) => createAction(ActionTypes.JOB_ERROR, { job, msg, id, timestamp }),\n    open: (timestamp: number) => createAction(ActionTypes.OPEN, { timestamp }),\n    close: (timestamp: number) => createAction(ActionTypes.CLOSE, { timestamp }),\n    error: (msg: string, timestamp: number, id: string) => createAction(ActionTypes.ERROR, { msg, timestamp, id }),\n    cancelled: (job: string) => createAction(ActionTypes.CANCELLED, { job }),\n}\n\nexport type Actions = ActionsUnion<typeof Actions>;","import { call, fork, put, select, take } from \"redux-saga/effects\";\nimport uuid from 'uuid/v4';\nimport { joinPaths } from \"../config/helpers\";\nimport { ConfigState } from \"../config/reducers\";\nimport { DirectoryListingResponse } from \"../messages\";\nimport { RootReducer } from \"../store\";\nimport * as browserActions from './actions';\nimport { getDirectoryListing } from \"./api\";\nimport { DirectoryBrowserState } from \"./types\";\n\nexport function* directoryListingSaga() {\n    yield fork(fetchOnRequest);\n    yield fork(fetchDirectoryListOnOpen);\n}\n\nfunction* fetchOnRequest() {\n    while (true) {\n        const action: ReturnType<typeof browserActions.Actions.list> = yield take(browserActions.ActionTypes.LIST_DIRECTORY);\n\n        const { name, path } = action.payload;\n        const config: ConfigState = yield select((state: RootReducer) => state.config)\n        const newPath = name !== undefined ? joinPaths(config, path, name) : path;\n        yield fork(fetchDirectoryListing, newPath);\n    }\n}\n\nfunction* fetchDirectoryListing(path: string) {\n    try {\n        const result: DirectoryListingResponse = yield call(getDirectoryListing, path);\n        if (result.status === \"ok\") {\n            yield put(browserActions.Actions.dirListing(result.path, result.dirs, result.files, result.drives, result.places));\n        } else if (result.status === \"error\") {\n            const browserState: DirectoryBrowserState = yield select((state: RootReducer) => state.browser);\n            const timestamp = Date.now();\n            const id = uuid();\n            const alternative = result.alternative ? result.alternative : browserState.places.home.path;\n            yield put(browserActions.Actions.error(`Error browsing directory: ${result.msg}`, timestamp, id));\n            yield put(browserActions.Actions.list(alternative));\n        }\n    } catch (e) {\n        const browserState: DirectoryBrowserState = yield select((state: RootReducer) => state.browser);\n        const timestamp = Date.now();\n        const id = uuid();\n        yield put(browserActions.Actions.error(`Error browsing directory: ${e.toString()}`, timestamp, id));\n        yield put(browserActions.Actions.list(browserState.places.home.path));\n    }\n}\n\nfunction* fetchDirectoryListOnOpen() {\n    while (true) {\n        yield take(browserActions.ActionTypes.OPEN);\n        const config: ConfigState = yield select((state: RootReducer) => state.config)\n        yield put(browserActions.Actions.list(config.cwd));\n    }\n}","import { ActionCreatorsMapObject } from \"redux\";\nimport { FollowupPart, MsgPartInitialDataset, MsgPartJob } from \"../messages\";\n\nexport interface Message<T extends string> {\n    messageType: T\n}\n\nexport function createMessage<T extends string, O>(messageType: T, attribs: O) {\n    return Object.assign({ messageType }, attribs);\n}\n\nexport enum MessageTypes {\n    INITIAL_STATE = \"INITIAL_STATE\",\n    JOB_STARTED = \"JOB_STARTED\",\n    FINISH_JOB = \"FINISH_JOB\",\n    TASK_RESULT = \"TASK_RESULT\",\n    JOB_ERROR = \"JOB_ERROR\",\n    BINARY = \"BINARY\",\n    OPEN = \"OPEN\",\n    CLOSE = \"CLOSE\",\n    ERROR = \"ERROR\",\n    DELETE_DATASET = \"DELETE_DATASET\",\n    CANCEL_JOB_DONE = \"CANCEL_JOB_DONE\",\n}\n\nexport const Messages = {\n    initialState: (jobs: MsgPartJob[], datasets: MsgPartInitialDataset[]) => createMessage(MessageTypes.INITIAL_STATE, { jobs, datasets }),\n    startJob: (job: string, dataset: string) => createMessage(MessageTypes.JOB_STARTED, { job, dataset }),\n    finishJob: (job: string, followup: FollowupPart) => createMessage(MessageTypes.FINISH_JOB, { job, followup }),\n    taskResult: (job: string, followup: FollowupPart) => createMessage(MessageTypes.TASK_RESULT, { job, followup }),\n    jobError: (job: string, msg: string) => createMessage(MessageTypes.JOB_ERROR, { job, msg }),\n    binary: (objectURL: string) => createMessage(MessageTypes.BINARY, { objectURL }),\n    open: () => createMessage(MessageTypes.OPEN, {}),\n    close: () => createMessage(MessageTypes.CLOSE, {}),\n    error: (msg: string) => createMessage(MessageTypes.ERROR, { msg }),\n    deleteDataset: (dataset: string) => createMessage(MessageTypes.DELETE_DATASET, { dataset }),\n    cancelled: (job: string) => createMessage(MessageTypes.CANCEL_JOB_DONE, { job }),\n}\n\nexport type MessagesUnion<A extends ActionCreatorsMapObject> = ReturnType<A[keyof A]>\nexport type Messages = MessagesUnion<typeof Messages>;\n\n// types of messages sent by the server:\n/*\nexport type InitialStateMessage = ReturnType<typeof Messages.initialState>;\nexport type StartJobMessage = ReturnType<typeof Messages.startJob>;\nexport type FinishJobMessage = ReturnType<typeof Messages.finishJob>;\nexport type TaskResultMessage = ReturnType<typeof Messages.taskResult>;\n*/\n\nexport type BinaryMessage = ReturnType<typeof Messages.binary>;","import { Channel, delay, END, eventChannel } from \"redux-saga\";\nimport { call, fork, put, take } from \"redux-saga/effects\";\nimport uuid from 'uuid/v4';\nimport * as datasetActions from '../dataset/actions';\nimport * as channelActions from \"./actions\";\nimport * as channelMessages from './messages';\n\ntype SocketChannel = Channel<channelMessages.Messages>;\n\n\n/**\n * create typesafe messages from the websocket messages\n * \n * also creates some synthetic events like open, close, error\n */\nfunction createWebSocketChannel(/* addr */): SocketChannel {\n    return eventChannel(emit => {\n        function onMessage(msg: MessageEvent) {\n            if (msg.data instanceof Blob) {\n                // TODO: cleanup createObjectURL results somewhere\n                emit(channelMessages.Messages.binary(URL.createObjectURL(msg.data)));\n            } else {\n                const parsed = JSON.parse(msg.data) as channelMessages.Messages;\n                emit(parsed);\n            }\n        }\n\n        function onOpen() {\n            emit(channelMessages.Messages.open());\n        }\n\n        function onClose() {\n            emit(channelMessages.Messages.close());\n            emit(END);\n        }\n\n        function onError(err: Event) {\n            emit(channelMessages.Messages.error(\"Error in weboscket connection\"));\n        }\n\n        const ws = new WebSocket(`ws://${window.location.hostname}:${window.location.port}/api/events/`);\n        ws.addEventListener(\"message\", onMessage);\n        ws.addEventListener(\"open\", onOpen);\n        ws.addEventListener(\"close\", onClose);\n        ws.addEventListener(\"error\", onError);\n\n        // return cleanup function:\n        return () => {\n            ws.removeEventListener(\"message\", onMessage);\n            ws.removeEventListener(\"open\", onOpen);\n            ws.removeEventListener(\"close\", onClose);\n            ws.removeEventListener(\"error\", onError);\n            // TODO: close connection if still open\n            // (or is it guaranteed that if an error was thrown, the connection is closed?)\n        };\n    });\n}\n\n/**\n * handles the connection lifecycle for our websocket\n */\nexport function* webSocketSaga() {\n    while (true) {\n        const socketChannel = yield call(createWebSocketChannel);\n        yield fork(actionsFromChannel, socketChannel);\n        const action: channelActions.Actions = yield take([\n            channelActions.ActionTypes.OPEN,\n            channelActions.ActionTypes.CLOSE,\n        ]);\n        if (action.type === channelActions.ActionTypes.OPEN) {\n            yield take([\n                channelActions.ActionTypes.CLOSE,\n                channelActions.ActionTypes.ERROR,\n            ]);\n        }\n        yield delay(1000);\n    }\n}\n\n/**\n * translates the messages from the channel to redux actions, handles aggregation etc.\n */\nexport function* actionsFromChannel(socketChannel: SocketChannel) {\n    try {\n        while (true) {\n            const msg = yield take(socketChannel);\n            const timestamp = Date.now();\n            switch (msg.messageType) {\n                case channelMessages.MessageTypes.OPEN: {\n                    yield put(channelActions.Actions.open(timestamp));\n                    break;\n                }\n                case channelMessages.MessageTypes.CLOSE: {\n                    yield put(channelActions.Actions.close(timestamp));\n                    break;\n                }\n                case channelMessages.MessageTypes.ERROR: {\n                    const id = uuid();\n                    yield put(channelActions.Actions.error(msg.msg, timestamp, id));\n                    break;\n                }\n                case channelMessages.MessageTypes.INITIAL_STATE: {\n                    yield put(channelActions.Actions.initialState(msg.jobs, msg.datasets, timestamp));\n                    break;\n                }\n                case channelMessages.MessageTypes.JOB_STARTED: {\n                    yield put(channelActions.Actions.jobStarted(msg.job, msg.details.dataset, timestamp));\n                    break;\n                }\n                case channelMessages.MessageTypes.FINISH_JOB: {\n                    yield call(handleFinishJob, msg, socketChannel, timestamp);\n                    break;\n                }\n                case channelMessages.MessageTypes.TASK_RESULT: {\n                    yield call(handleTaskResult, msg, socketChannel, timestamp);\n                    break;\n                }\n                case channelMessages.MessageTypes.DELETE_DATASET: {\n                    yield put(datasetActions.Actions.deleted(msg.dataset));\n                    break;\n                }\n                case channelMessages.MessageTypes.JOB_ERROR: {\n                    const id = uuid();\n                    yield put(channelActions.Actions.jobError(msg.job, msg.msg, id, timestamp));\n                }\n                case channelMessages.MessageTypes.CANCEL_JOB_DONE: {\n                    yield put(channelActions.Actions.cancelled(msg.job));\n                }\n            }\n        }\n    } finally {\n        // disconnected\n    }\n}\n\nexport function* handleBinaryParts(numParts: number, socketChannel: SocketChannel) {\n    const parts: channelMessages.BinaryMessage[] = [];\n    while (parts.length < numParts) {\n        const binMsg = yield take(socketChannel)\n        parts.push(binMsg);\n    }\n    return parts;\n}\n\nexport function* handleTaskResult(msg: ReturnType<typeof channelMessages.Messages.taskResult>, socketChannel: SocketChannel, timestamp: number) {\n    const parts: channelMessages.BinaryMessage[] = yield call(handleBinaryParts, msg.followup.numMessages, socketChannel);\n    const images = parts.map((part, idx) => ({ imageURL: part.objectURL, description: msg.followup.descriptions[idx] }));\n    yield put(channelActions.Actions.taskResult(msg.job, images, timestamp));\n}\n\nexport function* handleFinishJob(msg: ReturnType<typeof channelMessages.Messages.finishJob>, socketChannel: SocketChannel, timestamp: number) {\n    const parts: channelMessages.BinaryMessage[] = yield call(handleBinaryParts, msg.followup.numMessages, socketChannel);\n    const images = parts.map((part, idx) => ({ imageURL: part.objectURL, description: msg.followup.descriptions[idx] }));\n    yield put(channelActions.Actions.finishJob(msg.job, images, timestamp));\n}","import { ConnectRequest, ConnectRequestParams, ConnectResponse } from \"../messages\";\n\nexport function connectToCluster(params: ConnectRequestParams): Promise<ConnectResponse> {\n    const payload: ConnectRequest = {\n        connection: params\n    }\n    return fetch(`/api/config/connection/`, {\n        body: JSON.stringify(payload),\n        credentials: \"same-origin\",\n        method: \"PUT\",\n    }).then(r => r.json());\n}\n\nexport function checkClusterConnection(): Promise<ConnectResponse> {\n    return fetch(`/api/config/connection/`, {\n        method: 'GET',\n    }).then(r => r.json());\n}","import { ActionsUnion, createAction } from \"../helpers/actionHelpers\";\nimport { ConfigParams } from \"./reducers\";\n\nexport enum ActionTypes {\n    FETCHED = \"CONFIG_FETCHED\",\n    FETCH = \"CONFIG_FETCH\",\n    FETCH_FAILED = \"CONFIG_FETCH_FAILED\",\n}\n\nexport const Actions = {\n    fetch: () => createAction(ActionTypes.FETCH),\n    fetched: (config: ConfigParams) => createAction(ActionTypes.FETCHED, { config }),\n    fetchFailed: (msg: string, timestamp: number, id: string) => createAction(ActionTypes.FETCH_FAILED, { msg, timestamp, id }),\n}\n\nexport type Actions = ActionsUnion<typeof Actions>;","import { all, call, put, take, takeEvery } from \"redux-saga/effects\";\nimport * as channelActions from '../channel/actions';\nimport { ConnectResponse } from \"../messages\";\nimport * as clusterActions from './actions';\nimport { checkClusterConnection, connectToCluster } from \"./api\";\n\nfunction* connectSaga(action: ReturnType<typeof clusterActions.Actions.connect>) {\n    const conn: ConnectResponse = yield call(connectToCluster, action.payload.params);\n    yield call(putClusterStatus, conn);\n}\n\nfunction* putClusterStatus(conn: ConnectResponse) {\n    if (conn.status === \"ok\") {\n        yield put(clusterActions.Actions.connected(conn.connection.connection));\n    } else {\n        yield put(clusterActions.Actions.notConnected());\n    }\n}\n\n/**\n * when the channel is connected, check if cluster is connected and update status accordingly\n */\nfunction* trackClusterConnection() {\n    while (true) {\n        yield take(channelActions.ActionTypes.OPEN)\n        const conn: ConnectResponse = yield call(checkClusterConnection);\n        yield call(putClusterStatus, conn);\n    }\n}\n\nexport function* clusterConnectionSaga() {\n    yield takeEvery(clusterActions.ActionTypes.CONNECT, connectSaga);\n    yield all([\n        trackClusterConnection(),\n    ])\n}","import { GetConfigResponse } from \"../messages\";\n\nexport function getConfig(): Promise<GetConfigResponse> {\n    return fetch(`/api/config/`, {\n        method: \"GET\",\n        credentials: \"same-origin\",\n    }).then(r => r.json());\n}","import { call, fork, put, select, take, takeEvery } from 'redux-saga/effects';\nimport uuid from 'uuid/v4';\nimport * as browserActions from '../browser/actions';\nimport * as channelActions from '../channel/actions';\nimport * as datasetActions from '../dataset/actions';\nimport { GetConfigResponse } from '../messages';\nimport { RootReducer } from '../store';\nimport * as configActions from './actions';\nimport { getConfig } from './api';\nimport { clearLocalStorage, getDefaultLocalConfig, mergeLocalStorage, setLocalStorage } from './helpers';\nimport { ConfigState } from './reducers';\n\nfunction* getConfigOnReconnect() {\n    yield takeEvery(channelActions.ActionTypes.OPEN, getConfigSaga);\n}\n\n/**\n * get config from server and try to merge in the localStorage config\n */\nfunction* getConfigSaga() {\n    yield put(configActions.Actions.fetch());\n    const configResponse: GetConfigResponse = yield call(getConfig);\n    try {\n        const mergedConfig = mergeLocalStorage(configResponse.config);\n        yield put(configActions.Actions.fetched(mergedConfig));\n    } catch (e) {\n        try {\n            clearLocalStorage();\n            // tslint:disable-next-line:no-empty\n        } catch (e) { }\n        const defaultConfig = Object.assign({}, configResponse.config, getDefaultLocalConfig(configResponse.config));\n        yield put(configActions.Actions.fetched(defaultConfig));\n    }\n}\n\n/**\n * update localStorage config on opening files or using the file browser\n */\nfunction* updateLocalStorageConfig() {\n    while (true) {\n        yield take([\n            datasetActions.ActionTypes.CREATE,\n            browserActions.ActionTypes.DIRECTORY_LISTING\n        ]);\n        const config: ConfigState = yield select((state: RootReducer) => state.config);\n        setLocalStorage(config);\n    }\n}\n\nexport function* firstConfigFetch() {\n    try {\n        yield call(getConfigSaga);\n    } catch (e) {\n        const timestamp = Date.now();\n        const id = uuid();\n        yield put(configActions.Actions.fetchFailed(`failed to fetch config: ${e.toString()}`, timestamp, id));\n    }\n}\n\nexport function* configRootSaga() {\n    yield fork(firstConfigFetch);\n    yield fork(getConfigOnReconnect);\n    yield fork(updateLocalStorageConfig);\n}","import { DeleteDatasetResponse, DetectDatasetResponse, OpenDatasetRequest, OpenDatasetResponse } from \"../messages\";\n\nexport function openDataset(id: string, dataset: OpenDatasetRequest): Promise<OpenDatasetResponse> {\n    return fetch(`/api/datasets/${id}/`, {\n        body: JSON.stringify(dataset),\n        credentials: \"same-origin\",\n        method: \"PUT\",\n    }).then(r => r.json());\n}\n\nexport function deleteDataset(id: string): Promise<DeleteDatasetResponse> {\n    return fetch(`/api/datasets/${id}/`, {\n        credentials: \"same-origin\",\n        method: \"DELETE\",\n    }).then(r => r.json());\n}\n\n\nexport function detectDataset(path: string): Promise<DetectDatasetResponse> {\n    return fetch(`/api/datasets/detect/?path=${encodeURIComponent(path)}`, {\n        credentials: \"same-origin\",\n        method: \"GET\",\n    }).then(r => r.json());\n}","import { call, put, select, takeEvery } from 'redux-saga/effects';\nimport uuid from 'uuid/v4';\nimport * as browserActions from '../browser/actions';\nimport { joinPaths } from '../config/helpers';\nimport { ConfigState } from '../config/reducers';\nimport { DetectDatasetResponse, OpenDatasetResponse } from '../messages';\nimport { RootReducer } from '../store';\nimport * as datasetActions from \"./actions\";\nimport { deleteDataset, detectDataset, openDataset } from './api';\n\n\nexport function* createDatasetSaga(action: ReturnType<typeof datasetActions.Actions.create>) {\n    try {\n        const resp: OpenDatasetResponse = yield call(openDataset, action.payload.dataset.id, { dataset: action.payload.dataset });\n        if (resp.status === \"ok\") {\n            yield put(datasetActions.Actions.created(resp.details));\n        } else if (resp.status === \"error\") {\n            const timestamp = Date.now();\n            const id = uuid();\n            yield put(datasetActions.Actions.error(resp.dataset, resp.msg, timestamp, id));\n        }\n    } catch (e) {\n        const timestamp = Date.now();\n        const id = uuid();\n        yield put(datasetActions.Actions.error(action.payload.dataset.id, `Error loading dataset: ${e.toString()}`, timestamp, id));\n    }\n}\n\nexport function* deleteDatasetSaga(action: ReturnType<typeof datasetActions.Actions.delete>) {\n    try {\n        yield call(deleteDataset, action.payload.dataset);\n    } catch (e) {\n        const timestamp = Date.now();\n        const id = uuid();\n        yield put(datasetActions.Actions.error(action.payload.dataset, `Error closing dataset: ${e.toString()}`, timestamp, id));\n    }\n}\n\nexport function* doOpenDataset(fullPath: string) {\n    const config: ConfigState = yield select((state: RootReducer) => state.config);\n    let prefillParams = config.lastOpened[fullPath];\n    if (!prefillParams) {\n        try {\n            yield put(datasetActions.Actions.detect(fullPath));\n            const detectResult: DetectDatasetResponse = yield call(detectDataset, fullPath);\n            if (detectResult.status === \"ok\") {\n                prefillParams = detectResult.datasetParams;\n                yield put(datasetActions.Actions.detected(fullPath, detectResult.datasetParams));\n            } else {\n                yield put(datasetActions.Actions.detectFailed(fullPath));\n            }\n        } catch (e) {\n            yield put(datasetActions.Actions.detectFailed(fullPath));\n        }\n    }\n    yield put(datasetActions.Actions.open(fullPath, prefillParams));\n}\n\nexport function* openDatasetSagaFullPath(action: ReturnType<typeof browserActions.Actions.selectFullPath>) {\n    const fullPath = action.payload.path;\n    yield call(doOpenDataset, fullPath);\n}\n\nexport function* openDatasetSaga(action: ReturnType<typeof browserActions.Actions.select>) {\n    const config: ConfigState = yield select((state: RootReducer) => state.config);\n    const fullPath = joinPaths(config, action.payload.path, action.payload.name);\n    yield call(doOpenDataset, fullPath);\n}\n\nexport function* datasetRootSaga() {\n    yield takeEvery(datasetActions.ActionTypes.CREATE, createDatasetSaga);\n    yield takeEvery(datasetActions.ActionTypes.DELETE, deleteDatasetSaga);\n    yield takeEvery(browserActions.ActionTypes.SELECT, openDatasetSaga);\n    yield takeEvery(browserActions.ActionTypes.SELECT_FULL_PATH, openDatasetSagaFullPath);\n}","import { all } from 'redux-saga/effects';\nimport { analysisRootSaga } from './analysis/sagas';\nimport { directoryListingSaga } from './browser/sagas';\nimport { webSocketSaga } from './channel/sagas';\nimport { clusterConnectionSaga } from './cluster/sagas';\nimport { configRootSaga } from './config/sagas';\nimport { datasetRootSaga } from './dataset/sagas';\n\nexport function* rootSaga() {\n    yield all([\n        configRootSaga(),\n        webSocketSaga(),\n        analysisRootSaga(),\n        datasetRootSaga(),\n        clusterConnectionSaga(),\n        directoryListingSaga(),\n    ]);\n}","import { AllActions } from \"../actions\";\nimport * as datasetActions from \"../dataset/actions\";\nimport { ById, filterWithPred, insertById, updateById } from \"../helpers/reducerHelpers\";\nimport * as analysisActions from \"./actions\";\nimport { AnalysisState, JobList } from \"./types\";\n\nexport type AnalysisReducerState = ById<AnalysisState>;\n\nconst initialAnalysisState: AnalysisReducerState = {\n    byId: {},\n    ids: [],\n}\n\nexport function analysisReducer(state = initialAnalysisState, action: AllActions): AnalysisReducerState {\n    switch (action.type) {\n        case analysisActions.ActionTypes.CREATED: {\n            return insertById(state, action.payload.analysis.id, action.payload.analysis);\n        }\n        case analysisActions.ActionTypes.PREPARE_RUN: {\n            const { jobIndex, id } = action.payload;\n            const analysis = state.byId[id];\n            const oldJob = analysis.jobs[jobIndex];\n            const jobHistory = [...analysis.jobHistory];\n            if (oldJob !== undefined) {\n                // TODO: length restriction?\n                const hist = jobHistory[jobIndex] ? jobHistory[jobIndex] : [];\n                jobHistory[jobIndex] = [oldJob, ...hist];\n            }\n            const newJobs: JobList = [...analysis.jobs];\n            newJobs[jobIndex] = action.payload.job;\n            return updateById(state, action.payload.id, { jobs: newJobs, jobHistory })\n        }\n        case analysisActions.ActionTypes.REMOVED: {\n            return filterWithPred(state, (r: AnalysisState) => r.id !== action.payload.id);\n        }\n        case datasetActions.ActionTypes.DELETE: {\n            return filterWithPred(state, (r: AnalysisState) => r.dataset !== action.payload.dataset);\n        }\n    }\n    return state;\n}","import { AllActions } from \"../actions\";\nimport * as configActions from '../config/actions';\nimport { DirectoryListingDetails, FSPlace } from \"../messages\";\nimport * as browserActions from './actions';\nimport { DirectoryBrowserState } from \"./types\";\n\nconst initialBrowserState: DirectoryBrowserState = {\n    isOpen: false,\n    isLoading: true,\n    path: \"/\",\n    drives: [],\n    places: {},\n    files: [] as DirectoryListingDetails[],\n    dirs: [] as DirectoryListingDetails[],\n}\n\nexport function directoryBrowserReducer(state: DirectoryBrowserState = initialBrowserState, action: AllActions): DirectoryBrowserState {\n    switch (action.type) {\n        case configActions.ActionTypes.FETCHED: {\n            return Object.assign({}, state, {\n                path: action.payload.config.cwd,\n            })\n            break;\n        }\n        case browserActions.ActionTypes.OPEN: {\n            return Object.assign({}, state, {\n                isOpen: true,\n            })\n            break;\n        }\n        case browserActions.ActionTypes.CANCEL: {\n            return Object.assign({}, state, {\n                isOpen: false,\n            })\n            break;\n        }\n        case browserActions.ActionTypes.LIST_DIRECTORY: {\n            return Object.assign({}, state, {\n                isLoading: true,\n            })\n            break;\n        }\n        case browserActions.ActionTypes.DIRECTORY_LISTING: {\n            const places = action.payload.places.reduce((acc, place: FSPlace) => {\n                return Object.assign({}, acc, {\n                    [place.key]: place,\n                })\n            }, {});\n            return Object.assign({}, state, {\n                isLoading: false,\n                path: action.payload.path,\n                files: action.payload.files,\n                dirs: action.payload.dirs,\n                drives: action.payload.drives,\n                places,\n            })\n            break;\n        }\n        case browserActions.ActionTypes.SELECT_FULL_PATH:\n        case browserActions.ActionTypes.SELECT: {\n            return Object.assign({}, state, {\n                isLoading: false,\n                isOpen: false,\n            });\n        }\n    }\n    return state;\n}","import { AllActions } from \"../actions\";\nimport * as channelActions from './actions';\n\nexport interface ChannelStatusReducer {\n    status: ChannelStatusCodes,\n}\n\nexport enum ChannelStatusCodes {\n    CONNECTING = \"connecting\",\n    CONNECTED = \"connected\",\n    READY = \"ready\",\n    WAITING = \"waiting\",\n}\n\nconst initialChannelState: ChannelStatusReducer = {\n    status: ChannelStatusCodes.WAITING,\n}\n\nexport function channelStatusReducer(state = initialChannelState, action: AllActions): ChannelStatusReducer {\n    switch (action.type) {\n        case channelActions.ActionTypes.OPEN: {\n            return { status: ChannelStatusCodes.CONNECTED };\n        }\n        case channelActions.ActionTypes.INITIAL_STATE: {\n            return { status: ChannelStatusCodes.READY };\n        }\n        case channelActions.ActionTypes.CLOSE: {\n            return { status: ChannelStatusCodes.WAITING };\n        }\n    }\n    return state;\n}","import { AllActions } from \"../actions\";\nimport { ConnectRequestParams } from \"../messages\";\nimport * as clusterActions from './actions';\n\nexport type ClusterConnectionState = {\n    status: \"connected\",\n    params: ConnectRequestParams,\n} | {\n    status: \"disconnected\",\n} | {\n    status: \"unknown\",\n}\n\nconst initialClusterConnectionState: ClusterConnectionState = {\n    status: \"unknown\"\n}\n\nexport function clusterConnectionReducer(state = initialClusterConnectionState, action: AllActions): ClusterConnectionState {\n    switch (action.type) {\n        case clusterActions.ActionTypes.NOT_CONNECTED: {\n            return {\n                status: \"disconnected\"\n            };\n        }\n        case clusterActions.ActionTypes.CONNECTED: {\n            return {\n                status: \"connected\",\n                params: action.payload.params,\n            }\n        }\n    }\n    return state;\n}","import { AllActions } from \"../actions\";\nimport * as browserActions from '../browser/actions';\nimport * as datasetActions from '../dataset/actions';\nimport { DatasetFormParams, MsgPartConfig } from \"../messages\";\nimport * as configActions from './actions';\nimport { makeUnique } from \"./helpers\";\n\nexport interface LocalConfig {\n    fileHistory: string[],\n    lastOpened: {\n        [path: string]: DatasetFormParams\n    }\n}\n\nexport interface ConfigMeta {\n    haveConfig: boolean,\n}\n\nexport type ConfigParams = MsgPartConfig & LocalConfig;\nexport type ConfigState = ConfigParams & ConfigMeta;\n\nconst initialConfigState: ConfigState = {\n    version: \"\",\n    revision: \"\",\n    localCores: 0,\n    cwd: \"/\",\n    separator: \"/\",\n    lastOpened: {},\n    fileHistory: [],\n    haveConfig: false,\n}\n\nexport function configReducer(state = initialConfigState, action: AllActions): ConfigState {\n    switch (action.type) {\n        case configActions.ActionTypes.FETCHED: {\n            return Object.assign({}, action.payload.config, { haveConfig: true });\n        }\n        case browserActions.ActionTypes.DIRECTORY_LISTING: {\n            return Object.assign({}, state, {\n                cwd: action.payload.path,\n            });\n        }\n        case datasetActions.ActionTypes.CREATE: {\n            const newLastOpened = Object.assign({}, state.lastOpened, { [action.payload.dataset.params.path]: action.payload.dataset.params });\n            const newFileHistory = makeUnique([\n                action.payload.dataset.params.path, ...state.fileHistory\n            ]).slice(0, 11);\n            return Object.assign({}, state, {\n                lastOpened: newLastOpened,\n                fileHistory: newFileHistory,\n            });\n        }\n    }\n    return state;\n}","import { AllActions } from \"../actions\";\nimport * as channelActions from '../channel/actions';\nimport { constructById, filterWithPred, insertById, updateById } from \"../helpers/reducerHelpers\";\nimport { Dataset, DatasetState, DatasetStatus } from \"../messages\";\nimport * as datasetActions from './actions';\nimport { DatasetsState, OpenDatasetState } from \"./types\";\n\nconst initialDatasetState: DatasetsState = {\n    byId: {},\n    ids: [],\n};\n\nexport function datasetReducer(state = initialDatasetState, action: AllActions): DatasetsState {\n    switch (action.type) {\n        case channelActions.ActionTypes.INITIAL_STATE: {\n            const datasets = action.payload.datasets.map(ds => Object.assign({}, ds, { status: DatasetStatus.OPEN }));\n            return {\n                byId: constructById(datasets, ds => ds.id),\n                ids: datasets.map(ds => ds.id),\n            }\n        }\n        case datasetActions.ActionTypes.CREATE: {\n            const ds: Dataset = {\n                ...action.payload.dataset,\n                status: DatasetStatus.OPENING\n            };\n            return insertById(state, action.payload.dataset.id, ds);\n        }\n        case datasetActions.ActionTypes.CREATED: {\n            const ds = Object.assign({}, action.payload.dataset, { status: DatasetStatus.OPEN });\n            return updateById(state, action.payload.dataset.id, ds);\n        }\n        case datasetActions.ActionTypes.ERROR: {\n            return filterWithPred(state, (r: DatasetState) => r.id !== action.payload.dataset);\n        }\n        case datasetActions.ActionTypes.DELETE: {\n            return updateById(state, action.payload.dataset, { status: DatasetStatus.DELETING });\n        }\n        case datasetActions.ActionTypes.DELETED: {\n            return filterWithPred(state, (r: DatasetState) => r.id !== action.payload.dataset);\n        }\n    }\n    return state;\n}\n\nconst initialOpenDatasetState: OpenDatasetState = {\n    busy: false,\n    busyPath: \"\",\n    formVisible: false,\n    formPath: \"/\",\n    formInitialParams: undefined,\n}\n\nexport function openDatasetReducer(state = initialOpenDatasetState, action: AllActions): OpenDatasetState {\n    switch (action.type) {\n        case datasetActions.ActionTypes.OPEN: {\n            return {\n                ...state,\n                formVisible: true,\n                formPath: action.payload.path,\n                formInitialParams: action.payload.initialParams,\n            };\n        }\n        case datasetActions.ActionTypes.CANCEL_OPEN: {\n            return {\n                ...state,\n                formVisible: false,\n            }\n        }\n        case datasetActions.ActionTypes.CREATE: {\n            return {\n                ...state,\n                formVisible: false,\n            }\n        }\n        case datasetActions.ActionTypes.DETECT: {\n            return {\n                ...state,\n                busyPath: action.payload.path,\n                busy: true,\n            }\n        }\n        case datasetActions.ActionTypes.DETECTED:\n        case datasetActions.ActionTypes.DETECT_FAILED: {\n            return {\n                ...state,\n                busyPath: \"\",\n                busy: false,\n            }\n        }\n    }\n    return state;\n}","import { AllActions } from \"../actions\";\nimport * as analysisActions from '../analysis/actions';\nimport * as browserActions from '../browser/actions';\nimport * as channelActions from '../channel/actions';\nimport * as datasetActions from '../dataset/actions';\nimport { ById, filterWithPred, insertById } from \"../helpers/reducerHelpers\";\nimport * as errorActions from './actions';\n\nexport interface ErrorMessage {\n    id: string,\n    msg: string,\n    timestamp: number,\n}\n\nexport type ErrorState = ById<ErrorMessage>;\n\nconst initialErrorState: ErrorState = {\n    byId: {},\n    ids: [],\n};\n\nexport function errorReducer(state = initialErrorState, action: AllActions): ErrorState {\n    switch (action.type) {\n        case browserActions.ActionTypes.ERROR:\n        case datasetActions.ActionTypes.ERROR:\n        case channelActions.ActionTypes.ERROR:\n        case analysisActions.ActionTypes.ERROR:\n        case channelActions.ActionTypes.JOB_ERROR: {\n            return insertById(state, action.payload.id, {\n                id: action.payload.id,\n                msg: action.payload.msg,\n                timestamp: action.payload.timestamp,\n            });\n        }\n        case channelActions.ActionTypes.OPEN: {\n            return initialErrorState;\n        }\n        case errorActions.ActionTypes.DISMISS: {\n            return filterWithPred(state, (r: ErrorMessage) => r.id !== action.payload.id);\n        }\n    }\n    return state;\n}","import { AllActions } from \"../actions\";\nimport * as channelActions from '../channel/actions';\nimport { ById, insertById, updateById } from \"../helpers/reducerHelpers\";\nimport * as jobActions from './actions';\nimport { JobRunning, JobState, JobStatus } from \"./types\";\n\nexport type JobReducerState = ById<JobState>;\n\nconst initialJobState: JobReducerState = {\n    byId: {},\n    ids: [],\n};\n\nexport function jobReducer(state = initialJobState, action: AllActions): JobReducerState {\n    switch (action.type) {\n        case jobActions.ActionTypes.CREATE: {\n            const createResult = insertById(\n                state,\n                action.payload.id,\n                {\n                    id: action.payload.id,\n                    dataset: action.payload.dataset,\n                    running: JobRunning.CREATING,\n                    status: JobStatus.CREATING,\n                    results: [],\n                    startTimestamp: action.payload.timestamp,\n                }\n            )\n            return createResult;\n        }\n        case channelActions.ActionTypes.JOB_STARTED: {\n            return updateById(\n                state,\n                action.payload.job,\n                {\n                    running: JobRunning.RUNNING,\n                    status: JobStatus.IN_PROGRESS,\n                    startTimestamp: action.payload.timestamp,\n                }\n            )\n        }\n        case channelActions.ActionTypes.TASK_RESULT: {\n            return updateById(\n                state,\n                action.payload.job,\n                {\n                    results: action.payload.results,\n                }\n            );\n        }\n        case channelActions.ActionTypes.FINISH_JOB: {\n            const { job, timestamp, results } = action.payload;\n            return updateById(\n                state,\n                job,\n                {\n                    running: JobRunning.DONE,\n                    status: JobStatus.SUCCESS,\n                    results,\n                    endTimestamp: timestamp,\n                }\n            );\n        }\n        case channelActions.ActionTypes.JOB_ERROR: {\n            const { job, timestamp } = action.payload;\n            return updateById(\n                state,\n                job,\n                {\n                    running: JobRunning.DONE,\n                    status: JobStatus.ERROR,\n                    endTimestamp: timestamp,\n                }\n            )\n        }\n    }\n    return state;\n}","import { combineReducers } from \"redux\";\nimport { analysisReducer } from \"./analysis/reducers\";\nimport { directoryBrowserReducer } from './browser/reducers';\nimport { channelStatusReducer } from \"./channel/reducers\";\nimport { clusterConnectionReducer } from \"./cluster/reducers\";\nimport { configReducer } from \"./config/reducers\";\nimport { datasetReducer, openDatasetReducer } from \"./dataset/reducers\";\nimport { errorReducer } from \"./errors/reducers\";\nimport { jobReducer } from \"./job/reducers\";\n\nexport const rootReducer = combineReducers({\n    analyses: analysisReducer,\n    channelStatus: channelStatusReducer,\n    clusterConnection: clusterConnectionReducer,\n    datasets: datasetReducer,\n    openDataset: openDatasetReducer,\n    jobs: jobReducer,\n    errors: errorReducer,\n    config: configReducer,\n    browser: directoryBrowserReducer,\n})\n\nexport type RootReducer = ReturnType<typeof rootReducer>;","// tslint:disable:ordered-imports\nimport \"core-js/fn/symbol/iterator.js\";\nimport \"core-js/es6/symbol.js\";\nimport 'react-app-polyfill/ie11';\n// tslint:enable:ordered-imports\n\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { applyMiddleware, compose, createStore } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\nimport { rootSaga } from './sagas';\nimport { rootReducer } from './store';\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst composeEnhancers = (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(rootReducer, composeEnhancers(\n    applyMiddleware(\n        sagaMiddleware,\n    )\n));\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root') as HTMLElement\n);\nregisterServiceWorker();\n\nsagaMiddleware.run(rootSaga);"],"sourceRoot":""}