{"version":3,"sources":["images/LiberTEM logo-medium.png","cluster/actions.ts","About.tsx","helpers/actionHelpers.ts","helpers/index.ts","messages.ts","browser/actions.ts","cluster/components/LocalConnectionForm.tsx","cluster/components/TCPConnectionForm.tsx","cluster/components/ClusterConnectionForm.tsx","channel/components/ChannelConnecting.tsx","channel/components/ChannelStatus.tsx","browser/components/FileBrowserEntry.tsx","browser/components/FileBrowserHeader.tsx","browser/components/FileEntry.tsx","browser/components/FolderEntry.tsx","browser/components/PathDropDownItem.tsx","browser/components/PathInput.tsx","browser/components/RecentFiles.tsx","browser/components/PathBar.tsx","browser/components/FileBrowser.tsx","browser/components/BrowserWrapper.tsx","widgets/constraints.ts","widgets/DraggableHandle.tsx","analysis/actions.ts","widgets/HandleParent.tsx","widgets/kbdHandler.ts","widgets/styles.ts","widgets/Disk.tsx","widgets/BusySpinner.tsx","widgets/BusyWrapper.tsx","job/components/ResultImage.tsx","job/components/Result.tsx","job/components/ResultList.tsx","analysis/components/FrameViewModeSelector.tsx","analysis/components/Toolbar.tsx","analysis/components/AnalysisItem.tsx","analysis/components/FrameView.tsx","analysis/components/CenterOfMassAnalysis.tsx","analysis/components/DiskMaskAnalysis.tsx","widgets/Point.tsx","analysis/components/PointSelectionAnalysis.tsx","helpers/svg.ts","widgets/Ring.tsx","analysis/components/RingMaskAnalysis.tsx","analysis/components/Analysis.tsx","analysis/components/AnalysisList.tsx","helpers/reducerHelpers.ts","analysis/types.ts","dataset/actions.ts","analysis/components/AnalysisSelect.tsx","dataset/components/AddAnalysis.tsx","dataset/components/DatasetParams.tsx","dataset/components/DatasetInfo.tsx","dataset/components/DatasetToolbar.tsx","dataset/components/Dataset.tsx","dataset/helpers.ts","dataset/components/BLOParamsForm.tsx","errors/actions.ts","dataset/components/DatasetTypeSelect.tsx","dataset/components/HDF5ParamsForm.tsx","dataset/components/HDFSParamsForm.tsx","dataset/components/K2ISParamsForm.tsx","dataset/components/MIBParamsForm.tsx","dataset/components/RawFileParamsForm.tsx","dataset/components/DatasetOpen.tsx","dataset/components/DatasetOpenSpinner.tsx","dataset/components/DatasetList.tsx","errors/components/Error.tsx","errors/components/ErrorList.tsx","App.tsx","registerServiceWorker.ts","job/api.ts","analysis/sagas.ts","config/helpers.ts","browser/api.ts","channel/actions.ts","browser/sagas.ts","channel/messages.ts","channel/sagas.ts","cluster/api.ts","config/actions.ts","cluster/sagas.ts","config/api.ts","config/sagas.ts","dataset/api.ts","dataset/sagas.ts","sagas.ts","analysis/reducers.ts","browser/reducers.ts","channel/reducers.ts","cluster/reducers.ts","config/reducers.ts","dataset/reducers.ts","errors/reducers.ts","job/reducers.ts","store.ts","index.tsx"],"names":["module","exports","__webpack_require__","p","ActionTypes","connect","state","version","config","revision","_ref","react","Header","as","slice","List","Item","Icon","name","Content","href","src","alt","createAction","type","payload","meta","undefined","Actions","notConnected","NOT_CONNECTED","params","CONNECT","connected","CONNECTED","assertNotReached","message","Error","defaultDebounce","fn","delay","arguments","length","_","maxWait","getEnumValues","e","Object","keys","filter","k","ClusterTypes","DatasetTypes","DatasetStatus","AnalysisTypes","ClusterTypeMetadata","_ClusterTypeMetadata","defineProperty","LOCAL","label","TCP","helpText","withFormik","mapPropsToValues","ownProps","numWorkers","localCores","handleSubmit","values","formikBag","onSubmit","props","objectSpread","touched","errors","isSubmitting","dirty","handleChange","handleBlur","handleReset","Form","Field","htmlFor","value","onChange","onBlur","Button","primary","disabled","address","mapDispatchToProps","connectToCluster","clusterActions","clusterTypeOptions","map","t","text","ClusterConnectionForm","clusterType","setType","_this","setState","data","this","components_LocalConnectionForm","components_TCPConnectionForm","Dropdown","inline","options","Segment","renderForm","React","ChannelConnecting","msg","Message","icon","loading","messages","waiting","connecting","clusterMessages","channelStatus","clusterConnection","children","status","components_ChannelConnecting","components_ClusterConnectionForm","list","path","LIST_DIRECTORY","dirListing","dirs","files","drives","places","DIRECTORY_LISTING","open","OPEN","cancel","CANCEL","select","SELECT","selectFullPath","SELECT_FULL_PATH","error","timestamp","id","ERROR","detectParams","DETECT_PARAMS","paramsDetected","PARAMS_DETECTED","TimeStamp","ts","date","Date","fmtDate","toLocaleDateString","fmtTime","toLocaleTimeString","title","concat","style","display","whiteSpace","width","marginRight","FileSize","_ref2","fmtSize","bytes","si","thresh","Math","abs","size","unit","units","u","toFixed","humanFileSize","textAlign","Cell","_ref3","overflow","textOverflow","FileBrowserEntry","onClick","_this$props","details","myStyle","cursor","tsStyles","paddingRight","flexGrow","FileBrowserEntry_Cell","FileBrowserEntry_FileSize","owner","FileBrowserEntry_TimeStamp","ctime","mtime","FileBrowserHeader","alignRight","paddingBottom","FileEntry","components_FileBrowserEntry","dispatch","browserActions","window","setTimeout","toString","objectWithoutProperties","newProps","initialPath","enableReinitialize","Input","autoComplete","lastOpened","fileHistory","separator","recentFiles","item","floating","Menu","content","option","idx","key","refresh","currentPath","handleInputChange","goUp","driveOptions","placeOptions","components_RecentFiles","components_PathDropDownItem","components_PathInput","listRef","scrollToTop","current","scrollToItem","sortByKey","array","getKey","sort","a","b","x","y","browser","isLoading","getSortKey","toLowerCase","dirEntries","dir","components_FolderEntry","fileEntries","f","components_FileEntry","entries","index_esm","overflowY","ref","height","itemCount","itemSize","index","Group","components_PathBar","components_FileBrowserHeader","isOpen","components_FileBrowser","labelPosition","inRectConstraint","max","min","cbToRadius","cx","cy","cb","dx","dy","sqrt","dist","keepOnCY","riConstraint","outerPos","otherX","roConstraints","innerPos","Handle","scale","withCross","args","transform","stroke","strokeWidth","fill","crossSpec","r","cross","d","relativeCoords","parent","elem","svg","ownerSVGElement","inWidthAttr","getAttribute","inWidth","getBoundingClientRect","getScalingFactor","parentPos","pageX","left","scrollX","pageY","top","scrollY","posRef","DraggableHandle","_React$Component","_getPrototypeOf2","classCallCheck","_len","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","dragging","drag","externalMouseMove","move","externalLeave","stopDrag","externalMouseUp","applyConstraint","constraint","startDrag","preventDefault","parentOnDragStart","assertThisInitialized","onDragMove","constrained","parentOnDrop","_this$state","inherits","createClass","imageWidth","visibility","DraggableHandle_Handle","onMouseUp","onMouseMove","onMouseDown","_this$state$drag","renderCommon","renderDragging","HandleParent","currentHandle","handleDragStart","h","handleDrop","handleMouseMove","handleMouseLeave","handleMouseUp","onMouseLeave","onKeyDown","onKeyboardEvent","outline","tabIndex","renderChildren","_this2","child","handleKeyEvent","update","delta","shiftKey","defaultMaskStyles","fillOpacity","strokeOpacity","Disk","imageHeight","image","onCenterChange","onRChange","rHandle","border","viewBox","widgets_HandleParent","newCoords","widgets_DraggableHandle","create","dataset","analysisType","CREATE","created","analysis","CREATED","updateParameters","parameters","kind","UPDATE_PARAMETERS","setFrameViewMode","mode","initialParams","SET_FRAMEVIEW_MODE","run","RUN","running","job","RUNNING","remove","REMOVE","removed","REMOVED","BusySpinner","margin","padding","position","bottom","right","color","opacity","BusyWrapper","busy","widgets_BusySpinner","ResultImage","result","results","imageRendering","xlinkHref","imageURL","analysisActions","Result","frameDetails","PICK_FRAME","oldParams","newX","round","newY","_analysis$frameDetail","_this$props2","widgets_BusyWrapper","components_ResultImage","renderPickHandles","ResultList","selectedImg","selectImage","getJob","currentJob","jobsById","history","jobHistory","RESULT","pickCoords","img","components_Result","startTimestamp","endTimestamp","dt","ResultList_ResultImageSelector","ResultImageSelector","availableImages","description","analyses","byId","jobId","jobs","ds","datasets","SUM_FRAMES","frameViewModeOptions","FrameViewModeSelector","scanWidth","scanHeight","shape","getAnalysisStatus","handleApply","handleRemove","applyIconProps","attached","getFrameJob","frameJobId","FRAME","frameJob","subtitle","resultWidth","resultHeight","frameViewBusy","Grid","columns","Row","Column","components_FrameViewModeSelector","components_ResultList","components_Toolbar","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","tmpJobId","tmpJob","err","return","handleCenterChange","handleRChange","components_FrameView","components_AnalysisItem","widgets_Disk","Point","widgets_Point","getPathArc","center","start","end","radius","degree","points","push","getLocationFromAngle","clockWise","join","getCirclePath","radian","PI","cos","sin","Ring","ri","ro","onRIChange","onROChange","riHandle","roHandle","pathSpec","fillRule","handleRIChange","handleROChange","widgets_Ring","resultDetails","APPLY_DISK_MASK","components_DiskMaskAnalysis","APPLY_RING_MASK","components_RingMaskAnalysis","CENTER_OF_MASS","components_CenterOfMassAnalysis","APPLY_POINT_SELECTOR","components_PointSelectionAnalysis","AnalysisList","ids","analysisId","Analysis","updateById","partialRecord","newObj","assign","newById","insertById","record","newIds","toConsumableArray","filterWithPred","pred","reduce","acc","AnalysisMetadata","_AnalysisMetadata","long","short","showInUI","getMetadata","analysisTypeOptions","AnalysisSelect","labeled","button","className","handleAddAnalysis","components_AnalysisSelect","renderParams","Table","DatasetParams","HeaderCell","Body","DiagElem","DatasetInfo_DiagElems","diagnostics","renderValue","DiagElems","DatasetInfo_DiagElem","DatasetInfo","components_DatasetParams","cancelOpen","CANCEL_OPEN","delete","DELETE","deleted","DELETED","detect","DETECT","detected","DETECTED","detectFailed","DETECT_FAILED","handleRemoveDataset","datasetActions","DatasetContainer","_msg","OPENING","DELETING","dividing","marginTop","marginBottom","horizontal","Modal","trigger","link","Popup","components_DatasetInfo","flexShrink","components_DatasetToolbar","components_AnalysisList","components_AddAnalysis","parseNumList","nums","split","part","getInitial","otherwise","initial","tileshape","_formikBag$props","BLO","onCancel","datasetTypeOptions","DatasetTypeSelect","currentType","ds_path","HDF5","HDFS","scan_size","K2IS","MIB","components_RawFileParamsForm","detector_size_raw","crop_detector_to","dtype","RAW","DatasetOpen","datasetType","setDatasetType","formInitial","formPath","createDataset","form","components_DatasetTypeSelect","components_HDF5ParamsForm","components_HDFSParamsForm","MIBParamsForm","BLOParamsForm","K2ISParamsForm","formVisible","openDataset","formInitialParams","uuid","busyPath","DatasetList","dsId","Dataset","components_DatasetOpenSpinner","components_DatasetOpen","components_BrowserWrapper","DISMISS","dismiss","errorActions","negative","onDismiss","clusterConnected","channelConnected","latestErrors","showModal","components_Error","App","Container","logo","alignSelf","src_About","components_ErrorList","components_ChannelStatus","components_DatasetList","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","startJob","datasetId","fetch","body","JSON","stringify","credentials","method","json","cancelJob","createAnalysisSaga","cancelOldJob","analysisSidecar","updateFrameViewMode","updateFrameViewParams","doRemoveAnalysisSaga","analysisRootSaga","getAnalysisDetails","minLength","selectDataset","selectAnalysis","selectJob","action","datasetState","sidecarTask","regenerator_default","wrap","_context","prev","sent","fork","put","take","t0","now","stop","_marked","_context2","abrupt","_marked2","runOrParamsChannel","oldJobId","_context3","actionChannel","buffers","sliding","_marked3","_context4","_marked4","_context5","_marked5","_context6","finish","_marked6","_context7","takeEvery","_marked7","CONFIG_KEY","joinPaths","parts","replace","RegExp","trim","mergeLocalStorage","localSettings","localStorage","getItem","getDefaultLocalConfig","localSettingsParsed","parse","defaultConfig","setLocalStorage","setItem","cwd","getDirectoryListing","url","directoryListingSaga","fetchOnRequest","fetchDirectoryListing","fetchDirectoryListOnOpen","sagas_marked","_action$payload","newPath","sagas_marked2","browserState","alternative","_browserState","_timestamp","_id","home","sagas_marked3","sagas_marked4","MessageTypes","initialState","INITIAL_STATE","START_JOB","finishJob","FINISH_JOB","taskResult","TASK_RESULT","jobError","JOB_ERROR","close","CLOSE","createMessage","messageType","attribs","Messages","followup","binary","objectURL","BINARY","deleteDataset","DELETE_DATASET","webSocketSaga","actionsFromChannel","handleBinaryParts","handleTaskResult","handleFinishJob","createWebSocketChannel","eventChannel","emit","onMessage","Blob","channelMessages","URL","createObjectURL","parsed","onOpen","onClose","END","onError","ws","WebSocket","port","addEventListener","removeEventListener","socketChannel","channelActions","channel_sagas_marked","channel_sagas_marked2","numParts","binMsg","channel_sagas_marked3","images","numMessages","descriptions","channel_sagas_marked4","sagas_marked5","connection","checkClusterConnection","connectSaga","putClusterStatus","trackClusterConnection","clusterConnectionSaga","conn","cluster_sagas_marked","cluster_sagas_marked2","cluster_sagas_marked3","all","cluster_sagas_marked4","FETCH","fetched","FETCHED","fetchFailed","FETCH_FAILED","getConfig","getConfigOnReconnect","getConfigSaga","updateLocalStorageConfig","firstConfigFetch","configRootSaga","config_sagas_marked","configResponse","mergedConfig","configActions","removeItem","config_sagas_marked2","config_sagas_marked3","config_sagas_marked4","config_sagas_marked5","detectDataset","createDatasetSaga","deleteDatasetSaga","doOpenDataset","openDatasetSagaFullPath","openDatasetSaga","datasetRootSaga","resp","dataset_sagas_marked","dataset_sagas_marked2","fullPath","prefillParams","detectResult","datasetParams","dataset_sagas_marked3","dataset_sagas_marked4","dataset_sagas_marked5","sagas_marked6","rootSaga","src_sagas_marked","initialAnalysisState","ChannelStatusCodes","initialBrowserState","initialChannelState","WAITING","initialClusterConnectionState","initialConfigState","initialDatasetState","initialOpenDatasetState","initialErrorState","initialJobState","rootReducer","combineReducers","newDetails","oldJob","newJobs","newFrameDetails","READY","items","inp","newLastOpened","newFileHistory","curr","indexOf","place","sagaMiddleware","createSagaMiddleware","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","ReactDOM","es","src_App","document","getElementById","process","origin","response","headers","get","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.e62e8246.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/LiberTEM logo-medium.7999e0dc.png\";","import { ActionsUnion, createAction } from '../helpers/actionHelpers';\nimport { ConnectRequestParams } from '../messages';\n\nexport enum ActionTypes {\n    NOT_CONNECTED = 'CLUSTER_NOT_CONNECTED',\n    CONNECT = 'CLUSTER_CONNECT',\n    CONNECTED = 'CLUSTER_CONNECTED',\n}\n\nexport const Actions = {\n    notConnected: () => createAction(ActionTypes.NOT_CONNECTED),\n    connect: (params: ConnectRequestParams) => createAction(ActionTypes.CONNECT, { params }),\n    connected: (params: ConnectRequestParams) => createAction(ActionTypes.CONNECTED, { params }),\n}\n\nexport type Actions = ActionsUnion<typeof Actions>;\n","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Header, List } from \"semantic-ui-react\";\nimport { RootReducer } from \"./store\";\n\nconst mapStateToProps = (state: RootReducer) => {\n    return {\n        version: state.config.version,\n        revision: state.config.revision,\n    }\n}\n\ntype MergedProps = ReturnType<typeof mapStateToProps>;\n\nconst About: React.SFC<MergedProps> = ({ version, revision }) => {\n    return (\n        <>\n            <Header as=\"h3\">This is LiberTEM version {version} (revision {revision.slice(0, 8)})</Header>\n            <List>\n                <List.Item>\n                    <List.Icon name=\"github\" />\n                    <List.Content>\n                        Find us on <a href=\"https://github.com/LiberTEM/LiberTEM\">GitHub</a>\n                    </List.Content>\n                </List.Item>\n                <List.Item>\n                    <List.Icon name=\"bug\" />\n                    <List.Content>\n                        Found a bug? Got a feature request? Please <a href=\"https://github.com/LiberTEM/LiberTEM/issues/new\">open an issue!</a>\n                    </List.Content>\n                </List.Item>\n                <List.Item>\n                    <List.Icon name=\"legal\" />\n                    <List.Content>\n                        LiberTEM is licensed under the <a href=\"https://github.com/LiberTEM/LiberTEM/blob/master/LICENSE\">GNU General Public License v3.0</a>\n                    </List.Content>\n                </List.Item>\n                <List.Item>\n                    <List.Icon name=\"book\" />\n                    <List.Content>\n                        Read <a href=\"https://libertem.github.io/LiberTEM/\">the documentation</a>\n                    </List.Content>\n                </List.Item>\n                <List.Item>\n                    <List.Icon name=\"user\" />\n                    <List.Content>\n                        Read <a href=\"https://libertem.github.io/LiberTEM/acknowledgments.html\">the acknowledgments</a>\n                    </List.Content>\n                </List.Item>\n                <List.Item>\n                    <List.Icon name=\"gitter\" />\n                    <List.Content>\n                        Join our <a href=\"https://gitter.im/LiberTEM/Lobby\">chat on gitter!</a>\n                    </List.Content>\n                </List.Item>\n                <List.Item>\n                    <List.Icon name=\"linkify\" />\n                    <List.Content>\n                    <a href=\"https://doi.org/10.5281/zenodo.1478763\"><img src=\"https://zenodo.org/badge/DOI/10.5281/zenodo.1478763.svg\" alt=\"DOI\"/></a>\n                    </List.Content>\n                </List.Item>\n            </List>\n        </>\n    );\n}\n\nexport default connect(mapStateToProps)(About);","import { ActionCreatorsMapObject } from \"redux\";\n\nexport interface Action<T extends string> {\n    type: T\n}\n\nexport interface ActionWithPayload<T extends string, P> extends Action<T> {\n    payload: P\n}\n\nexport interface ActionWithMeta<T extends string, P, M> extends ActionWithPayload<T, P> {\n    meta: M\n}\n\nexport function createAction<T extends string>(type: T): Action<T>\nexport function createAction<T extends string, P, M>(type: T, payload?: P): ActionWithPayload<T, P>\nexport function createAction<T extends string, P, M>(type: T, payload?: P, meta?: M): ActionWithMeta<T, P, M>\nexport function createAction<T extends string, P, M>(type: T, payload?: P, meta?: M) {\n    if (meta === undefined && payload === undefined) {\n        return { type };\n    } else if (meta === undefined) {\n        return { type, payload };\n    } else {\n        return { type, payload, meta }\n    }\n}\n\nexport type ActionsUnion<A extends ActionCreatorsMapObject> = ReturnType<A[keyof A]>","import * as _ from \"lodash\";\n\nexport function assertNotReached(message: string): never {\n    throw new Error(message);\n}\n\nexport function defaultDebounce<T extends (...args: any[]) => any>(fn: T, delay: number = 50) {\n    return _.debounce(fn, delay, { maxWait: delay });\n}\n\nexport function getEnumValues(e: any) {\n    return Object.keys(e).filter(k => typeof e[k as any] === \"string\");\n}","\n/* \n * Common\n */\n\nexport interface FollowupPart {\n    numMessages: number,\n    descriptions: Array<{ title: string, desc: string }>,\n}\n\nexport interface MsgPartConfig {\n    version: string,\n    revision: string,\n    localCores: number,\n    cwd: string,\n    separator: string,\n}\n\nexport interface GetConfigResponse {\n    status: \"ok\",\n    config: MsgPartConfig,\n}\n\n/*\n * Connection\n */\n\nexport enum ClusterTypes {\n    LOCAL = \"LOCAL\",\n    TCP = \"TCP\",\n}\n\nexport const ClusterTypeMetadata: { [s: string]: { [s: string]: string } } = {\n    [ClusterTypes.LOCAL]: {\n        label: \"Create local cluster\",\n    },\n    [ClusterTypes.TCP]: {\n        label: \"Connect to cluster\",\n        helpText: \"can be either local or remote, connection via TCP\",\n    }\n}\n\nexport interface ConnectRequestLocalCluster {\n    type: ClusterTypes.LOCAL,\n    numWorkers?: number,\n}\n\nexport interface ConnectRequestTCP {\n    type: ClusterTypes.TCP,\n    address: string,\n}\n\nexport type ConnectRequestParams = ConnectRequestLocalCluster | ConnectRequestTCP\n\nexport interface ConnectRequest {\n    connection: ConnectRequestParams\n}\n\nexport type ConnectResponse = {\n    status: \"ok\",\n    connection: ConnectRequest,\n} | {\n    status: \"disconnected\",\n    connection: {},\n}\n\n/*\n * Dataset\n */\n\nexport enum DatasetTypes {\n    HDF5 = \"HDF5\",\n    HDFS = \"HDFS\",\n    RAW = \"RAW\",\n    MIB = \"MIB\",\n    BLO = \"BLO\",\n    K2IS = \"K2IS\",\n}\n\nexport interface DatasetParamsCommon {\n    name: string,\n}\n\nexport type DatasetParamsHDFS = {\n    type: DatasetTypes.HDFS,\n    path: string,\n    tileshape: number[],\n} & DatasetParamsCommon;\n\nexport type DatasetParamsHDF5 = {\n    type: DatasetTypes.HDF5,\n    path: string,\n    ds_path: string,\n    tileshape: number[],\n} & DatasetParamsCommon\n\nexport type DatasetParamsRaw = {\n    type: DatasetTypes.RAW,\n    path: string,\n    dtype: string,\n    detector_size_raw: number[],\n    crop_detector_to: number[],\n    scan_size: number[],\n    tileshape: number[],\n} & DatasetParamsCommon\n\nexport type DatasetParamsMIB = {\n    type: DatasetTypes.MIB,\n    path: string,\n    scan_size: number[],\n    tileshape: number[],\n} & DatasetParamsCommon\n\nexport type DatasetParamsBLO = {\n    type: DatasetTypes.BLO,\n    path: string,\n    tileshape: number[],\n} & DatasetParamsCommon\n\nexport type DatasetParamsK2IS = {\n    type: DatasetTypes.K2IS,\n    path: string,\n    scan_size: number[],\n} & DatasetParamsCommon\n\nexport type DatasetFormParams = DatasetParamsHDF5 | DatasetParamsHDFS | DatasetParamsRaw | DatasetParamsMIB | DatasetParamsBLO | DatasetParamsK2IS\n\nexport interface DatasetCreateParams {\n    id: string,\n    params: DatasetFormParams,\n}\n\nexport enum DatasetStatus {\n    OPEN = \"OPEN\",\n    OPENING = \"OPENING\",\n    DELETING = \"DELETING\",\n}\n\nexport interface DiagElemMsg {\n    name: string,\n    value: string | DiagElemMsg[],\n}\n\nexport type Dataset = DatasetCreateParams & {\n    status: DatasetStatus,\n    params: {\n        shape: number[],\n    }\n    diagnostics: DiagElemMsg[],\n}\n\nexport interface OpenDatasetRequest {\n    dataset: DatasetCreateParams\n}\n\nexport interface OpenDatasetResponseOk {\n    status: \"ok\",\n    dataset: string,  // TODO: uuid type?\n    details: Dataset,\n}\n\nexport interface OpenDatasetResponseError {\n    status: \"error\",\n    dataset: string,\n    msg: string,\n}\n\nexport type OpenDatasetResponse = OpenDatasetResponseOk | OpenDatasetResponseError\n\nexport interface DeleteDatasetResponse {\n    status: \"ok\",\n    dataset: string,\n}\n\nexport interface DetectDatasetSuccessResponse {\n    status: \"ok\",\n    datasetParams: DatasetFormParams,\n}\n\nexport interface DetectDatasetErrorResponse {\n    status: \"error\",\n    path: string,\n    msg: string,\n}\n\nexport type DetectDatasetResponse = DetectDatasetSuccessResponse | DetectDatasetErrorResponse;\n\nexport type MsgPartDataset = Dataset\n\n// type alias to add client-side state to datasets\nexport type DatasetState = Dataset & {}\n\n/*\n * Job\n */\nexport interface MsgPartJob {\n    id: string,\n    dataset: string,\n}\n\nexport interface MaskDefRing {\n    shape: \"ring\",\n    cx: number,\n    cy: number,\n    ri: number,\n    ro: number\n}\n\nexport interface MaskDefDisk {\n    shape: \"disk\",\n    cx: number,\n    cy: number,\n    r: number,\n}\n\nexport interface PointDef {\n    shape: \"point\",\n    cx: number,\n    cy: number,\n}\n\n// TODO: shape doesn't really make sense here, needs to be restructured\nexport interface CenterOfMassParams {\n    shape: \"com\",\n    cx: number,\n    cy: number,\n    r: number,\n}\n\nexport interface PickFrameParams {\n    x: number,\n    y: number,\n}\n\nexport enum AnalysisTypes {\n    APPLY_RING_MASK = \"APPLY_RING_MASK\",\n    APPLY_DISK_MASK = \"APPLY_DISK_MASK\",\n    APPLY_POINT_SELECTOR = \"APPLY_POINT_SELECTOR\",\n    CENTER_OF_MASS = \"CENTER_OF_MASS\",\n    SUM_FRAMES = \"SUM_FRAMES\",\n    PICK_FRAME = \"PICK_FRAME\",\n}\n\nexport interface RingMaskDetails {\n    type: AnalysisTypes.APPLY_RING_MASK,\n    parameters: MaskDefRing,\n}\n\nexport interface DiskMaskDetails {\n    type: AnalysisTypes.APPLY_DISK_MASK,\n    parameters: MaskDefDisk,\n}\n\nexport interface PointDefDetails {\n    type: AnalysisTypes.APPLY_POINT_SELECTOR,\n    parameters: PointDef,\n}\n\nexport interface CenterOfMassDetails {\n    type: AnalysisTypes.CENTER_OF_MASS,\n    parameters: CenterOfMassParams,\n}\n\nexport interface SumFramesDetails {\n    type: AnalysisTypes.SUM_FRAMES,\n    parameters: {},\n}\n\nexport interface PickFrameDetails {\n    type: AnalysisTypes.PICK_FRAME,\n    parameters: PickFrameParams,\n}\n\nexport type AnalysisParameters = MaskDefRing | MaskDefDisk | CenterOfMassParams | PointDef | PickFrameParams;\nexport type AnalysisDetails = RingMaskDetails | DiskMaskDetails | CenterOfMassDetails | PointDefDetails | SumFramesDetails | PickFrameDetails;\n\nexport interface StartJobRequest {\n    job: {\n        dataset: string,\n        analysis: AnalysisDetails,\n    }\n}\n\nexport interface StartJobResponse {\n    status: \"ok\",\n    job: string,\n    details: MsgPartJob,\n}\n\nexport interface CancelJobResponse {\n    status: \"ok\",\n    job: string,\n}\n\n\n/*\n * fs browser \n */\n\n// some named place, i.e. \"Documents\", \"Home\", ...\nexport interface FSPlace {\n    title: string,\n    path: string,\n    key: string,\n}\n\nexport interface DirectoryListingDetails {\n    name: string,\n    size: number,\n    ctime: number,\n    mtime: number,\n    owner: string,\n}\n\nexport interface DirectoryListingResponseOK {\n    status: \"ok\",\n    path: string,\n    files: DirectoryListingDetails[],\n    dirs: DirectoryListingDetails[],\n    drives: string[],\n    places: FSPlace[],\n}\n\nexport interface DirectoryListingResponseError {\n    status: \"error\",\n    path: string,\n    code: string,\n    msg: string,\n    alternative?: string,\n}\n\nexport type DirectoryListingResponse = DirectoryListingResponseOK | DirectoryListingResponseError;\n","import { ActionsUnion, createAction } from \"../helpers/actionHelpers\";\nimport { DatasetFormParams, DirectoryListingDetails, FSPlace } from \"../messages\";\n\nexport enum ActionTypes {\n    LIST_DIRECTORY = 'BROWSER_LIST_DIRECTORY',\n    LIST_FULL_PATH = 'BROWSER_LIST_DIRECTORY_FULL',\n    DIRECTORY_LISTING = 'BROWSER_DIRECTORY_LISTING',\n    DETECT_PARAMS = 'BROWSER_DETECT_PARAMS',\n    PARAMS_DETECTED = 'BROWSER_PARAMS_DETECTED',\n    ERROR = 'BROWSER_ERROR',\n    OPEN = 'BROWSER_OPEN',\n    CANCEL = 'BROWSER_CANCEL',\n    SELECT = 'BROWSER_SELECT',\n    SELECT_FULL_PATH = 'BROWSER_SELECT_FULL_PATH',\n}\n\nexport const Actions = {\n    list: (path: string, name?: string) => createAction(ActionTypes.LIST_DIRECTORY, { path, name }),\n    dirListing: (path: string, dirs: DirectoryListingDetails[], files: DirectoryListingDetails[], drives: string[], places: FSPlace[]) => createAction(ActionTypes.DIRECTORY_LISTING, { path, dirs, files, drives, places }),\n    open: () => createAction(ActionTypes.OPEN),\n    cancel: () => createAction(ActionTypes.CANCEL),\n    select: (path: string, name: string) => createAction(ActionTypes.SELECT, { path, name }),\n    selectFullPath: (path: string) => createAction(ActionTypes.SELECT_FULL_PATH, { path }),\n    error: (msg: string, timestamp: number, id: string) => createAction(ActionTypes.ERROR, { msg, timestamp, id }),\n    detectParams: (path: string) => createAction(ActionTypes.DETECT_PARAMS, { path }),\n    paramsDetected: (path: string, params: DatasetFormParams) => createAction(ActionTypes.PARAMS_DETECTED, { path, params }),\n}\n\nexport type Actions = ActionsUnion<typeof Actions>;","import { FormikProps, withFormik } from \"formik\";\nimport * as React from \"react\";\nimport { Button, Form } from \"semantic-ui-react\";\nimport { ConfigState } from \"../../config/reducers\";\nimport { Omit } from \"../../helpers/types\";\nimport { ClusterTypes, ConnectRequestLocalCluster } from \"../../messages\";\n\ntype FormValues = Omit<ConnectRequestLocalCluster, \"type\">;\n\ninterface FormProps {\n    onSubmit: (params: ConnectRequestLocalCluster) => void,\n    config: ConfigState,\n}\n\ntype MergedProps = FormikProps<FormValues> & FormProps;\n\nconst LocalConnectionForm: React.SFC<MergedProps> = ({\n    values,\n    touched,\n    errors,\n    dirty,\n    isSubmitting,\n    handleChange,\n    handleBlur,\n    handleSubmit,\n    handleReset,\n}) => {\n    return (\n        <Form onSubmit={handleSubmit}>\n            <Form.Field>\n                <label htmlFor=\"numWorkers\">Number of Workers:</label>\n                <input type=\"number\" name=\"numWorkers\" value={values.numWorkers}\n                    onChange={handleChange}\n                    onBlur={handleBlur} />\n                {errors.numWorkers && touched.numWorkers && errors.numWorkers}\n            </Form.Field>\n            <Button primary={true} type=\"submit\" disabled={isSubmitting}>Connect</Button>\n        </Form>\n    )\n}\n\nexport default withFormik<FormProps, FormValues>({\n    mapPropsToValues: (ownProps: FormProps) => ({\n        numWorkers: ownProps.config.localCores,\n    }),\n    handleSubmit: (values, formikBag) => {\n        const { onSubmit } = formikBag.props;\n        onSubmit({\n            type: ClusterTypes.LOCAL,\n            ...values,\n        });\n    }\n})(LocalConnectionForm);\n","\nimport { FormikProps, withFormik } from \"formik\";\nimport * as React from \"react\";\nimport { Button, Form } from \"semantic-ui-react\";\nimport { Omit } from \"../../helpers/types\";\nimport { ClusterTypes, ConnectRequestTCP } from \"../../messages\";\n\ntype FormValues = Omit<ConnectRequestTCP, \"type\">;\n\ninterface FormProps {\n    onSubmit: (params: ConnectRequestTCP) => void,\n}\n\ntype MergedProps = FormikProps<FormValues> & FormProps;\n\nconst TCPConnectionForm: React.SFC<MergedProps> = ({\n    values,\n    touched,\n    errors,\n    dirty,\n    isSubmitting,\n    handleChange,\n    handleBlur,\n    handleSubmit,\n    handleReset,\n}) => {\n    return (\n        <Form onSubmit={handleSubmit}>\n            <Form.Field>\n                <label htmlFor=\"address\">Scheduler URI</label>\n                <input type=\"text\" name=\"address\" value={values.address}\n                    onChange={handleChange}\n                    onBlur={handleBlur} />\n                {errors.address && touched.address && errors.address}\n            </Form.Field>\n            <Button primary={true} type=\"submit\" disabled={isSubmitting}>Connect</Button>\n        </Form>\n    )\n}\n\nexport default withFormik<FormProps, FormValues>({\n    mapPropsToValues: () => ({\n        address: \"tcp://localhost:8786\",\n    }),\n    handleSubmit: (values, formikBag) => {\n        const { onSubmit } = formikBag.props;\n        onSubmit({\n            type: ClusterTypes.TCP,\n            ...values\n        });\n    }\n})(TCPConnectionForm);\n","\nimport * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Dropdown, DropdownProps, Segment } from \"semantic-ui-react\";\nimport * as clusterActions from \"../../cluster/actions\";\nimport { getEnumValues } from \"../../helpers\";\nimport { ClusterTypeMetadata, ClusterTypes, ConnectRequestParams } from \"../../messages\";\nimport { RootReducer } from \"../../store\";\nimport LocalConnectionForm from \"./LocalConnectionForm\";\nimport TCPConnectionForm from \"./TCPConnectionForm\";\n\n\nconst mapDispatchToProps = {\n    connectToCluster: clusterActions.Actions.connect,\n};\n\nconst mapStateToProps = (state: RootReducer) => {\n    return {\n        config: state.config,\n    }\n}\n\ntype MergedProps = DispatchProps<typeof mapDispatchToProps> & ReturnType<typeof mapStateToProps>;\n\nconst clusterTypeKeys = getEnumValues(ClusterTypes);\nconst clusterTypeOptions = clusterTypeKeys.map(t => ({\n    text: ClusterTypeMetadata[ClusterTypes[t as any]].label,\n    value: ClusterTypes[t as any],\n}));\n\ninterface ConnectionParamsState {\n    clusterType: ClusterTypes\n}\n\nclass ClusterConnectionForm extends React.Component<MergedProps, ConnectionParamsState> {\n    public state = {\n        clusterType: ClusterTypes.LOCAL,\n    }\n\n    public setType = (type: ClusterTypes) => {\n        this.setState({\n            clusterType: type,\n        });\n    }\n\n    public handleChange = (e: React.SyntheticEvent, data: DropdownProps) => {\n        const value = data.value as ClusterTypes;\n        this.setType(value);\n    }\n\n    public handleSubmit = (params: ConnectRequestParams) => {\n        this.props.connectToCluster(params);\n    }\n\n    public renderForm() {\n        const { clusterType } = this.state;\n        const { config } = this.props;\n\n        switch (clusterType) {\n            case ClusterTypes.LOCAL: {\n                return <LocalConnectionForm config={config} onSubmit={this.handleSubmit} />\n            }\n            case ClusterTypes.TCP: {\n                return <TCPConnectionForm onSubmit={this.handleSubmit} />\n            }\n        }\n    }\n\n    public render() {\n        return (\n            <>\n                <div>\n                    <Dropdown\n                        inline={true}\n                        options={clusterTypeOptions}\n                        value={this.state.clusterType}\n                        onChange={this.handleChange}\n                    />\n                </div>\n                <Segment>\n                    {this.renderForm()}\n                </Segment>\n            </>\n        )\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ClusterConnectionForm);","import * as React from 'react';\nimport { Icon, Message } from 'semantic-ui-react';\n\ninterface ChannelConnectingProps {\n    msg: string,\n}\n\nconst ChannelConnecting: React.SFC<ChannelConnectingProps> = ({ msg }) => (\n    <Message icon={true}>\n        <Icon name='cog' loading={true} />\n        <Message.Content>\n            <Message.Header>Connecting to LiberTEM</Message.Header>\n            {msg}\n        </Message.Content>\n    </Message>\n)\n\nexport default ChannelConnecting;","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport ClusterConnectionForm from \"../../cluster/components/ClusterConnectionForm\";\nimport { RootReducer } from \"../../store\";\nimport ChannelConnecting from \"./ChannelConnecting\";\n\nconst mapStateToProps = (state: RootReducer) => {\n    return {\n        channelStatus: state.channelStatus,\n        clusterConnection: state.clusterConnection,\n    }\n}\n\n\ntype MergedProps = ReturnType<typeof mapStateToProps>;\n\nconst messages = {\n    waiting: \"Waiting...\",\n    connecting: \"Connecting...\",\n}\n\nconst clusterMessages = {\n    connected: \"Connected, waiting for initial state...\",\n    unknown: \"Connected, fetching cluster status...\",\n}\n\nconst ChannelStatus: React.SFC<MergedProps> = ({ children, channelStatus, clusterConnection }) => {\n    switch (channelStatus.status) {\n        case \"waiting\":\n        case \"connecting\": {\n            return <ChannelConnecting msg={messages[channelStatus.status]} />;\n        }\n        case \"connected\": {\n            if (clusterConnection.status === \"disconnected\") {\n                return <ClusterConnectionForm />\n            } else if (clusterConnection.status === \"connected\") {\n                return <ChannelConnecting msg={clusterMessages.connected} />;\n            } else if (clusterConnection.status === \"unknown\") {\n                return <ChannelConnecting msg={clusterMessages.unknown} />;\n            }\n        }\n    }\n    return <>{children}</>;\n}\n\nexport default connect(mapStateToProps)(ChannelStatus);","import * as React from \"react\";\nimport { Icon, SemanticICONS } from \"semantic-ui-react\";\nimport { DirectoryListingDetails } from \"../../messages\";\n\n\ninterface FileBrowserEntryProps {\n    style: object,\n    details: DirectoryListingDetails,\n    onClick?: () => void,\n    icon?: SemanticICONS,\n}\n\ninterface TimeStampProps {\n    ts: number,\n}\n\nexport const TimeStamp: React.SFC<TimeStampProps> = ({ ts }) => {\n    const date = new Date(ts * 1000);\n    const fmtDate = date.toLocaleDateString();\n    const fmtTime = date.toLocaleTimeString();\n    const title = `${fmtDate} ${fmtTime}`;\n    return (\n        <div style={{ display: \"flex\", whiteSpace: \"nowrap\" }} title={title}>\n            <div style={{ width: \"50%\", marginRight: \"10px\" }}>{fmtDate}</div>\n            <div style={{ width: \"45%\" }}>{fmtTime}</div>\n        </div>\n    )\n}\n\n// adapted from https://stackoverflow.com/a/14919494/540644\nfunction humanFileSize(bytes: number, si: boolean = false) {\n    const thresh = si ? 1000 : 1024;\n    if (Math.abs(bytes) < thresh) {\n        return {\n            size: bytes,\n            unit: 'B',\n        }\n    }\n    const units = si\n        ? ['kB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB']\n        : ['KiB', 'MiB', 'GiB', 'TiB', 'PiB', 'EiB', 'ZiB', 'YiB'];\n    let u = -1;\n    do {\n        bytes /= thresh;\n        ++u;\n    } while (Math.abs(bytes) >= thresh && u < units.length - 1);\n\n    return {\n        size: bytes.toFixed(1),\n        unit: units[u],\n    }\n}\n\ninterface FileSizeProps {\n    size: number,\n    si?: boolean,\n}\n\nexport const FileSize: React.SFC<FileSizeProps> = ({ size, si }) => {\n    const fmtSize = humanFileSize(size, si)\n    return (\n        <div style={{ textAlign: \"right\" }}>\n            {fmtSize.size} {fmtSize.unit}\n        </div>\n    );\n}\n\nexport const Cell: React.SFC<{ title?: string }> = ({ children, title }) => {\n    const styles: React.CSSProperties = {\n        whiteSpace: \"nowrap\",\n        overflow: \"hidden\",\n        textOverflow: \"ellipsis\",\n        marginRight: \"10px\",\n    }\n    return (\n        <div style={styles} title={title}>{children}</div>\n    );\n}\n\n\nclass FileBrowserEntry extends React.Component<FileBrowserEntryProps> {\n    public onClick = (e: React.MouseEvent) => {\n        const { onClick } = this.props;\n        if (onClick) {\n            onClick();\n        }\n    }\n\n    public render() {\n        const { details, style, icon } = this.props;\n        const myStyle: React.CSSProperties = {\n            cursor: \"pointer\",\n            ...style,\n        };\n\n        const tsStyles: React.CSSProperties = {\n            textAlign: \"right\",\n        };\n\n        return (\n            <div onClick={this.onClick} style={myStyle}>\n                <div style={{ display: \"flex\", paddingRight: \"10px\" }}>\n                    <div style={{ width: \"20%\", flexGrow: 1 }}>\n                        <Cell title={details.name}>\n                            {icon && <Icon name={icon} />}\n                            {details.name}\n                        </Cell>\n                    </div>\n                    <div style={{ width: \"10%\" }}><Cell><FileSize size={details.size} si={false} /></Cell></div>\n                    <div style={{ width: \"10%\" }}><Cell>{details.owner}</Cell></div>\n                    <div style={{ width: \"18%\", ...tsStyles }}>\n                        <Cell><TimeStamp ts={details.ctime} /></Cell>\n                    </div>\n                    <div style={{ width: \"18%\", ...tsStyles }}>\n                        <Cell><TimeStamp ts={details.mtime} /></Cell>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default FileBrowserEntry;","import * as React from \"react\";\nimport { Cell } from \"./FileBrowserEntry\";\n\nconst FileBrowserHeader: React.SFC = () => {\n    const alignRight: React.CSSProperties = {\n        textAlign: \"right\",\n    };\n\n    // ugly hack: padding-right to compensate for scrollbar size\n    return (\n        <div style={{ paddingRight: \"20px\", paddingBottom: \"10px\" }}>\n            <div style={{ display: \"flex\" }}>\n                <div style={{ width: \"20%\", flexGrow: 1 }}>\n                    <Cell>Name</Cell>\n                </div>\n                <div style={{ width: \"10%\", ...alignRight }}>\n                    <Cell>Size</Cell>\n                </div>\n                <div style={{ width: \"10%\" }}>\n                    <Cell>Owner</Cell>\n                </div>\n                <div style={{ width: \"18%\", ...alignRight }}>\n                    <Cell>Created</Cell>\n                </div>\n                <div style={{ width: \"18%\", ...alignRight }}>\n                    <Cell>Modified</Cell>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default FileBrowserHeader;","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { DirectoryListingDetails } from \"../../messages\";\nimport * as browserActions from '../actions';\nimport FileBrowserEntry from \"./FileBrowserEntry\";\n\ninterface FileEntryProps {\n    path: string,\n    style: object,\n    details: DirectoryListingDetails,\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch, ownProps: FileEntryProps) => {\n    return {\n        select: () => dispatch(browserActions.Actions.select(ownProps.path, ownProps.details.name)),\n    };\n}\n\ntype MergedProps = FileEntryProps & ReturnType<typeof mapDispatchToProps>;\n\nclass FileEntry extends React.Component<MergedProps> {\n    public render() {\n        const { details, style, select } = this.props;\n\n        return (\n            <FileBrowserEntry onClick={select} style={style} details={details}\n                icon=\"file outline\" />\n        )\n    }\n}\n\nexport default connect(null, mapDispatchToProps)(FileEntry);","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { DirectoryListingDetails } from \"../../messages\";\nimport * as browserActions from '../actions';\nimport FileBrowserEntry from \"./FileBrowserEntry\";\n\nconst mapDispatchToProps = (dispatch: Dispatch, ownProps: FolderEntryProps) => {\n    return {\n        list: () => {\n            dispatch(browserActions.Actions.list(ownProps.path, ownProps.details.name));\n            window.setTimeout(() => ownProps.onChange(), 0);\n        },\n    };\n}\n\ninterface FolderEntryProps {\n    path: string,\n    style: object,\n    details: DirectoryListingDetails,\n    onChange: () => void,\n}\n\ntype MergedProps = FolderEntryProps & ReturnType<typeof mapDispatchToProps>;\n\nconst FolderEntry: React.SFC<MergedProps> = ({ list, details, style, onChange }) => {\n    return (\n        <FileBrowserEntry onClick={list} style={style} details={details} icon=\"folder\" />\n    )\n}\n\nexport default connect(null, mapDispatchToProps)(FolderEntry);\n","import * as React from 'react'\nimport { connect } from \"react-redux\";\nimport { Dropdown, DropdownItemProps } from \"semantic-ui-react\";\nimport * as browserActions from '../actions';\nimport { Dispatch } from 'redux';\n\nconst mapDispatchToProps = (dispatch: Dispatch, ownProps: DropdownItemProps) => {\n    return {\n        list: () => {\n            if (ownProps.value !== undefined) {\n                dispatch(browserActions.Actions.list(ownProps.value.toString()));\n                window.setTimeout(() => ownProps.onChange(), 0);\n            }\n        },\n    };\n}\n\ntype MergedProps = ReturnType<typeof mapDispatchToProps> & DropdownItemProps & {\n    onChange: () => void,\n};\n\nconst PathDropDownItem: React.SFC<MergedProps> = ({ list, ...props }) => {\n    const newProps = {\n        onClick: list,\n        ...props,\n    }\n    return <Dropdown.Item {...newProps} />;\n}\n\nexport default connect(null, mapDispatchToProps)(PathDropDownItem);","import { FormikProps, withFormik } from \"formik\";\nimport * as React from \"react\";\nimport { Form, Input } from \"semantic-ui-react\";\n\ninterface FormValues {\n    path: string,\n}\n\ninterface PathInputProps {\n    onChange: (path: string) => void,\n    initialPath: string,\n}\n\ntype MergedProps = FormikProps<FormValues> & PathInputProps;\n\nconst PathInput: React.SFC<MergedProps> = ({\n    values,\n    touched,\n    errors,\n    dirty,\n    isSubmitting,\n    handleChange,\n    handleBlur,\n    handleSubmit,\n    handleReset,\n}) => {\n    return (\n        <Form onSubmit={handleSubmit} style={{ flexGrow: 1 }}>\n            <Form.Field>\n                <Input autoComplete=\"off\" onBlur={handleBlur} onChange={handleChange} value={values.path} name=\"path\" />\n            </Form.Field>\n        </Form>\n    )\n}\n\nexport default withFormik<PathInputProps, FormValues>({\n    mapPropsToValues: ({ initialPath }) => ({\n        path: initialPath,\n    }),\n    handleSubmit: (values, formikBag) => {\n        const { onChange } = formikBag.props;\n        onChange(values.path);\n    },\n    enableReinitialize: true,\n})(PathInput);","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Dropdown, DropdownItemProps } from \"semantic-ui-react\";\nimport { DatasetTypes } from \"../../messages\";\nimport { RootReducer } from \"../../store\";\nimport * as browserActions from '../actions';\nimport { Dispatch } from \"redux\";\n\n\ntype DropdownOptions = Array<{\n    text: string,\n    value: {\n        type: DatasetTypes,\n        path: string,\n    },\n}>;\n\nconst mapStateToProps = (state: RootReducer) => {\n    return {\n        lastOpened: state.config.lastOpened,\n        fileHistory: state.config.fileHistory,\n        separator: state.config.separator,\n    };\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch) => {\n    return {\n        select: (path: string) => dispatch(browserActions.Actions.selectFullPath(path)),\n    };\n}\n\ntype MergedProps = ReturnType<typeof mapStateToProps> & ReturnType<typeof mapDispatchToProps>;\n\nconst RecentFiles: React.SFC<MergedProps> = ({ lastOpened, fileHistory, select }) => {\n\n    const recentFiles: DropdownOptions = fileHistory.filter((path: string) => lastOpened[path]).map((path: string) => {\n        const item = lastOpened[path];\n        return {\n            text: item.path,\n            value: {\n                type: item.type,\n                path: item.path,\n            },\n        };\n    });\n\n    const onClick = (e: React.MouseEvent<HTMLDivElement>, data: DropdownItemProps) => data.value && select(data.value.toString())\n\n    return (\n        <Dropdown item={true} text=\"Recent\" floating={true}>\n            <Dropdown.Menu>\n                <Dropdown.Header content=\"recent datasets\" />\n                {recentFiles.map((option, idx) => (\n                    <Dropdown.Item key={idx} value={option.value.path} content={option.text} onClick={onClick} />\n                ))}\n            </Dropdown.Menu>\n        </Dropdown>\n    );\n}\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(RecentFiles);","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { Dropdown, Menu } from \"semantic-ui-react\";\nimport * as browserActions from '../actions';\nimport { FSPlaces } from \"../types\";\nimport PathDropDownItem from \"./PathDropDownItem\";\nimport PathInput from \"./PathInput\";\nimport RecentFiles from \"./RecentFiles\";\n\nconst mapDispatchToProps = (dispatch: Dispatch, ownProps: PathBarProps) => {\n    return {\n        refresh: () => {\n            dispatch(browserActions.Actions.list(ownProps.currentPath));\n            window.setTimeout(() => ownProps.onChange(), 0);\n        },\n        handleInputChange: (path: string) => {\n            dispatch(browserActions.Actions.list(path));\n            window.setTimeout(() => ownProps.onChange(), 0);\n        },\n        goUp: () => {\n            dispatch(browserActions.Actions.list(ownProps.currentPath, '..'));\n            window.setTimeout(() => ownProps.onChange(), 0);\n        },\n    };\n}\n\ninterface PathBarProps {\n    currentPath: string,\n    onChange: () => void,\n    drives: string[],\n    places: FSPlaces,\n}\n\ntype MergedProps = ReturnType<typeof mapDispatchToProps> & PathBarProps;\n\nconst PathBar: React.SFC<MergedProps> = ({ currentPath, drives, places, onChange, refresh, goUp, handleInputChange }) => {\n    const driveOptions = drives.map((path) => ({ key: path, text: path }));\n    const placeOptions = Object.keys(places).map((key) => ({ key: places[key].path, text: places[key].title }))\n    return (\n        <Menu>\n            <RecentFiles />\n            <Dropdown text=\"Go to...\" floating={true} item={true}>\n                <Dropdown.Menu>\n                    <Dropdown.Header content=\"Drives\" />\n                    {driveOptions.map((option) => {\n                        return <PathDropDownItem key={option.key} value={option.key} content={option.text} onChange={onChange} />\n                    })}\n                    <Dropdown.Header content=\"Places\" />\n                    {placeOptions.map((option) => {\n                        return <PathDropDownItem key={option.key} value={option.key} content={option.text} onChange={onChange} />\n                    })}\n                </Dropdown.Menu>\n            </Dropdown>\n            <Menu.Item icon=\"arrow up\" onClick={goUp} />\n            <Menu.Item style={{ flexGrow: 1 }}>\n                <PathInput onChange={handleInputChange} initialPath={currentPath} />\n            </Menu.Item>\n            <Menu.Item icon=\"refresh\" onClick={refresh} />\n        </Menu>\n    );\n}\n\n\nexport default connect(null, mapDispatchToProps)(PathBar);","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { FixedSizeList as List } from \"react-window\";\nimport { Button, Header, Segment } from \"semantic-ui-react\";\nimport { DirectoryListingDetails } from \"../../messages\";\nimport { RootReducer } from \"../../store\";\nimport * as browserActions from '../actions';\nimport FileBrowserHeader from \"./FileBrowserHeader\";\nimport FileEntry from \"./FileEntry\";\nimport FolderEntry from \"./FolderEntry\";\nimport PathBar from \"./PathBar\";\nimport { Dispatch } from \"redux\";\n\nconst mapStateToProps = (state: RootReducer) => {\n    const { browser } = state;\n    return {\n        files: browser.files,\n        dirs: browser.dirs,\n        path: browser.path,\n        drives: browser.drives,\n        places: browser.places,\n        isLoading: browser.isLoading,\n    };\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch) => {\n    return {\n        cancel: () => dispatch(browserActions.Actions.cancel()),\n    };\n}\n\ntype MergedProps = ReturnType<typeof mapStateToProps> & ReturnType<typeof mapDispatchToProps>;\n\ninterface EntryFnArgs {\n    index: number,\n    style: object\n}\ntype EntryFn = (arg: EntryFnArgs) => void\n\nconst listRef = React.createRef<List>();\n\nconst scrollToTop = () => {\n    if (listRef.current === null) {\n        return;\n    }\n    listRef.current.scrollToItem(0);\n}\n\nfunction sortByKey<T extends object>(array: T[], getKey: (item: T) => any) {\n    return array.sort((a, b) => {\n        const x = getKey(a);\n        const y = getKey(b);\n        return ((x < y) ? -1 : ((x > y) ? 1 : 0));\n    });\n}\n\nconst FileBrowser: React.SFC<MergedProps> = ({ files, dirs, path, drives, places, cancel, isLoading }) => {\n    const getSortKey = (item: DirectoryListingDetails) => item.name.toLowerCase();\n    const dirEntries = sortByKey(dirs, getSortKey).map((dir) => (style: object) => <FolderEntry style={style} onChange={scrollToTop} path={path} details={dir} />);\n    const fileEntries = sortByKey(files, getSortKey).map((f) => ((style: object) => <FileEntry style={style} path={path} details={f} />));\n    const entries = dirEntries.concat(fileEntries);\n\n    const cellFn: EntryFn = ({ index, style }) => {\n        return entries[index](style)\n    }\n\n    let list = (\n        <List style={{ overflowY: \"scroll\" }} ref={listRef} height={300} width=\"100%\" itemCount={entries.length} itemSize={35}>\n            {cellFn}\n        </List>\n    );\n\n    if (isLoading) {\n        // FIXME: hardcoded height\n        list = (\n            <Segment loading={true} style={{ height: \"300px\" }} />\n        )\n    }\n\n    return (\n        <Segment.Group>\n            <Segment>\n                <Header as=\"h2\">Open dataset</Header>\n            </Segment>\n            <Segment>\n                <PathBar currentPath={path} drives={drives} places={places} onChange={scrollToTop} />\n            </Segment>\n            <Segment>\n                <FileBrowserHeader />\n                {list}\n            </Segment>\n            <Segment>\n                <Button onClick={cancel}>Cancel</Button>\n            </Segment>\n        </Segment.Group>\n    );\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(FileBrowser);","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Button, Icon } from \"semantic-ui-react\";\nimport { RootReducer } from \"../../store\";\nimport * as browserActions from '../actions';\nimport FileBrowser from \"./FileBrowser\";\n\nexport const mapStateToProps = (state: RootReducer) => {\n    return {\n        isOpen: state.browser.isOpen,\n    }\n}\n\nexport const mapDispatchToProps = {\n    open: browserActions.Actions.open,\n}\n\ntype MergedProps = ReturnType<typeof mapStateToProps> & DispatchProps<typeof mapDispatchToProps>;\n\nconst BrowserWrapper: React.SFC<MergedProps> = ({ isOpen, open }) => {\n    if (!isOpen) {\n        return (\n            <Button icon={true} labelPosition=\"left\" onClick={open}>\n                <Icon name='add' />\n                Browse\n            </Button>\n        );\n    }\n    return (\n        <FileBrowser />\n    );\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(BrowserWrapper)","export const inRectConstraint = (width: number, height: number) => (p: Point2D) => {\n    return {\n        x: Math.max(0, Math.min(width, p.x)),\n        y: Math.max(0, Math.min(height, p.y)),\n    }\n}\n\nexport const dist = (cx: number, cy: number, x: number, y: number) => {\n    const dx = cx - x;\n    const dy = cy - y;\n    return Math.sqrt(dx * dx + dy * dy);\n}\n\nexport const cbToRadius = (cx: number, cy: number, cb: ((r: number) => void) | undefined) => (x: number, y: number) => cb && cb(dist(cx, cy, x, y))\n\nexport const keepOnCY = (cy: number) => (p: Point2D) => {\n    return {\n        x: p.x,\n        y: cy,\n    }\n}\n\nexport const keepXLargerThan = (otherX: number) => (p: Point2D) => {\n    return {\n        x: otherX > p.x ? otherX : p.x,\n        y: p.y,\n    }\n}\n\nexport const keepXSmallerThan = (otherX: number) => (p: Point2D) => {\n    return {\n        x: otherX < p.x ? otherX : p.x,\n        y: p.y,\n    }\n}\n\nexport const riConstraint = (outerPos: number, cy: number) => (p: Point2D) => {\n    return keepXLargerThan(outerPos)(\n        keepOnCY(cy)(p)\n    );\n}\n\nexport const roConstraints = (innerPos: number, cy: number) => (p: Point2D) => {\n    return keepXSmallerThan(innerPos)(\n        keepOnCY(cy)(p)\n    );\n}","import * as React from \"react\";\n\nexport type HandleProps = {\n    x: number,\n    y: number,\n    scale: number,\n    withCross?: boolean,\n} & React.SVGProps<SVGCircleElement>;\n\nconst Handle: React.SFC<HandleProps> = ({ scale, x, y, withCross, ...args }) => {\n    const r = 3;\n    // scaleMatrix is needed to set the origin of the scale\n    const scaleMatrix = `matrix(${scale}, 0, 0, ${scale}, ${x - scale * x}, ${y - scale * y})`;\n    const style: React.CSSProperties = { transform: scaleMatrix, stroke: \"red\", strokeWidth: 1, fill: \"transparent\" };\n    const crossSpec = `\n        M${x - r / 2} ${y} L ${x + r / 2} ${y}\n        M${x} ${y - r / 2} L ${x} ${y + r / 2}\n    `;\n    const cross = withCross ? <path d={crossSpec} style={style} /> : null;\n    return (\n        <g {...args}>\n            <circle cx={x} cy={y} r={r} style={style} />\n            {cross}\n        </g>\n    )\n}\n\nexport interface DraggableHandleProps {\n    x: number,\n    y: number,\n    withCross?: boolean,\n    imageWidth?: number,\n    onDragMove?: (x: number, y: number) => void,\n    parentOnDragStart?: (h: DraggableHandle) => void,\n    parentOnDrop?: (x: number, y: number) => void,\n    constraint?: (p: Point2D) => Point2D,\n}\n\nfunction getScalingFactor(elem: SVGElement): number {\n    const svg = elem.ownerSVGElement;\n    if (svg === null) {\n        throw new Error(\"no owner SVG element?\");\n    }\n    const inWidthAttr = svg.getAttribute(\"width\");\n    if (inWidthAttr === null) {\n        throw new Error(\"no width on SVG element?\");\n    }\n    const inWidth = +inWidthAttr;\n    const svgMeasurements = svg.getBoundingClientRect();\n    return svgMeasurements.width / inWidth;\n}\n\nfunction relativeCoords(e: React.MouseEvent, parent: SVGElement) {\n    const f = getScalingFactor(parent);\n    const parentPos = parent.getBoundingClientRect();\n    const res = {\n        x: (e.pageX - (parentPos.left + window.scrollX)) / f,\n        y: (e.pageY - (parentPos.top + window.scrollY)) / f,\n    }\n    return res;\n}\n\nconst posRef = React.createRef<SVGRectElement>();\n\n/**\n * stateful draggable handle, to be used as part of <svg/>\n */\nexport class DraggableHandle extends React.Component<DraggableHandleProps> {\n    public state = {\n        dragging: false,\n        drag: { x: 0, y: 0 },\n    }\n\n    // mousemove event from outside (delegated from surrounding element)\n    public externalMouseMove = (e: React.MouseEvent<SVGElement>): void => {\n        this.move(e);\n    }\n\n    // mouseleave event from outside (delegated from surrounding element)\n    public externalLeave = (e: React.MouseEvent<SVGElement>): void => {\n        this.stopDrag(e);\n    }\n\n    // mouseup event from outside (delegated from surrounding element)\n    public externalMouseUp = (e: React.MouseEvent<SVGElement>): void => {\n        this.stopDrag(e);\n    }\n\n    public applyConstraint = (p: Point2D) => {\n        const { constraint } = this.props;\n        if (constraint) {\n            return constraint(p);\n        } else {\n            return p;\n        }\n    }\n\n    public startDrag = (e: React.MouseEvent<SVGElement>): void => {\n        e.preventDefault();\n        const { parentOnDragStart } = this.props;\n        if (posRef.current) {\n            this.setState({\n                dragging: true,\n                drag: this.applyConstraint(relativeCoords(e, posRef.current)),\n            });\n            if (parentOnDragStart) {\n                parentOnDragStart(this);\n            }\n        } else {\n            throw new Error(\"startDrag without posRef\");\n        }\n    }\n\n    public move = (e: React.MouseEvent<SVGElement>): void => {\n        const { onDragMove } = this.props;\n        if (!this.state.dragging) {\n            return;\n        }\n        if (posRef.current) {\n            this.setState({\n                drag: this.applyConstraint(relativeCoords(e, posRef.current)),\n            }, () => {\n                if (onDragMove) {\n                    const constrained = this.applyConstraint(this.state.drag)\n                    onDragMove(constrained.x, constrained.y);\n                }\n            })\n        } else {\n            throw new Error(\"move without posRef\");\n        }\n    }\n\n    public stopDrag = (e: React.MouseEvent<SVGElement>): void => {\n        const { parentOnDrop } = this.props;\n        const { dragging, drag } = this.state;\n        if (!dragging) {\n            return;\n        }\n        this.setState({\n            dragging: false,\n        })\n        if (parentOnDrop) {\n            parentOnDrop(drag.x, drag.y);\n        }\n    }\n\n    public renderCommon(x: number, y: number) {\n        const { imageWidth } = this.props;\n        const scale = imageWidth === undefined ? 1 : imageWidth / 128;\n        // empty zero-size <rect> as relative position reference\n        return (\n            <g>\n                <rect\n                    style={{ visibility: \"hidden\" }}\n                    ref={posRef}\n                    x={0} y={0} width={0} height={0}\n                />\n                <Handle scale={scale} x={x} y={y} withCross={this.props.withCross}\n                    onMouseUp={this.stopDrag}\n                    onMouseMove={this.move}\n                    onMouseDown={this.startDrag}\n                />\n            </g>\n        );\n    }\n\n    public renderDragging() {\n        const { x, y } = this.state.drag;\n        return this.renderCommon(x, y);\n    }\n\n    public render() {\n        const { x, y } = this.props;\n        // either render from state (when dragging) or from props\n        if (this.state.dragging) {\n            return this.renderDragging();\n        } else {\n            return this.renderCommon(x, y);\n        }\n    }\n}\n\nexport default DraggableHandle;","import { ActionsUnion, createAction } from \"../helpers/actionHelpers\";\nimport { AnalysisParameters, AnalysisTypes } from \"../messages\";\nimport { AnalysisState, FrameMode, JobKind } from \"./types\";\n\n\nexport enum ActionTypes {\n    CREATE = 'ANALYSIS_CREATE',\n    CREATED = 'ANALYSIS_CREATED',\n    UPDATE_PARAMETERS = 'ANALYSIS_UPDATE_PARAMETERS',\n    RUN = 'ANALYSIS_RUN',\n    RUNNING = 'ANALYSIS_RUNNING',\n    REMOVE = 'ANALYSIS_REMOVE',\n    REMOVED = 'ANALYSIS_REMOVED',\n    ERROR = 'ANALYSIS_ERROR',\n    SET_FRAMEVIEW_MODE = 'ANALYSIS_SET_FRAMEVIEW_MODE',\n}\n\nexport const Actions = {\n    create: (dataset: string, analysisType: AnalysisTypes) => createAction(ActionTypes.CREATE, { dataset, analysisType }),\n    created: (analysis: AnalysisState) => createAction(ActionTypes.CREATED, { analysis }),\n    updateParameters: (id: string, parameters: Partial<AnalysisParameters>, kind: JobKind) => createAction(ActionTypes.UPDATE_PARAMETERS, { id, kind, parameters }),\n    setFrameViewMode: (id: string, mode: FrameMode, initialParams: Partial<AnalysisParameters>) => createAction(ActionTypes.SET_FRAMEVIEW_MODE, { id, mode, initialParams }),\n    run: (id: string, kind: JobKind) => createAction(ActionTypes.RUN, { id, kind }),\n    running: (id: string, job: string, kind: JobKind) => createAction(ActionTypes.RUNNING, { id, job, kind }),\n    remove: (id: string) => createAction(ActionTypes.REMOVE, { id }),\n    removed: (id: string) => createAction(ActionTypes.REMOVED, { id }),\n    error: (msg: string, timestamp: number, id: string) => createAction(ActionTypes.ERROR, { msg, timestamp, id }),\n}\n\nexport type Actions = ActionsUnion<typeof Actions>;\n\nexport type ActionParts = {\n    [K in keyof typeof Actions]: ReturnType<typeof Actions[K]>\n}","import * as React from \"react\";\nimport { DraggableHandle } from \"./DraggableHandle\";\n\nexport interface HandleParentProps {\n    width: number,\n    height: number,\n    onKeyboardEvent?: React.KeyboardEventHandler<SVGElement>,\n}\n\nexport class HandleParent extends React.Component<HandleParentProps> {\n    public currentHandle: DraggableHandle | undefined;\n\n    public handleDragStart = (h: DraggableHandle): void => {\n        this.currentHandle = h;\n    }\n\n    public handleDrop = (): void => {\n        this.currentHandle = undefined;\n    }\n\n    public handleMouseMove = (e: React.MouseEvent<SVGElement>): void => {\n        if (this.currentHandle) {\n            return this.currentHandle.externalMouseMove(e);\n        }\n    }\n\n    public handleMouseLeave = (e: React.MouseEvent<SVGElement>): void => {\n        if (this.currentHandle) {\n            this.currentHandle.externalLeave(e);\n        }\n    }\n\n    public handleMouseUp = (e: React.MouseEvent<SVGElement>): void => {\n        if (this.currentHandle) {\n            this.currentHandle.externalMouseUp(e);\n        }\n    }\n\n    public render() {\n        const { width, height } = this.props;\n        const styles = {\n            outline: \"1px dashed black\"\n        }\n        return (\n            <g\n                onMouseMove={this.handleMouseMove}\n                onMouseLeave={this.handleMouseLeave}\n                onMouseUp={this.handleMouseUp}\n                onKeyDown={this.props.onKeyboardEvent}\n                style={styles}\n                tabIndex={0}\n            >\n                <rect style={{ fill: \"transparent\" }}\n                    x={0} y={0} width={width} height={height}\n                />\n                {this.renderChildren()}\n            </g>\n        );\n    }\n\n    public renderChildren() {\n        const { children } = this.props;\n        return React.Children.map(children, child => {\n            if (!React.isValidElement(child)) {\n                return child;\n            }\n            const newProps = {\n                parentOnDragStart: this.handleDragStart,\n                parentOnDrop: this.handleDrop,\n            };\n            return React.cloneElement(child, newProps);\n        })\n    }\n}\n\nexport default HandleParent;","export type ModifyCoords = ((x: number, y: number) => ({ x: number, y: number }));\n\n/**\n * Call this function whenever a keyboard event happens. The keyboard event is then translated\n * to a coordinate transformation, which is passed to the update callback. The update callback is\n * only called if relevant keys were pressed (example: arrow keys).\n * \n * @param e keyboard event\n * @param update a callback to handle coordinate updates\n */\nexport const handleKeyEvent = (e: React.KeyboardEvent<SVGElement>, update: (fn: ModifyCoords) => void) => {\n    let delta = 1;\n    if (e.shiftKey) {\n        delta = 10;\n    }\n    switch (e.key) {\n        case \"ArrowUp\":\n            update((x: number, y: number) => ({ x, y: y - delta }));\n            break;\n        case \"ArrowDown\":\n            update((x: number, y: number) => ({ x, y: y + delta }));\n            break;\n        case \"ArrowLeft\":\n            update((x: number, y: number) => ({ x: x - delta, y }));\n            break;\n        case \"ArrowRight\":\n            update((x: number, y: number) => ({ x: x + delta, y }));\n            break;\n        default:\n            return;\n    }\n    e.preventDefault();\n}\n","import { CSSProperties } from \"react\";\n\nexport const defaultMaskStyles = (imageWidth: number): CSSProperties => ({\n    fillOpacity: 0.3,\n    fill: \"red\",\n    strokeOpacity: 0.7,\n    stroke: \"red\",\n    strokeWidth: imageWidth / 128 / 3,\n});","import * as React from \"react\";\nimport { cbToRadius, inRectConstraint, keepOnCY } from \"./constraints\";\nimport DraggableHandle from \"./DraggableHandle\";\nimport HandleParent from \"./HandleParent\";\nimport { handleKeyEvent, ModifyCoords } from \"./kbdHandler\";\nimport { defaultMaskStyles } from \"./styles\";\n\nexport interface DiskProps {\n    imageWidth: number,\n    imageHeight: number,\n    cx: number,\n    cy: number,\n    r: number,\n    image?: React.ReactElement<any>,\n    onCenterChange?: (x: number, y: number) => void,\n    onRChange?: (r: number) => void,\n}\n\nconst Disk: React.SFC<DiskProps> = ({ imageWidth, imageHeight, cx, cy, r, image, onCenterChange, onRChange }) => {\n    const rHandle = {\n        x: cx - r,\n        y: cy,\n    }\n\n    const myKeyEvent = (e: React.KeyboardEvent<SVGElement>) => {\n        const update = (fn: ModifyCoords) => {\n            if (onCenterChange) {\n                const newCoords = fn(cx, cy);\n                onCenterChange(newCoords.x, newCoords.y);\n            };\n        }\n        handleKeyEvent(e, update)\n    }\n\n    return (\n        <svg style={{ display: \"block\", border: \"1px solid black\", width: \"100%\", height: \"auto\" }} width={imageWidth} height={imageHeight} viewBox={`0 0 ${imageWidth} ${imageHeight}`}>\n            {image}\n            <circle cx={cx} cy={cy} r={r} style={{ ...defaultMaskStyles(imageWidth) }} />\n            <HandleParent width={imageWidth} height={imageHeight} onKeyboardEvent={myKeyEvent}>\n                <DraggableHandle x={cx} y={cy}\n                    imageWidth={imageWidth}\n                    onDragMove={onCenterChange}\n                    constraint={inRectConstraint(imageWidth, imageHeight)} />\n                <DraggableHandle x={rHandle.x} y={rHandle.y}\n                    imageWidth={imageWidth}\n                    onDragMove={cbToRadius(cx, cy, onRChange)}\n                    constraint={keepOnCY(cy)} />\n            </HandleParent>\n        </svg>\n    );\n}\n\nexport default Disk;","import * as React from \"react\";\nimport { Icon } from \"semantic-ui-react\";\n\nconst BusySpinner: React.SFC = () => {\n    const styles: React.CSSProperties = {\n        margin: 0,\n        padding: 0,\n        position: \"absolute\",\n        bottom: \"10px\",\n        right: \"10px\",\n        color: \"white\",\n        opacity: 0.7,\n        filter: \"drop-shadow(0 0 3px #000)\",\n    };\n    return (\n        <Icon name=\"cog\" loading={true} style={styles} />\n    )\n}\n\nexport default BusySpinner;","import * as React from \"react\";\nimport BusySpinner from \"./BusySpinner\";\n\ninterface BusyWrapperProps {\n    busy: boolean,\n}\n\nconst BusyWrapper: React.SFC<BusyWrapperProps> = ({ children, busy }) => {\n    const styles: React.CSSProperties = {\n        position: \"relative\",\n    };\n    return (\n        <div style={styles}>\n            {children}\n            {busy && <BusySpinner />}\n        </div>\n    )\n}\n\nexport default BusyWrapper;","import * as React from \"react\";\nimport { JobState } from \"../types\";\n\ninterface ResultImageProps {\n    job: JobState,\n    idx: number,\n    width: number,\n    height: number,\n}\n\nconst ResultImage: React.SFC<ResultImageProps> = ({ job, idx, width, height }) => {\n    const style: React.CSSProperties = {\n        width: \"100%\",\n        height: \"auto\",\n        imageRendering: \"pixelated\"\n    };\n    const result = job.results[idx];\n    if (result === undefined) {\n        return (\n            <svg style={{ display: \"block\", border: \"1px solid black\", width: \"100%\", height: \"auto\" }} width={width} height={height} viewBox={`0 0 ${width} ${height}`} key={-1} />\n        )\n    }\n    return (\n        <image style={style} xlinkHref={result.imageURL} width={width} height={height} />\n    );\n}\n\nexport default ResultImage;","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport * as analysisActions from '../../analysis/actions';\nimport { AnalysisState } from \"../../analysis/types\";\nimport { AnalysisTypes, DatasetState } from \"../../messages\";\nimport BusyWrapper from \"../../widgets/BusyWrapper\";\nimport { inRectConstraint } from \"../../widgets/constraints\";\nimport DraggableHandle from \"../../widgets/DraggableHandle\";\nimport HandleParent from \"../../widgets/HandleParent\";\nimport { handleKeyEvent, ModifyCoords } from \"../../widgets/kbdHandler\";\nimport { JobState } from \"../types\";\nimport ResultImage from \"./ResultImage\";\n\ninterface ResultProps {\n    width: number,\n    height: number,\n    job: JobState,\n    dataset: DatasetState,\n    analysis: AnalysisState,\n    idx: number,\n}\n\n\nconst mapDispatchToProps = {\n    updateParameters: analysisActions.Actions.updateParameters,\n};\n\ntype MergedProps = ResultProps & DispatchProps<typeof mapDispatchToProps>;\n\nclass Result extends React.Component<MergedProps> {\n    public onCenterChange = (x: number, y: number) => {\n        const { analysis } = this.props;\n        if (analysis.frameDetails.type !== AnalysisTypes.PICK_FRAME) {\n            return;\n        }\n        const oldParams = analysis.frameDetails.parameters;\n        const newX = Math.round(x);\n        const newY = Math.round(y);\n        if (oldParams.x === newX && oldParams.y === newY) {\n            return;\n        }\n        this.props.updateParameters(this.props.analysis.id, {\n            x: newX,\n            y: newY,\n        }, \"FRAME\");\n    }\n\n    public renderPickHandles() {\n        const { analysis, width, height } = this.props;\n        if (analysis.frameDetails.type !== AnalysisTypes.PICK_FRAME) {\n            return null;\n        }\n        const { x, y } = analysis.frameDetails.parameters;\n\n        const myKeyEvent = (e: React.KeyboardEvent<SVGElement>) => {\n            const update = (fn: ModifyCoords) => {\n                const newCoords = fn(x, y);\n                this.onCenterChange(newCoords.x, newCoords.y);\n            }\n            handleKeyEvent(e, update);\n        }\n\n        return (\n            <HandleParent width={width} height={height} onKeyboardEvent={myKeyEvent}>\n                <DraggableHandle x={x} y={y} withCross={true}\n                    imageWidth={width}\n                    onDragMove={this.onCenterChange}\n                    constraint={inRectConstraint(width, height)} />\n            </HandleParent>\n        );\n    }\n\n    public render() {\n        const { job, idx, width, height } = this.props;\n        const busy = job.running !== \"DONE\";\n\n        return (\n            <BusyWrapper busy={busy}>\n                <svg style={{ display: \"block\", border: \"1px solid black\", width: \"100%\", height: \"auto\" }} width={width} height={height} viewBox={`0 0 ${width} ${height}`}>\n                    <ResultImage job={job} idx={idx} width={width} height={height} />\n                    {this.renderPickHandles()}\n                </svg>\n            </BusyWrapper>\n        );\n    }\n};\n\nexport default connect(null, mapDispatchToProps)(Result);","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Dropdown, DropdownProps } from \"semantic-ui-react\";\nimport { AnalysisTypes } from \"../../messages\";\nimport { RootReducer } from \"../../store\";\nimport { JobState } from \"../types\";\nimport Result from \"./Result\";\n\ninterface ResultListProps {\n    width: number,\n    height: number,\n}\n\ninterface ExternalResultListProps {\n    analysis: string,\n}\n\nconst mapStateToProps = (state: RootReducer, ownProps: ExternalResultListProps) => {\n    const analysis = state.analyses.byId[ownProps.analysis];\n    const jobId = analysis.jobs.RESULT;\n    const job = jobId ? state.jobs.byId[jobId] : undefined;\n    const ds = job ? state.datasets.byId[job.dataset] : undefined;\n    const pickCoords = analysis.frameDetails.type === AnalysisTypes.SUM_FRAMES ? null : <>Pick: x={analysis.frameDetails.parameters.x}, y={analysis.frameDetails.parameters.y} &emsp;</>;\n\n    return {\n        currentJob: job,\n        jobsById: state.jobs.byId,\n        analysis,\n        dataset: ds,\n        pickCoords,\n    };\n};\n\ntype MergedProps = ResultListProps & ReturnType<typeof mapStateToProps>;\n\ninterface ResultListState {\n    selectedImg: number,\n}\n\nclass ResultList extends React.Component<MergedProps, ResultListState> {\n    public state: ResultListState = { selectedImg: 0 };\n\n    public selectImage = (e: React.SyntheticEvent, data: DropdownProps) => {\n        const value = data.value as number;\n        this.setState({ selectedImg: value });\n    }\n\n    public getJob = () => {\n        const { currentJob, analysis, jobsById } = this.props;\n        if (!currentJob) {\n            return;\n        }\n        if (currentJob.results.length > 0) {\n            return currentJob;\n        }\n        const history = analysis.jobHistory.RESULT;\n        if (history.length > 0) {\n            return jobsById[history[0]];\n        }\n        return;\n    }\n\n    public render() {\n        const { analysis, dataset, width, height, pickCoords } = this.props;\n        let msg;\n        let img = (\n            <svg style={{ display: \"block\", border: \"1px solid black\", width: \"100%\", height: \"auto\" }} width={width} height={height} viewBox={`0 0 ${width} ${height}`} key={-1} />\n        );\n        const job = this.getJob();\n        if (!job || !dataset) {\n            msg = <>&nbsp;</>;\n        } else {\n            img = (\n                <Result analysis={analysis} job={job} dataset={dataset} width={width} height={height} idx={this.state.selectedImg} />\n            );\n            if (job.startTimestamp && job.endTimestamp) {\n                const dt = (job.endTimestamp - job.startTimestamp) / 1000;\n                msg = <>Analysis done in {dt.toFixed(3)} seconds</>;\n            } else {\n                msg = <>Analysis running...</>;\n            }\n        }\n        return (\n            <div>\n                {img}\n                <ResultImageSelector job={job} handleChange={this.selectImage} selectedImg={this.state.selectedImg} />\n                <p>{pickCoords} {msg}</p>\n            </div>\n        );\n    }\n}\n\ninterface ImageSelectorProps {\n    job?: JobState,\n    handleChange: (e: React.SyntheticEvent, data: DropdownProps) => void,\n    selectedImg: number,\n}\n\nconst ResultImageSelector: React.SFC<ImageSelectorProps> = ({ job, handleChange, selectedImg }) => {\n    if (!job) {\n        return null;\n    }\n    const availableImages = job.results.map((result, idx) => ({ text: result.description.title, value: idx }));\n    return (\n        <>\n            <div>\n                Image:{' '}\n                <Dropdown\n                    inline={true}\n                    options={availableImages}\n                    value={selectedImg}\n                    onChange={handleChange}\n                />\n            </div>\n        </>\n    )\n}\n\n\nexport default connect(mapStateToProps)(ResultList);\n","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Dropdown, DropdownProps } from \"semantic-ui-react\";\nimport { AnalysisTypes } from \"../../messages\";\nimport { RootReducer } from \"../../store\";\nimport * as analysisActions from '../actions';\nimport { AnalysisState, FrameMode } from \"../types\";\n\nconst frameViewModeOptions = [\n    {\n        text: \"Average\",\n        value: AnalysisTypes.SUM_FRAMES,\n    },\n    {\n        text: \"Pick\",\n        value: AnalysisTypes.PICK_FRAME,\n    }\n]\n\nconst mapDispatchToProps = {\n    setFrameViewMode: analysisActions.Actions.setFrameViewMode,\n}\n\nconst mapStateToProps = (state: RootReducer, ownProps: PMSProps) => {\n    const dataset = state.datasets.byId[ownProps.analysis.dataset]\n    const shape = dataset.params.shape;\n    const scanWidth = shape[1];\n    const scanHeight = shape[0];\n    return {\n        scanWidth,\n        scanHeight,\n    }\n}\n\ninterface PMSProps {\n    analysis: AnalysisState,\n}\n\ntype MergedProps = PMSProps & DispatchProps<typeof mapDispatchToProps> & ReturnType<typeof mapStateToProps>;\n\nclass FrameViewModeSelector extends React.Component<MergedProps> {\n    public handleChange = (e: React.SyntheticEvent, data: DropdownProps) => {\n        const value = data.value as FrameMode;\n        const { analysis, scanWidth, scanHeight } = this.props;\n        let initialParams = {};\n        if (value === AnalysisTypes.PICK_FRAME) {\n            initialParams = {\n                x: Math.round(scanWidth / 2),\n                y: Math.round(scanHeight / 2),\n            }\n        }\n        this.props.setFrameViewMode(analysis.id, value, initialParams);\n    }\n\n    public render() {\n        const { analysis } = this.props;\n\n        return (\n            <>\n                <div>\n                    Mode:{' '}\n                    <Dropdown\n                        inline={true}\n                        options={frameViewModeOptions}\n                        value={analysis.frameDetails.type}\n                        onChange={this.handleChange}\n                    />\n                </div>\n            </>\n        )\n    }\n\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(FrameViewModeSelector);","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { Button, Icon, IconProps, Segment } from \"semantic-ui-react\";\nimport { JobReducerState } from \"../../job/reducers\";\nimport { RootReducer } from \"../../store\";\nimport * as analysisActions from \"../actions\";\nimport { AnalysisState } from \"../types\";\n\ninterface ToolbarProps {\n    analysis: AnalysisState,\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch, ownProps: ToolbarProps) => {\n    return {\n        handleApply: () => dispatch(analysisActions.Actions.run(ownProps.analysis.id, \"RESULT\")),\n        handleRemove: () => dispatch(analysisActions.Actions.remove(ownProps.analysis.id)),\n    }\n}\n\ntype MergedProps = ToolbarProps & ReturnType<typeof mapDispatchToProps> & ReturnType<typeof mapStateToProps>;\n\nconst Toolbar: React.SFC<MergedProps> = ({ status, analysis, handleApply, handleRemove }) => {\n    const running = status === \"busy\";\n    const applyIconProps: IconProps = running ? { name: 'cog', loading: true } : { name: 'check' }\n    return (\n        <Segment attached=\"bottom\">\n            <Button.Group>\n                <Button primary={true} onClick={handleApply} icon={true}>\n                    <Icon {...applyIconProps} />\n                    Apply\n                </Button>\n                <Button onClick={handleRemove} icon={true}>\n                    <Icon name='remove' />\n                    Remove\n                </Button>\n            </Button.Group>\n        </Segment>\n    );\n}\n\nconst getAnalysisStatus = (analysis: AnalysisState, jobs: JobReducerState) => {\n    const jobId = analysis.jobs.RESULT;\n    if (jobId === undefined) {\n        return \"idle\";\n    }\n    const isRunning = jobs.byId[jobId].running !== \"DONE\";\n    return isRunning ? \"busy\" : \"idle\";\n}\n\nconst mapStateToProps = (state: RootReducer, ownProps: ToolbarProps) => {\n    return {\n        status: getAnalysisStatus(ownProps.analysis, state.jobs),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Toolbar);","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Grid, Header, Icon, Segment } from \"semantic-ui-react\";\nimport ResultList from \"../../job/components/ResultList\";\nimport { JobReducerState } from \"../../job/reducers\";\nimport { DatasetState } from \"../../messages\";\nimport { RootReducer } from \"../../store\";\nimport BusyWrapper from \"../../widgets/BusyWrapper\";\nimport { AnalysisState } from \"../types\";\nimport FrameViewModeSelector from \"./FrameViewModeSelector\";\nimport Toolbar from \"./Toolbar\";\n\ninterface AnalysisItemProps {\n    analysis: AnalysisState,\n    dataset: DatasetState,\n    title: string,\n    subtitle: React.ReactNode,\n}\n\ntype MergedProps = AnalysisItemProps & ReturnType<typeof mapStateToProps>;\n\nconst AnalysisItem: React.SFC<MergedProps> = ({ frameJob, analysis, dataset, title, subtitle, children }) => {\n    const { shape } = dataset.params;\n    const resultWidth = shape[1];\n    const resultHeight = shape[0];\n\n    const frameViewBusy = frameJob !== undefined ? frameJob.running !== \"DONE\" : false;\n\n    return (\n        <>\n            <Header as='h3' attached=\"top\">\n                <Icon name=\"cog\" />\n                <Header.Content>{title}</Header.Content>\n            </Header>\n            <Segment attached={true}>\n                <Grid columns={2}>\n                    <Grid.Row>\n                        <Grid.Column>\n                            <BusyWrapper busy={frameViewBusy}>\n                                {children}\n                            </BusyWrapper>\n                            <FrameViewModeSelector analysis={analysis} />\n                            <p>{subtitle}</p>\n                        </Grid.Column>\n                        <Grid.Column>\n                            <ResultList analysis={analysis.id} width={resultWidth} height={resultHeight} />\n                        </Grid.Column>\n                    </Grid.Row>\n                </Grid>\n            </Segment>\n            <Toolbar analysis={analysis} />\n        </>\n    )\n}\n\nconst getFrameJob = (analysis: AnalysisState, jobs: JobReducerState) => {\n    const frameJobId = analysis.jobs.FRAME;\n    if (frameJobId === undefined) {\n        return;\n    }\n    return jobs.byId[frameJobId];\n}\n\nconst mapStateToProps = (state: RootReducer, ownProps: AnalysisItemProps) => {\n    return {\n        frameJob: getFrameJob(ownProps.analysis, state.jobs)\n    }\n}\n\nexport default connect(mapStateToProps)(AnalysisItem);","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport ResultImage from \"../../job/components/ResultImage\";\nimport { JobReducerState } from \"../../job/reducers\";\nimport { DatasetState } from \"../../messages\";\nimport { RootReducer } from \"../../store\";\nimport { AnalysisState } from \"../types\";\n\nexport interface FrameViewProps {\n    analysis: AnalysisState,\n    dataset: DatasetState,\n}\n\ntype MergedProps = FrameViewProps & ReturnType<typeof mapStateToProps>;\n\nconst FrameView: React.SFC<MergedProps> = ({ analysis, dataset, job }) => {\n    const { shape } = dataset.params;\n\n    const imageWidth = shape[3];\n    const imageHeight = shape[2];\n\n    if (job === undefined) {\n        return null;\n    }\n\n    return (\n        <ResultImage job={job} idx={0} width={imageWidth} height={imageHeight} />\n    );\n}\n\nconst getJob = (analysis: AnalysisState, jobs: JobReducerState) => {\n    const jobId = analysis.jobs.FRAME;\n    if (jobId === undefined) {\n        return;\n    }\n    const job = jobs.byId[jobId];\n    if (job.results.length > 0) {\n        return job;\n    }\n    const history = analysis.jobHistory.FRAME;\n    for (const tmpJobId of history) {\n        const tmpJob = jobs.byId[tmpJobId];\n        if (tmpJob.results.length > 0) {\n            return tmpJob;\n        }\n    }\n    return;\n}\n\nconst mapStateToProps = (state: RootReducer, ownProps: FrameViewProps) => {\n    return {\n        job: getJob(ownProps.analysis, state.jobs),\n    }\n}\n\nexport default connect(mapStateToProps)(FrameView);","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { defaultDebounce } from \"../../helpers\";\nimport { CenterOfMassParams, DatasetState } from \"../../messages\";\nimport Disk from \"../../widgets/Disk\";\nimport * as analysisActions from \"../actions\";\nimport { AnalysisState } from \"../types\";\nimport AnalysisItem from \"./AnalysisItem\";\nimport FrameView from \"./FrameView\";\nimport { Dispatch } from \"redux\";\n\ninterface AnalysisProps {\n    parameters: CenterOfMassParams,\n    analysis: AnalysisState,\n    dataset: DatasetState,\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch, ownProps: AnalysisProps) => {\n    return {\n        handleCenterChange: defaultDebounce((cx: number, cy: number) => {\n            dispatch(analysisActions.Actions.updateParameters(ownProps.analysis.id, { cx, cy }, \"RESULT\"));\n        }),\n        handleRChange: defaultDebounce((r: number) => {\n            dispatch(analysisActions.Actions.updateParameters(ownProps.analysis.id, { r }, \"RESULT\"));\n        }),\n    }\n}\n\n\ntype MergedProps = AnalysisProps & ReturnType<typeof mapDispatchToProps>\n\nconst CenterOfMassAnalysis: React.SFC<MergedProps> = ({ parameters, analysis, dataset, handleRChange, handleCenterChange }) => {\n    const { shape } = dataset.params;\n\n    const imageWidth = shape[3];\n    const imageHeight = shape[2];\n\n    const image = <FrameView dataset={dataset} analysis={analysis} />\n\n    return (\n        <AnalysisItem analysis={analysis} dataset={dataset} title=\"COM analysis\" subtitle={\n            <>Disk: center=(x={parameters.cx.toFixed(2)}, y={parameters.cy.toFixed(2)}), r={parameters.r.toFixed(2)}</>\n        }>\n            <Disk cx={parameters.cx} cy={parameters.cy} r={parameters.r}\n                image={image}\n                imageWidth={imageWidth} imageHeight={imageHeight} onCenterChange={handleCenterChange} onRChange={handleRChange} />\n        </AnalysisItem>\n    );\n}\n\nexport default connect(null, mapDispatchToProps)(CenterOfMassAnalysis);","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { defaultDebounce } from \"../../helpers\";\nimport { DatasetState, MaskDefDisk } from \"../../messages\";\nimport Disk from \"../../widgets/Disk\";\nimport * as analysisActions from \"../actions\";\nimport { AnalysisState } from \"../types\";\nimport AnalysisItem from \"./AnalysisItem\";\nimport FrameView from \"./FrameView\";\nimport { Dispatch } from \"redux\";\n\ninterface AnalysisProps {\n    parameters: MaskDefDisk,\n    analysis: AnalysisState,\n    dataset: DatasetState,\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch, ownProps: AnalysisProps) => {\n    return {\n        handleCenterChange: defaultDebounce((cx: number, cy: number) => {\n            dispatch(analysisActions.Actions.updateParameters(ownProps.analysis.id, { cx, cy }, \"RESULT\"));\n        }),\n        handleRChange: defaultDebounce((r: number) => {\n            dispatch(analysisActions.Actions.updateParameters(ownProps.analysis.id, { r }, \"RESULT\"));\n        }),\n    }\n}\n\n\ntype MergedProps = AnalysisProps & ReturnType<typeof mapDispatchToProps>\n\nconst DiskMaskAnalysis: React.SFC<MergedProps> = ({ parameters, analysis, dataset, handleRChange, handleCenterChange }) => {\n    const { shape } = dataset.params;\n    const imageWidth = shape[3];\n    const imageHeight = shape[2];\n\n    const image = <FrameView dataset={dataset} analysis={analysis} />\n\n    return (\n        <AnalysisItem analysis={analysis} dataset={dataset} title=\"Disk analysis\" subtitle={\n            <>Disk: center=(x={parameters.cx.toFixed(2)}, y={parameters.cy.toFixed(2)}), r={parameters.r.toFixed(2)}</>\n        }>\n            <Disk cx={parameters.cx} cy={parameters.cy} r={parameters.r}\n                image={image}\n                imageWidth={imageWidth} imageHeight={imageHeight} onCenterChange={handleCenterChange} onRChange={handleRChange} />\n        </AnalysisItem>\n    );\n}\n\nexport default connect(null, mapDispatchToProps)(DiskMaskAnalysis);","import * as React from \"react\";\nimport { inRectConstraint } from \"./constraints\";\nimport DraggableHandle from \"./DraggableHandle\";\nimport HandleParent from \"./HandleParent\";\nimport { handleKeyEvent, ModifyCoords } from \"./kbdHandler\";\n\nexport interface PointProps {\n    imageWidth: number,\n    imageHeight: number,\n    cx: number,\n    cy: number,\n    image?: React.ReactElement<any>,\n    onCenterChange?: (x: number, y: number) => void,\n    onRChange?: (r: number) => void,\n}\n\nconst Point: React.SFC<PointProps> = ({ imageWidth, imageHeight, cx, cy, image, onCenterChange }) => {\n    const myKeyEvent = (e: React.KeyboardEvent<SVGElement>) => {\n        const update = (fn: ModifyCoords) => {\n            if (onCenterChange) {\n                const newCoords = fn(cx, cy);\n                onCenterChange(newCoords.x, newCoords.y);\n            };\n        }\n        handleKeyEvent(e, update)\n    }\n\n    return (\n        <svg style={{ display: \"block\", border: \"1px solid black\", width: \"100%\", height: \"auto\" }} width={imageWidth} height={imageHeight} viewBox={`0 0 ${imageWidth} ${imageHeight}`}>\n            {image}\n            <HandleParent width={imageWidth} height={imageHeight} onKeyboardEvent={myKeyEvent} >\n                <DraggableHandle x={cx} y={cy} withCross={true}\n                    onDragMove={onCenterChange}\n                    imageWidth={imageWidth}\n                    constraint={inRectConstraint(imageWidth, imageHeight)} />\n            </HandleParent>\n        </svg>\n    );\n}\n\nexport default Point;","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { defaultDebounce } from \"../../helpers\";\nimport { DatasetState, PointDef } from \"../../messages\";\nimport Point from \"../../widgets/Point\";\nimport * as analysisActions from \"../actions\";\nimport { AnalysisState } from \"../types\";\nimport AnalysisItem from \"./AnalysisItem\";\nimport FrameView from \"./FrameView\";\nimport { Dispatch } from \"redux\";\n\ninterface AnalysisProps {\n    parameters: PointDef,\n    analysis: AnalysisState,\n    dataset: DatasetState,\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch, ownProps: AnalysisProps) => {\n    return {\n        handleCenterChange: defaultDebounce((cx: number, cy: number) => {\n            dispatch(analysisActions.Actions.updateParameters(ownProps.analysis.id, { cx, cy }, \"RESULT\"));\n        }),\n    }\n}\n\n\ntype MergedProps = AnalysisProps & ReturnType<typeof mapDispatchToProps>\n\nconst PointSelectionAnalysis: React.SFC<MergedProps> = ({ parameters, analysis, dataset, handleCenterChange }) => {\n    const { shape } = dataset.params;\n    const imageWidth = shape[3];\n    const imageHeight = shape[2];\n\n    const image = <FrameView dataset={dataset} analysis={analysis} />\n\n    return (\n        <AnalysisItem analysis={analysis} dataset={dataset} title=\"Point analysis\" subtitle={\n            <>Point: center=(x={parameters.cx.toFixed(2)}, y={parameters.cy.toFixed(2)})</>\n        }>\n            <Point cx={parameters.cx} cy={parameters.cy}\n                image={image}\n                imageWidth={imageWidth} imageHeight={imageHeight} onCenterChange={handleCenterChange} />\n        </AnalysisItem>\n    );\n}\n\nexport default connect(null, mapDispatchToProps)(PointSelectionAnalysis);","// from https://stackoverflow.com/a/45100420/540644\nexport function getPathArc(center: { x: number, y: number }, start: number, end: number, radius: number) {\n    if (end === start) { end += 360; }\n    let degree = end - start;\n    degree = degree < 0 ? (degree + 360) : degree;\n    const points = [];\n    points.push(getLocationFromAngle(start, radius, center));\n    points.push(getLocationFromAngle(start + degree / 3, radius, center));\n    points.push(getLocationFromAngle(start + degree * 2 / 3, radius, center));\n    points.push(getLocationFromAngle(end, radius, center));\n    return getCirclePath(points, radius, (degree < 180) ? 0 : 1);\n}\n\nfunction getCirclePath(points: Array<{ x: number, y: number }>, radius: number, clockWise: 0 | 1) {\n    return ['M', points[0].x, points[0].y,\n        'A', radius, radius, 0, 0, clockWise, points[1].x, points[1].y,\n        'A', radius, radius, 0, 0, clockWise, points[2].x, points[2].y,\n        'A', radius, radius, 0, 0, clockWise, points[3].x, points[3].y\n    ].join(' ');\n}\n\nfunction getLocationFromAngle(degree: number, radius: number, center: { x: number, y: number }) {\n    const radian = (degree * Math.PI) / 180;\n    return {\n        x: Math.cos(radian) * radius + center.x,\n        y: Math.sin(radian) * radius + center.y\n    }\n}\n","import * as React from \"react\";\nimport { getPathArc } from \"../helpers/svg\";\nimport { cbToRadius, inRectConstraint, riConstraint, roConstraints } from \"./constraints\";\nimport DraggableHandle from \"./DraggableHandle\";\nimport HandleParent from \"./HandleParent\";\nimport { handleKeyEvent, ModifyCoords } from \"./kbdHandler\";\nimport { defaultMaskStyles } from \"./styles\";\n\nexport interface RingProps {\n    imageWidth: number,\n    imageHeight: number,\n    cx: number,\n    cy: number,\n    ri: number,\n    ro: number,\n    image?: React.ReactElement<any>,\n    onCenterChange?: (x: number, y: number) => void,\n    onRIChange?: (r: number) => void,\n    onROChange?: (r: number) => void,\n}\n\nconst Ring: React.SFC<RingProps> = ({ imageWidth, imageHeight, cx, cy, ri, ro, image, onCenterChange, onRIChange, onROChange }) => {\n    const riHandle = {\n        x: cx - ri,\n        y: cy,\n    }\n    const roHandle = {\n        x: cx - ro,\n        y: cy,\n    }\n\n    // see also: https://stackoverflow.com/a/37883328/540644\n    const pathSpecs = [\n        getPathArc({ x: cx, y: cy }, 90, 90, ro),\n        getPathArc({ x: cx, y: cy }, 90, 90, ri)\n    ]\n    const pathSpec = pathSpecs.join(' ');\n\n\n    const myKeyEvent = (e: React.KeyboardEvent<SVGElement>) => {\n        const update = (fn: ModifyCoords) => {\n            if (onCenterChange) {\n                const newCoords = fn(cx, cy);\n                onCenterChange(newCoords.x, newCoords.y);\n            };\n        }\n        handleKeyEvent(e, update)\n    }\n\n    return (\n        <svg style={{ display: \"block\", border: \"1px solid black\", width: \"100%\", height: \"auto\" }} width={imageWidth} height={imageHeight} viewBox={`0 0 ${imageWidth} ${imageHeight}`}>\n            {image}\n            <path d={pathSpec} fillRule=\"evenodd\" style={{ ...defaultMaskStyles(imageWidth) }} />\n            <HandleParent width={imageWidth} height={imageHeight} onKeyboardEvent={myKeyEvent}>\n                <DraggableHandle x={cx} y={cy}\n                    imageWidth={imageWidth}\n                    onDragMove={onCenterChange}\n                    constraint={inRectConstraint(imageWidth, imageHeight)} />\n                <DraggableHandle x={roHandle.x} y={roHandle.y}\n                    imageWidth={imageWidth}\n                    onDragMove={cbToRadius(cx, cy, onROChange)}\n                    constraint={roConstraints(riHandle.x, cy)} />\n                <DraggableHandle x={riHandle.x} y={riHandle.y}\n                    imageWidth={imageWidth}\n                    onDragMove={cbToRadius(cx, cy, onRIChange)}\n                    constraint={riConstraint(roHandle.x, cy)} />\n            </HandleParent>\n        </svg>\n    );\n}\n\nexport default Ring;","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { defaultDebounce } from \"../../helpers\";\nimport { DatasetState, MaskDefRing } from \"../../messages\";\nimport Ring from \"../../widgets/Ring\";\nimport * as analysisActions from \"../actions\";\nimport { AnalysisState } from \"../types\";\nimport AnalysisItem from \"./AnalysisItem\";\nimport FrameView from \"./FrameView\";\nimport { Dispatch } from \"redux\";\n\ninterface AnalysisProps {\n    parameters: MaskDefRing,\n    analysis: AnalysisState,\n    dataset: DatasetState,\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch, ownProps: AnalysisProps) => {\n    return {\n        handleCenterChange: defaultDebounce((cx: number, cy: number) => {\n            dispatch(analysisActions.Actions.updateParameters(ownProps.analysis.id, { cx, cy }, \"RESULT\"));\n        }),\n        handleRIChange: defaultDebounce((ri: number) => {\n            dispatch(analysisActions.Actions.updateParameters(ownProps.analysis.id, { ri }, \"RESULT\"));\n        }),\n        handleROChange: defaultDebounce((ro: number) => {\n            dispatch(analysisActions.Actions.updateParameters(ownProps.analysis.id, { ro }, \"RESULT\"));\n        }),\n    }\n}\n\ntype MergedProps = AnalysisProps & ReturnType<typeof mapDispatchToProps>\n\nconst RingMaskAnalysis: React.SFC<MergedProps> = ({ analysis, dataset, parameters, handleCenterChange, handleRIChange, handleROChange }) => {\n    const { shape } = dataset.params;\n    const imageWidth = shape[3];\n    const imageHeight = shape[2];\n\n    const image = <FrameView dataset={dataset} analysis={analysis} />\n\n    return (\n        <AnalysisItem analysis={analysis} dataset={dataset} title=\"Ring analysis\" subtitle={\n            <>Ring: center=(x={parameters.cx.toFixed(2)}, y={parameters.cy.toFixed(2)}), ri={parameters.ri.toFixed(2)}, ro={parameters.ro.toFixed(2)}</>\n        }>\n            <Ring cx={parameters.cx} cy={parameters.cy} ri={parameters.ri} ro={parameters.ro}\n                imageWidth={imageWidth} imageHeight={imageHeight} image={image}\n                onCenterChange={handleCenterChange} onRIChange={handleRIChange} onROChange={handleROChange} />\n        </AnalysisItem>\n    );\n}\n\nexport default connect(null, mapDispatchToProps)(RingMaskAnalysis);","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { assertNotReached } from '../../helpers';\nimport { AnalysisTypes } from \"../../messages\";\nimport { RootReducer } from \"../../store\";\nimport { AnalysisState } from \"../types\";\nimport CenterOfMassAnalysis from \"./CenterOfMassAnalysis\";\nimport DiskMaskAnalysis from \"./DiskMaskAnalysis\";\nimport PointSelectionAnalysis from \"./PointSelectionAnalysis\";\nimport RingMaskAnalysis from \"./RingMaskAnalysis\";\n\ninterface AnalysisProps {\n    analysis: AnalysisState,\n}\n\nconst mapStateToProps = (state: RootReducer, ownProps: AnalysisProps) => {\n    return {\n        dataset: state.datasets.byId[ownProps.analysis.dataset],\n    }\n}\n\ntype MergedProps = AnalysisProps & ReturnType<typeof mapStateToProps>;\n\nconst AnalysisComponent: React.SFC<MergedProps> = ({ analysis, dataset }) => {\n    switch (analysis.resultDetails.type) {\n        case AnalysisTypes.APPLY_DISK_MASK: {\n            return <DiskMaskAnalysis dataset={dataset} analysis={analysis} parameters={analysis.resultDetails.parameters} />;\n        };\n        case AnalysisTypes.APPLY_RING_MASK: {\n            return <RingMaskAnalysis dataset={dataset} analysis={analysis} parameters={analysis.resultDetails.parameters} />;\n        }\n        case AnalysisTypes.CENTER_OF_MASS: {\n            return <CenterOfMassAnalysis dataset={dataset} analysis={analysis} parameters={analysis.resultDetails.parameters} />;\n        }\n        case AnalysisTypes.APPLY_POINT_SELECTOR: {\n            return <PointSelectionAnalysis dataset={dataset} analysis={analysis} parameters={analysis.resultDetails.parameters} />\n        }\n    }\n\n    return assertNotReached(\"unknown analysis type\");\n}\n\nexport default connect(mapStateToProps)(AnalysisComponent);","import * as React from \"react\";\nimport { AnalysisReducerState } from \"../reducers\";\nimport Analysis from \"./Analysis\";\n\ninterface AnalysisProps {\n    analyses: AnalysisReducerState,\n}\n\nconst AnalysisList: React.SFC<AnalysisProps> = ({ analyses }) => {\n    return (<>{\n        analyses.ids.map(analysisId => <Analysis key={analysisId} analysis={analyses.byId[analysisId]} />)\n    }</>);\n}\n\nexport default AnalysisList;","export interface ById<R> {\n    ids: string[],\n    byId: { [s: string]: R },\n};\n\n/*\nTODO: make ById DeepReadonly\nimport { DeepReadonly } from 'utility-types'\ntype Foo<P> = DeepReadonly<{\n    byId: { [s: string]: P },\n}>;\n\nexport function readOnlyWithExplicitType(foo: Foo<string>, key: string) {\n    return foo.byId[key];\n}\n\nexport function readOnlyWithGeneric<P>(foo: Foo<P>, key: string) {\n    // error: Element implicitly has an 'any' type because type 'DeepReadonlyObject<{ [s: string]: P; }>' has no index signature.\n    return foo.byId[key];\n}\n*/\n\nexport function updateById<R, S extends ById<R>>(state: S, id: string, partialRecord: Partial<R>): S {\n    const newObj = Object.assign({}, state.byId[id], partialRecord);\n    const newById = Object.assign({}, state.byId, { [id]: newObj });\n    return Object.assign({}, state, { byId: newById });\n}\n\nexport function insertById<R extends object, S extends ById<R>>(state: S, id: string, record: R): S {\n    const newById = Object.assign({}, state.byId, { [id]: record });\n    const newIds = [...state.ids, id];\n    return Object.assign({}, state, { byId: newById, ids: newIds });\n}\n\nexport function constructById<R extends object, S extends ById<R>>(items: R[], key: (k: R) => string) {\n    return items.reduce((acc, item) => Object.assign(acc, {\n        [key(item)]: item,\n    }), {});\n}\n\nexport type Predicate<R> = (item: R) => boolean;\n\nexport function filterWithPred<R, S extends ById<R>>(state: S, pred: Predicate<R>): S {\n    const ids = state.ids.filter(id => pred(state.byId[id]));\n    const byId = ids.reduce((acc, id) => Object.assign(acc, {\n        [id]: state.byId[id],\n    }), {});\n    return Object.assign({}, state, {\n        byId,\n        ids,\n    });\n}","import { AnalysisDetails, AnalysisTypes, PickFrameDetails, SumFramesDetails } from \"../messages\";\n\nexport type FrameMode = AnalysisTypes.PICK_FRAME | AnalysisTypes.SUM_FRAMES;\n\nexport type JobKind = \"FRAME\" | \"RESULT\";\n\nexport type AnalysisStatus = \"busy\" | \"idle\";\n\nexport type JobList = Partial<{ [K in JobKind]: string }>;\n\nexport type JobHistory = {\n    [K in JobKind]: string[]\n};\n\nexport interface Analysis {\n    id: string,\n    dataset: string,\n    jobs: JobList,\n    jobHistory: JobHistory,\n    frameDetails: PickFrameDetails | SumFramesDetails,\n    resultDetails: AnalysisDetails,\n}\n\nexport type AnalysisState = Analysis & {\n};\n\ninterface AnalysisMetadataItem {\n    long: string,\n    short: string,\n    showInUI: boolean,\n}\n\nexport const AnalysisMetadata: { [s: string]: AnalysisMetadataItem } = {\n    [AnalysisTypes.APPLY_RING_MASK]: {\n        long: \"Apply a ring mask with center cx, cy; inner radius ri, outer radius ro\",\n        short: \"Ring\",\n        showInUI: true,\n    },\n    [AnalysisTypes.APPLY_DISK_MASK]: {\n        long: \"Apply a disk mask with center cx, cy; radius r\",\n        short: \"Disk\",\n        showInUI: true,\n    },\n    [AnalysisTypes.CENTER_OF_MASS]: {\n        long: \"Compute the center of mass of all diffraction images\",\n        short: \"Center of mass\",\n        showInUI: true,\n    },\n    [AnalysisTypes.APPLY_POINT_SELECTOR]: {\n        long: \"Create an image from a single pixel selected in the detector\",\n        short: \"Point selection\",\n        showInUI: true,\n    },\n    [AnalysisTypes.SUM_FRAMES]: {\n        long: \"Create a sum of all detector frames\",\n        short: \"Sum all frames\",\n        showInUI: false,\n    },\n    [AnalysisTypes.PICK_FRAME]: {\n        long: \"Pick a single frame\",\n        short: \"Pick frame\",\n        showInUI: false,\n    },\n}","import { ActionsUnion, createAction } from '../helpers/actionHelpers';\nimport { DatasetCreateParams, DatasetFormParams, DatasetState } from '../messages';\n\nexport enum ActionTypes {\n    OPEN = 'DATASET_OPEN',\n    CANCEL_OPEN = 'DATASET_CANCEL_OPEN',\n    CREATE = 'DATASET_CREATE',\n    CREATED = 'DATASET_CREATED',\n    ERROR = 'DATASET_ERROR',\n    DELETE = 'DATASET_DELETE',\n    DELETED = 'DATASET_DELETED',\n    DETECT = 'DATASET_DETECT',\n    DETECTED = 'DATASET_DETECTED',\n    DETECT_FAILED = 'DATASET_DETECT_FAILED',\n}\n\nexport const Actions = {\n    open: (path: string, initialParams?: DatasetFormParams) => createAction(ActionTypes.OPEN, { path, initialParams }),\n    cancelOpen: () => createAction(ActionTypes.CANCEL_OPEN),\n    create: (dataset: DatasetCreateParams) => createAction(ActionTypes.CREATE, { dataset }),\n    created: (dataset: DatasetState) => createAction(ActionTypes.CREATED, { dataset }),\n    error: (dataset: string, msg: string, timestamp: number, id: string) => createAction(ActionTypes.ERROR, { dataset, msg, timestamp, id }),\n    delete: (dataset: string) => createAction(ActionTypes.DELETE, { dataset }),\n    deleted: (dataset: string) => createAction(ActionTypes.DELETED, { dataset }),\n    detect: (path: string) => createAction(ActionTypes.DETECT, { path }),\n    detected: (path: string, params: DatasetFormParams) => createAction(ActionTypes.DETECTED, { path, params }),\n    detectFailed: (path: string) => createAction(ActionTypes.DETECT_FAILED, { path }),\n}\n\nexport type Actions = ActionsUnion<typeof Actions>;\n","import * as React from \"react\";\nimport { Dropdown, DropdownItemProps } from \"semantic-ui-react\";\nimport { getEnumValues } from \"../../helpers\";\nimport { AnalysisTypes } from \"../../messages\";\nimport { AnalysisMetadata } from \"../types\";\n\n\nconst getMetadata = (t: any) => AnalysisMetadata[AnalysisTypes[t as any]];\nconst analysisTypeKeys = getEnumValues(AnalysisTypes);\nconst analysisTypeOptions = analysisTypeKeys.filter(t => getMetadata(t).showInUI).map(t => ({\n    text: getMetadata(t).short,\n    value: AnalysisTypes[t as any],\n}));\n\ninterface AnalysisSelectProps {\n    onClick: (analysisType: AnalysisTypes) => void,\n    label: string,\n}\n\nconst selectData = (fn: (v: AnalysisTypes) => void) => (e: React.MouseEvent, data: DropdownItemProps) => {\n    return fn(data.value as AnalysisTypes);\n}\n\nconst AnalysisSelect: React.SFC<AnalysisSelectProps> = ({ onClick, label }) => {\n    return (\n        <Dropdown text={label} icon='add' floating={true} labeled={true} button={true} className='icon'>\n            <Dropdown.Menu>\n                <Dropdown.Header content='implemented analyses' />\n                {analysisTypeOptions.map(option => <Dropdown.Item key={option.value} onClick={selectData(onClick)} {...option} />)}\n            </Dropdown.Menu>\n        </Dropdown>\n    );\n}\n\nexport default AnalysisSelect;","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport * as analysisActions from \"../../analysis/actions\";\nimport AnalysisSelect from \"../../analysis/components/AnalysisSelect\";\nimport { AnalysisTypes, DatasetState } from \"../../messages\";\n\ninterface DatasetProps {\n    dataset: DatasetState\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch, ownProps: DatasetProps) => {\n    return {\n        handleAddAnalysis: (type: AnalysisTypes) => {\n            dispatch(analysisActions.Actions.create(ownProps.dataset.id, type));\n        },\n    }\n}\ntype MergedProps = DatasetProps & ReturnType<typeof mapDispatchToProps>;\n\nconst AddAnalysis: React.SFC<MergedProps> = ({ handleAddAnalysis }) => {\n    return <AnalysisSelect onClick={handleAddAnalysis} label='Add analysis' />\n}\n\n\nexport default connect(null, mapDispatchToProps)(AddAnalysis);","import * as React from \"react\";\nimport { Table } from \"semantic-ui-react\";\nimport { DatasetState } from \"../../messages\";\n\ninterface DatasetProps {\n    dataset: DatasetState\n}\n\nconst renderParamValue = (value: any) => {\n    if (value instanceof Array) {\n        return `(${value.join(\",\")})`;\n    } else {\n        return value;\n    }\n}\n\nconst renderParams = (params: any) => {\n    return Object.keys(params).map((key: string, idx: number) => {\n        return (\n            <Table.Row key={idx}>\n                <Table.Cell>{key}</Table.Cell>\n                <Table.Cell>{renderParamValue(params[key])}</Table.Cell>\n            </Table.Row>\n        );\n    })\n}\n\n\nconst DatasetParams: React.SFC<DatasetProps> = ({ dataset }) => {\n    return (\n        <Table>\n            <Table.Header>\n                <Table.Row>\n                    <Table.HeaderCell>Parameter</Table.HeaderCell>\n                    <Table.HeaderCell>Value</Table.HeaderCell>\n                </Table.Row>\n            </Table.Header>\n            <Table.Body>\n                {renderParams(dataset.params)}\n            </Table.Body>\n        </Table>\n    );\n}\n\n\nexport default DatasetParams;","import * as React from \"react\";\nimport { Table } from \"semantic-ui-react\";\nimport { DatasetState, DiagElemMsg } from \"../../messages\";\nimport DatasetParams from \"./DatasetParams\";\n\ninterface DatasetInfoProps {\n    dataset: DatasetState,\n}\n\nconst renderValue = (elem: DiagElemMsg) => {\n    if (elem.value instanceof Array) {\n        return <DiagElems diagnostics={elem.value} />\n    } else {\n        return elem.value;\n    }\n}\n\nconst DiagElem: React.SFC<{ elem: DiagElemMsg }> = ({ elem }) => {\n    return (\n        <Table.Row>\n            <Table.Cell>{elem.name}</Table.Cell>\n            <Table.Cell>{renderValue(elem)}</Table.Cell>\n        </Table.Row>\n    )\n}\n\nconst DiagElems: React.SFC<{ diagnostics: DiagElemMsg[] }> = ({ diagnostics }) => {\n    if (diagnostics.length === 0) {\n        return null;\n    }\n    return (\n        <Table>\n            <Table.Header>\n                <Table.Row>\n                    <Table.HeaderCell>Name</Table.HeaderCell>\n                    <Table.HeaderCell>Value</Table.HeaderCell>\n                </Table.Row>\n            </Table.Header>\n            <Table.Body>\n                {diagnostics.map((elem, idx) => (\n                    <DiagElem elem={elem} key={idx} />\n                ))}\n            </Table.Body>\n        </Table>\n    );\n}\n\nconst DatasetInfo: React.SFC<DatasetInfoProps> = ({ dataset }) => {\n    return (\n        <>\n            <DatasetParams dataset={dataset} />\n            <DiagElems diagnostics={dataset.diagnostics} />\n        </>\n    );\n}\n\nexport default DatasetInfo;","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Button } from \"semantic-ui-react\";\nimport { DatasetState } from \"../../messages\";\nimport * as datasetActions from \"../actions\";\nimport { Dispatch } from \"redux\";\n\ninterface DatasetProps {\n    dataset: DatasetState,\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch, ownProps: DatasetProps) => {\n    return {\n        handleRemoveDataset: () => {\n            dispatch(datasetActions.Actions.delete(ownProps.dataset.id));\n        }\n    }\n}\n\ntype MergedProps = DatasetProps & ReturnType<typeof mapDispatchToProps>;\n\nconst DatasetToolbar: React.SFC<MergedProps> = ({ dataset, handleRemoveDataset }) => {\n    return (\n        <>\n            <Button icon=\"remove\" labelPosition=\"left\" onClick={handleRemoveDataset} content='Close Dataset' />\n        </>\n    );\n}\n\n\nexport default connect(null, mapDispatchToProps)(DatasetToolbar);","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Header, Icon, Message, Modal, Popup, Segment } from 'semantic-ui-react';\nimport AnalysisList from \"../../analysis/components/AnalysisList\";\nimport { AnalysisState } from \"../../analysis/types\";\nimport { filterWithPred } from \"../../helpers/reducerHelpers\";\nimport { DatasetState, DatasetStatus } from \"../../messages\";\nimport { RootReducer } from \"../../store\";\nimport AddAnalysis from \"./AddAnalysis\";\nimport DatasetInfo from \"./DatasetInfo\";\nimport DatasetToolbar from \"./DatasetToolbar\";\n\ninterface DatasetProps {\n    dataset: DatasetState\n}\n\nconst mapStateToProps = (state: RootReducer, ownProps: DatasetProps) => {\n    const p = (analysis: AnalysisState) => analysis.dataset === ownProps.dataset.id;\n    return {\n        analyses: filterWithPred(state.analyses, p),\n    }\n}\n\ntype MergedProps = DatasetProps & ReturnType<typeof mapStateToProps>;\n\nconst DatasetComponent: React.SFC<MergedProps> = ({ dataset, analyses }) => {\n    const msg = {\n        [DatasetStatus.OPENING]: `Opening dataset ${dataset.params.name}`,\n        [DatasetStatus.DELETING]: `Closing dataset ${dataset.params.name}`,\n    }\n    if (dataset.status === DatasetStatus.OPENING || dataset.status === DatasetStatus.DELETING) {\n        return (\n            <>\n                <Header as=\"h2\" dividing={true}>{dataset.params.name}</Header>\n                <Message icon={true}>\n                    <Icon name='cog' loading={true} />\n                    <Message.Content>\n                        <Message.Header>{msg[dataset.status]}</Message.Header>\n                    </Message.Content>\n                </Message>\n            </>\n        );\n    }\n\n    return (\n        <Segment.Group style={{ marginTop: \"3em\", marginBottom: \"3em\" }}>\n            <Segment.Group horizontal={true}>\n                <Segment>\n                    <Header as=\"h2\">\n                        <Icon name=\"database\" />\n                        <Modal trigger={\n                            <Header.Content>\n                                {dataset.params.name}\n                                {' '}\n                                <Icon name=\"info circle\" size=\"small\" link={true} />\n                            </Header.Content>\n                        }>\n                            <Popup.Header>{dataset.params.type} Dataset {dataset.params.name}</Popup.Header>\n                            <Popup.Content>\n                                <DatasetInfo dataset={dataset} />\n                            </Popup.Content>\n                        </Modal>\n                    </Header>\n                </Segment>\n                <Segment style={{ flexShrink: 1, flexGrow: 0 }}>\n                    <DatasetToolbar dataset={dataset} />\n                </Segment>\n            </Segment.Group>\n            {\n                analyses.ids.length > 0 ? (\n                    <>\n                        <Segment>\n                            <AnalysisList analyses={analyses} />\n                        </Segment>\n                    </>\n                ) : null\n            }\n            <Segment textAlign=\"center\">\n                <AddAnalysis dataset={dataset} />\n            </Segment>\n        </Segment.Group>\n    );\n}\n\nconst DatasetContainer = connect(mapStateToProps)(DatasetComponent);\n\nexport default DatasetContainer;","\nexport function parseNumList(nums: string) {\n    return nums.split(\",\").map(part => +part);\n}\n\nexport function getInitial<T extends object, K extends keyof T>(key: K, otherwise: string, values?: T): string {\n    if (!values) {\n        return otherwise;\n    }\n    return (values[key] ? values[key] : otherwise).toString();\n}","import { FormikProps, withFormik } from \"formik\";\nimport * as React from \"react\";\nimport { Button, Form } from \"semantic-ui-react\";\nimport { Omit } from \"../../helpers/types\";\nimport { DatasetParamsBLO, DatasetTypes } from \"../../messages\";\nimport { getInitial, parseNumList } from \"../helpers\";\nimport { OpenFormProps } from \"../types\";\n\n// some fields have different types in the form vs. in messages\ntype DatasetParamsBLOForForm = Omit<DatasetParamsBLO,\n    \"path\"\n    | \"type\"\n    | \"tileshape\"> & {\n        tileshape: string,\n    };\n\ntype FormValues = DatasetParamsBLOForForm\n\n\ntype MergedProps = FormikProps<FormValues> & OpenFormProps<DatasetParamsBLO>;\n\nconst BLOFileParamsForm: React.SFC<MergedProps> = ({\n    values,\n    touched,\n    errors,\n    dirty,\n    isSubmitting,\n    handleChange,\n    handleBlur,\n    handleSubmit,\n    handleReset,\n    onCancel,\n}) => {\n    return (\n        <Form onSubmit={handleSubmit}>\n            <Form.Field>\n                <label htmlFor=\"name\">Name:</label>\n                <input type=\"text\" name=\"name\" value={values.name}\n                    onChange={handleChange}\n                    onBlur={handleBlur} />\n                {errors.name && touched.name && errors.name}\n            </Form.Field>\n            <Form.Field>\n                <label htmlFor=\"tileshape\">Tileshape:</label>\n                <input type=\"text\" name=\"tileshape\" value={values.tileshape}\n                    onChange={handleChange} onBlur={handleBlur} />\n            </Form.Field>\n\n            <Button primary={true} type=\"submit\" disabled={isSubmitting}>Load Dataset</Button>\n            <Button type=\"button\" onClick={onCancel}>Cancel</Button>\n        </Form>\n    )\n}\n\nexport default withFormik<OpenFormProps<DatasetParamsBLO>, FormValues>({\n    mapPropsToValues: ({ initial }) => ({\n        name: getInitial(\"name\", \"\", initial),\n        tileshape: getInitial(\"tileshape\", \"1, 8, 128, 128\", initial),\n    }),\n    handleSubmit: (values, formikBag) => {\n        const { onSubmit, path } = formikBag.props;\n        onSubmit({\n            path,\n            type: DatasetTypes.BLO,\n            name: values.name,\n            tileshape: parseNumList(values.tileshape),\n        });\n    }\n})(BLOFileParamsForm);\n","import { ActionsUnion, createAction } from \"../helpers/actionHelpers\";\n\nexport enum ActionTypes {\n    DISMISS = \"ERROR_DISMISS\",\n}\n\nexport const Actions = {\n    dismiss: (id: string) => createAction(ActionTypes.DISMISS, { id }),\n}\n\nexport type Actions = ActionsUnion<typeof Actions>;","import * as React from \"react\";\nimport { Dropdown, DropdownProps } from \"semantic-ui-react\";\nimport { getEnumValues } from \"../../helpers\";\nimport { DatasetTypes } from \"../../messages\";\n\n\nconst datasetTypeKeys = getEnumValues(DatasetTypes);\nconst datasetTypeOptions = datasetTypeKeys.map(t => ({\n    // text: DatasetTypeMetadata[DatasetTypes[t as any]].short,\n    text: DatasetTypes[t as any],\n    value: DatasetTypes[t as any],\n}));\n\ninterface DatasetTypeSelectProps {\n    onClick: (e: React.SyntheticEvent, data: DropdownProps) => void,\n    currentType: DatasetTypes,\n}\n\nconst DatasetTypeSelect: React.SFC<DatasetTypeSelectProps> = ({ currentType, onClick }) => {\n    return (\n        <>\n            <Dropdown\n                inline={true}\n                options={datasetTypeOptions}\n                value={currentType}\n                onChange={onClick}\n            />\n        </>\n    );\n}\n\nexport default DatasetTypeSelect;","import { FormikProps, withFormik } from \"formik\";\nimport * as React from \"react\";\nimport { Button, Form } from \"semantic-ui-react\";\nimport { Omit } from \"../../helpers/types\";\nimport { DatasetParamsHDF5, DatasetTypes } from \"../../messages\";\nimport { getInitial } from \"../helpers\";\nimport { OpenFormProps } from \"../types\";\n\ntype DatasetParamsHDF5ForForm = Omit<DatasetParamsHDF5, \"path\" | \"type\" | \"tileshape\"> & { tileshape: string, };\n\ntype FormValues = DatasetParamsHDF5ForForm\n\ntype MergedProps = FormikProps<FormValues> & OpenFormProps<DatasetParamsHDF5>;\n\nconst HDF5ParamsForm: React.SFC<MergedProps> = ({\n    values,\n    touched,\n    errors,\n    dirty,\n    isSubmitting,\n    handleChange,\n    handleBlur,\n    handleSubmit,\n    handleReset,\n    onCancel,\n}) => {\n    return (\n        <Form onSubmit={handleSubmit}>\n            <Form.Field>\n                <label htmlFor=\"name\">Name:</label>\n                <input type=\"text\" name=\"name\" value={values.name}\n                    onChange={handleChange}\n                    onBlur={handleBlur} />\n                {errors.name && touched.name && errors.name}\n            </Form.Field>\n            <Form.Field>\n                <label htmlFor=\"ds_path\">HDF5 Dataset Path:</label>\n                <input type=\"text\" name=\"ds_path\" value={values.ds_path}\n                    onChange={handleChange} onBlur={handleBlur} />\n            </Form.Field>\n            <Form.Field>\n                <label htmlFor=\"tileshape\">Tileshape:</label>\n                <input type=\"text\" name=\"tileshape\" value={values.tileshape}\n                    onChange={handleChange} onBlur={handleBlur} />\n            </Form.Field>\n            <Button primary={true} type=\"submit\" disabled={isSubmitting}>Load Dataset</Button>\n            <Button onClick={onCancel} >Cancel</Button>\n        </Form>\n    )\n}\n\nexport default withFormik<OpenFormProps<DatasetParamsHDF5>, FormValues>({\n    mapPropsToValues: ({ initial }) => ({\n        name: getInitial(\"name\", \"\", initial),\n        tileshape: getInitial(\"tileshape\", \"1, 8, 128, 128\", initial),\n        ds_path: getInitial(\"ds_path\", \"\", initial),\n    }),\n    handleSubmit: (values, formikBag) => {\n        const { onSubmit, path } = formikBag.props;\n        onSubmit({\n            path,\n            type: DatasetTypes.HDF5,\n            name: values.name,\n            ds_path: values.ds_path,\n            tileshape: values.tileshape.split(\",\").map(part => +part),\n        });\n    }\n})(HDF5ParamsForm);","import { FormikProps, withFormik } from \"formik\";\nimport * as React from \"react\";\nimport { Button, Form } from \"semantic-ui-react\";\nimport { Omit } from \"../../helpers/types\";\nimport { DatasetParamsHDFS, DatasetTypes } from \"../../messages\";\nimport { getInitial } from \"../helpers\";\nimport { OpenFormProps } from \"../types\";\n\ntype RawDatasetParamsHDFS = Omit<DatasetParamsHDFS, \"path\" | \"type\" | \"tileshape\"> & {\n    tileshape: string,\n};\n\ntype FormValues = RawDatasetParamsHDFS\n\ntype MergedProps = FormikProps<FormValues> & OpenFormProps<DatasetParamsHDFS>;\n\nconst HDFSParamsForm: React.SFC<MergedProps> = ({\n    values,\n    touched,\n    errors,\n    dirty,\n    isSubmitting,\n    handleChange,\n    handleBlur,\n    handleSubmit,\n    handleReset,\n    onCancel,\n}) => {\n    return (\n        <Form onSubmit={handleSubmit}>\n            <Form.Field>\n                <label htmlFor=\"name\">Name:</label>\n                <input type=\"text\" name=\"name\" value={values.name}\n                    onChange={handleChange}\n                    onBlur={handleBlur} />\n                {errors.name && touched.name && errors.name}\n            </Form.Field>\n            <Form.Field>\n                <label htmlFor=\"tileshape\">Tileshape:</label>\n                <input type=\"text\" name=\"tileshape\" value={values.tileshape}\n                    onChange={handleChange} onBlur={handleBlur} />\n            </Form.Field>\n            <Button primary={true} type=\"submit\" disabled={isSubmitting}>Load Dataset</Button>\n            <Button type=\"button\" onClick={onCancel}>Cancel</Button>\n        </Form>\n    )\n}\n\nexport default withFormik<OpenFormProps<DatasetParamsHDFS>, FormValues>({\n    mapPropsToValues: ({ initial }) => ({\n        name: getInitial(\"name\", \"\", initial),\n        tileshape: getInitial(\"tileshape\", \"1, 8, 128, 128\", initial),\n    }),\n    handleSubmit: (values, formikBag) => {\n        const { onSubmit, path } = formikBag.props;\n        onSubmit({\n            path,\n            type: DatasetTypes.HDFS,\n            name: values.name,\n            tileshape: values.tileshape.split(\",\").map(part => +part),\n        });\n    }\n})(HDFSParamsForm);","import { FormikProps, withFormik } from \"formik\";\nimport * as React from \"react\";\nimport { Button, Form } from \"semantic-ui-react\";\nimport { Omit } from \"../../helpers/types\";\nimport { DatasetParamsK2IS, DatasetTypes } from \"../../messages\";\nimport { getInitial, parseNumList } from \"../helpers\";\nimport { OpenFormProps } from \"../types\";\n\n// some fields have different types in the form vs. in messages\ntype DatasetParamsK2ISForForm = Omit<DatasetParamsK2IS,\n    \"path\"\n    | \"scan_size\"\n    | \"type\"> & {\n    scan_size: string,\n};\n\ntype FormValues = DatasetParamsK2ISForForm\n\n\ntype MergedProps = FormikProps<FormValues> & OpenFormProps<DatasetParamsK2IS>;\n\nconst K2ISFileParamsForm: React.SFC<MergedProps> = ({\n    values,\n    touched,\n    errors,\n    dirty,\n    isSubmitting,\n    handleChange,\n    handleBlur,\n    handleSubmit,\n    handleReset,\n    onCancel,\n}) => {\n    return (\n        <Form onSubmit={handleSubmit}>\n            <Form.Field>\n                <label htmlFor=\"name\">Name:</label>\n                <input type=\"text\" name=\"name\" value={values.name}\n                    onChange={handleChange}\n                    onBlur={handleBlur} />\n                {errors.name && touched.name && errors.name}\n            </Form.Field>\n            <Form.Field>\n                <label htmlFor=\"scan_size\">Scan Size:</label>\n                <input type=\"text\" name=\"scan_size\" value={values.scan_size}\n                    onChange={handleChange} onBlur={handleBlur} />\n            </Form.Field>\n\n            <Button primary={true} type=\"submit\" disabled={isSubmitting}>Load Dataset</Button>\n            <Button type=\"button\" onClick={onCancel}>Cancel</Button>\n        </Form>\n    )\n}\n\nexport default withFormik<OpenFormProps<DatasetParamsK2IS>, FormValues>({\n    mapPropsToValues: ({ initial }) => ({\n        name: getInitial(\"name\", \"\", initial),\n        scan_size: getInitial(\"scan_size\", \"32, 32\", initial),\n    }),\n    handleSubmit: (values, formikBag) => {\n        const { onSubmit, path } = formikBag.props;\n        onSubmit({\n            path,\n            type: DatasetTypes.K2IS,\n            name: values.name,\n            scan_size: parseNumList(values.scan_size),\n        });\n    }\n})(K2ISFileParamsForm);\n\n","import { FormikProps, withFormik } from \"formik\";\nimport * as React from \"react\";\nimport { Button, Form } from \"semantic-ui-react\";\nimport { Omit } from \"../../helpers/types\";\nimport { DatasetParamsMIB, DatasetTypes } from \"../../messages\";\nimport { getInitial, parseNumList } from \"../helpers\";\nimport { OpenFormProps } from \"../types\";\n\n// some fields have different types in the form vs. in messages\ntype DatasetParamsMIBForForm = Omit<DatasetParamsMIB,\n    \"path\"\n    | \"type\"\n    | \"tileshape\"\n    | \"scan_size\"\n> & {\n    tileshape: string,\n    scan_size: string,\n};\n\ntype FormValues = DatasetParamsMIBForForm\n\ntype MergedProps = FormikProps<FormValues> & OpenFormProps<DatasetParamsMIB>;\n\nconst RawFileParamsForm: React.SFC<MergedProps> = ({\n    values,\n    touched,\n    errors,\n    dirty,\n    isSubmitting,\n    handleChange,\n    handleBlur,\n    handleSubmit,\n    handleReset,\n    onCancel,\n}) => {\n    return (\n        <Form onSubmit={handleSubmit}>\n            <Form.Field>\n                <label htmlFor=\"name\">Name:</label>\n                <input type=\"text\" name=\"name\" value={values.name}\n                    onChange={handleChange}\n                    onBlur={handleBlur} />\n                {errors.name && touched.name && errors.name}\n            </Form.Field>\n            <Form.Field>\n                <label htmlFor=\"tileshape\">Tileshape:</label>\n                <input type=\"text\" name=\"tileshape\" value={values.tileshape}\n                    onChange={handleChange} onBlur={handleBlur} />\n            </Form.Field>\n            <Form.Field>\n                <label htmlFor=\"scan_size\">Scan Size:</label>\n                <input type=\"text\" name=\"scan_size\" value={values.scan_size}\n                    onChange={handleChange} onBlur={handleBlur} />\n            </Form.Field>\n            <Button primary={true} type=\"submit\" disabled={isSubmitting}>Load Dataset</Button>\n            <Button type=\"button\" onClick={onCancel}>Cancel</Button>\n        </Form>\n    )\n}\n\nexport default withFormik<OpenFormProps<DatasetParamsMIB>, FormValues>({\n    mapPropsToValues: ({ initial }) => ({\n        name: getInitial(\"name\", \"\", initial),\n        tileshape: getInitial(\"tileshape\", \"1, 8, 256, 256\", initial),\n        scan_size: getInitial(\"scan_size\", \"256, 256\", initial),\n    }),\n    handleSubmit: (values, formikBag) => {\n        const { onSubmit, path } = formikBag.props;\n        onSubmit({\n            path,\n            type: DatasetTypes.MIB,\n            name: values.name,\n            tileshape: parseNumList(values.tileshape),\n            scan_size: parseNumList(values.scan_size),\n        });\n    }\n})(RawFileParamsForm);\n","import { FormikProps, withFormik } from \"formik\";\nimport * as React from \"react\";\nimport { Button, Form } from \"semantic-ui-react\";\nimport { Omit } from \"../../helpers/types\";\nimport { DatasetParamsRaw, DatasetTypes } from \"../../messages\";\nimport { getInitial, parseNumList } from \"../helpers\";\nimport { OpenFormProps } from \"../types\";\n\n// some fields have different types in the form vs. in messages\ntype DatasetParamsRawForForm = Omit<DatasetParamsRaw,\n    \"type\"\n    | \"tileshape\"\n    | \"path\"\n    | \"scan_size\"\n    | \"detector_size_raw\"\n    | \"crop_detector_to\"> & {\n        tileshape: string,\n        scan_size: string\n        detector_size_raw: string,\n        crop_detector_to: string,\n    };\n\ntype FormValues = DatasetParamsRawForForm\n\ntype MergedProps = FormikProps<FormValues> & OpenFormProps<DatasetParamsRaw>;\n\nconst RawFileParamsForm: React.SFC<MergedProps> = ({\n    values,\n    touched,\n    errors,\n    dirty,\n    isSubmitting,\n    handleChange,\n    handleBlur,\n    handleSubmit,\n    handleReset,\n    onCancel,\n}) => {\n    return (\n        <Form onSubmit={handleSubmit}>\n            <Form.Field>\n                <label htmlFor=\"name\">Name:</label>\n                <input type=\"text\" name=\"name\" value={values.name}\n                    onChange={handleChange}\n                    onBlur={handleBlur} />\n                {errors.name && touched.name && errors.name}\n            </Form.Field>\n            <Form.Field>\n                <label htmlFor=\"tileshape\">Tileshape:</label>\n                <input type=\"text\" name=\"tileshape\" value={values.tileshape}\n                    onChange={handleChange} onBlur={handleBlur} />\n            </Form.Field>\n            <Form.Field>\n                <label htmlFor=\"scan_size\">Scan Size:</label>\n                <input type=\"text\" name=\"scan_size\" value={values.scan_size}\n                    onChange={handleChange} onBlur={handleBlur} />\n            </Form.Field>\n            <Form.Field>\n                <label htmlFor=\"dtype\">Datatype (uint16, uint32, float32, float64, &gt;u2, ..., can be anything that is <a href=\"https://docs.scipy.org/doc/numpy-1.15.1/reference/arrays.dtypes.html\">understood by numpy as a dtype</a>):</label>\n                <input type=\"text\" name=\"dtype\" value={values.dtype}\n                    onChange={handleChange} onBlur={handleBlur} />\n            </Form.Field>\n\n            <Form.Field>\n                <label htmlFor=\"detector_size_raw\">Detector Size (as in the file):</label>\n                <input type=\"text\" name=\"detector_size_raw\" value={values.detector_size_raw}\n                    onChange={handleChange} onBlur={handleBlur} />\n            </Form.Field>\n            <Form.Field>\n                <label htmlFor=\"crop_detector_to\">Detector Size Crop:</label>\n                <input type=\"text\" name=\"crop_detector_to\" value={values.crop_detector_to}\n                    onChange={handleChange} onBlur={handleBlur} />\n            </Form.Field>\n            <Button primary={true} type=\"submit\" disabled={isSubmitting}>Load Dataset</Button>\n            <Button type=\"button\" onClick={onCancel}>Cancel</Button>\n        </Form>\n    )\n}\n\nexport default withFormik<OpenFormProps<DatasetParamsRaw>, FormValues>({\n    mapPropsToValues: ({ initial }) => ({\n        name: getInitial(\"name\", \"\", initial),\n        tileshape: getInitial(\"tileshape\", \"1, 8, 128, 128\", initial),\n        detector_size_raw: getInitial(\"detector_size_raw\", \"130, 128\", initial),\n        crop_detector_to: getInitial(\"crop_detector_to\", \"128, 128\", initial),\n        scan_size: getInitial(\"scan_size\", \"256, 256\", initial),\n        dtype: getInitial(\"dtype\", \"float32\", initial),\n    }),\n    handleSubmit: (values, formikBag) => {\n        const { onSubmit, path } = formikBag.props;\n        onSubmit({\n            path,\n            type: DatasetTypes.RAW,\n            name: values.name,\n            dtype: values.dtype,\n            tileshape: parseNumList(values.tileshape),\n            scan_size: parseNumList(values.scan_size),\n            detector_size_raw: parseNumList(values.detector_size_raw),\n            crop_detector_to: parseNumList(values.crop_detector_to),\n        });\n    }\n})(RawFileParamsForm);\n","import * as React from \"react\";\nimport { connect } from 'react-redux';\nimport { DropdownProps, Header, Segment } from \"semantic-ui-react\";\nimport uuid from \"uuid/v4\";\nimport { DatasetFormParams, DatasetTypes } from '../../messages';\nimport { RootReducer } from \"../../store\";\nimport * as datasetActions from \"../actions\";\nimport BLOParamsForm from \"./BLOParamsForm\";\nimport DatasetTypeSelect from \"./DatasetTypeSelect\";\nimport HDF5ParamsForm from \"./HDF5ParamsForm\";\nimport HDFSParamsForm from './HDFSParamsForm';\nimport K2ISParamsForm from \"./K2ISParamsForm\";\nimport MIBParamsForm from \"./MIBParamsForm\";\nimport RawFileParamsForm from \"./RawFileParamsForm\";\nimport { Dispatch } from \"redux\";\n\nconst mapDispatchToProps = (dispatch: Dispatch) => {\n    return {\n        createDataset: (params: DatasetFormParams) => {\n            dispatch(datasetActions.Actions.create({\n                id: uuid(),\n                params,\n            }));\n        },\n        onCancel: () => dispatch(datasetActions.Actions.cancelOpen()),\n    };\n}\n\nconst mapStateToProps = (state: RootReducer) => {\n    return {\n        formVisible: state.openDataset.formVisible,\n        formPath: state.openDataset.formPath,\n        formInitial: state.openDataset.formInitialParams,\n    };\n}\n\n\ntype MergedProps = ReturnType<typeof mapDispatchToProps> & ReturnType<typeof mapStateToProps>;\n\ninterface DatasetOpenState {\n    datasetType: DatasetTypes\n}\n\n\nclass DatasetOpen extends React.Component<MergedProps, DatasetOpenState> {\n    public state = {\n        datasetType: DatasetTypes.RAW,\n    }\n\n    constructor(props: MergedProps) {\n        super(props);\n        if (props.formInitial !== undefined) {\n            this.state = {\n                datasetType: props.formInitial.type,\n            };\n        }\n    }\n\n    public setDatasetType = (e: React.SyntheticEvent, data: DropdownProps) => {\n        const type = data.value as DatasetTypes;\n        this.setState({\n            datasetType: type,\n        })\n    }\n\n    public render() {\n        const { formPath, formInitial, createDataset, onCancel } = this.props;\n        const { datasetType } = this.state;\n\n        const renderForm = (form: React.ReactNode) => {\n            return (\n                <Segment>\n                    Type: <DatasetTypeSelect onClick={this.setDatasetType} currentType={datasetType} />\n                    <Header as=\"h2\">Open: {formPath}</Header>\n                    {form}\n                </Segment>\n            );\n        }\n        switch (datasetType) {\n            case DatasetTypes.HDF5: {\n                const initial = formInitial && datasetType === formInitial.type ? formInitial : undefined;\n                return renderForm(<HDF5ParamsForm path={formPath} initial={initial} onSubmit={createDataset} onCancel={onCancel} />);\n            }\n            case DatasetTypes.HDFS: {\n                const initial = formInitial && datasetType === formInitial.type ? formInitial : undefined;\n                return renderForm(<HDFSParamsForm path={formPath} initial={initial} onSubmit={createDataset} onCancel={onCancel} />);\n            }\n            case DatasetTypes.RAW: {\n                const initial = formInitial && datasetType === formInitial.type ? formInitial : undefined;\n                return renderForm(<RawFileParamsForm path={formPath} initial={initial} onSubmit={createDataset} onCancel={onCancel} />);\n            }\n            case DatasetTypes.MIB: {\n                const initial = formInitial && datasetType === formInitial.type ? formInitial : undefined;\n                return renderForm(<MIBParamsForm path={formPath} initial={initial} onSubmit={createDataset} onCancel={onCancel} />);\n            }\n            case DatasetTypes.BLO: {\n                const initial = formInitial && datasetType === formInitial.type ? formInitial : undefined;\n                return renderForm(<BLOParamsForm path={formPath} initial={initial} onSubmit={createDataset} onCancel={onCancel} />);\n            }\n            case DatasetTypes.K2IS: {\n                const initial = formInitial && datasetType === formInitial.type ? formInitial : undefined;\n                return renderForm(<K2ISParamsForm path={formPath} initial={initial} onSubmit={createDataset} onCancel={onCancel} />);\n            }\n        }\n    }\n\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(DatasetOpen)","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Header, Icon, Message } from \"semantic-ui-react\";\nimport { RootReducer } from \"../../store\";\n\nconst mapStateToProps = (state: RootReducer) => {\n    return {\n        busy: state.openDataset.busy,\n        path: state.openDataset.busyPath,\n    };\n}\n\ntype MergedProps = ReturnType<typeof mapStateToProps>;\n\nconst DatasetOpenSpinner: React.SFC<MergedProps> = ({ busy, path }) => {\n    if (!busy) {\n        return null;\n    }\n    return (\n        <>\n            <Header as=\"h2\" dividing={true}>Loading...</Header>\n            <Message icon={true}>\n                <Icon name='cog' loading={true} />\n                <Message.Content>\n                    <Message.Header>Detecting parameters for {path}</Message.Header>\n                </Message.Content>\n            </Message>\n        </>\n    );\n}\n\nexport default connect(mapStateToProps)(DatasetOpenSpinner);","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport BrowserWrapper from \"../../browser/components/BrowserWrapper\";\nimport { RootReducer } from \"../../store\";\nimport { DatasetsState } from \"../types\";\nimport Dataset from \"./Dataset\";\nimport DatasetOpen from \"./DatasetOpen\";\nimport DatasetOpenSpinner from \"./DatasetOpenSpinner\";\n\ninterface DatasetListProps {\n    datasets: DatasetsState\n}\n\nconst mapStateToProps = (state: RootReducer) => {\n    return {\n        datasets: state.datasets,\n        formVisible: state.openDataset.formVisible,\n        formPath: state.openDataset.formPath,\n    };\n}\n\ntype MergedProps = DatasetListProps & ReturnType<typeof mapStateToProps>;\n\nclass DatasetList extends React.Component<MergedProps> {\n    public render() {\n        const { formVisible, datasets } = this.props;\n\n        return (\n            <>\n                {datasets.ids.map((dsId: string) => <Dataset dataset={datasets.byId[dsId]} key={dsId} />)}\n                <DatasetOpenSpinner />\n                {formVisible && <DatasetOpen />}\n                <BrowserWrapper />\n            </>\n        );\n    }\n}\n\nexport default connect(mapStateToProps)(DatasetList);","import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { Message } from 'semantic-ui-react';\nimport * as errorActions from '../actions';\nimport { ErrorMessage } from '../reducers';\nimport { Dispatch } from 'redux';\n\nconst mapDispatchToProps = (dispatch: Dispatch, ownProps: ErrorProps) => {\n    return {\n        dismiss: () => dispatch(errorActions.Actions.dismiss(ownProps.error.id)),\n    }\n}\n\ninterface ErrorProps {\n    error: ErrorMessage,\n}\n\ntype MergedProps = ErrorProps & ReturnType<typeof mapDispatchToProps>;\n\nconst ErrorComponent: React.SFC<MergedProps> = ({ dismiss, error }) => {\n    return (\n        <Message negative={true} onDismiss={dismiss}>{error.msg}</Message>\n    )\n}\n\nexport default connect(null, mapDispatchToProps)(ErrorComponent);","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Modal } from \"semantic-ui-react\";\nimport { RootReducer } from \"../../store\";\nimport Error from \"./Error\";\n\nconst mapStateToProps = (state: RootReducer) => {\n    return {\n        errors: state.errors,\n        clusterConnected: state.clusterConnection.status === \"connected\",\n        channelConnected: (state.channelStatus.status === \"connected\" ||\n            state.channelStatus.status === \"ready\"),\n    }\n}\n\ntype MergedProps = ReturnType<typeof mapStateToProps>;\n\nconst ErrorList: React.SFC<MergedProps> = ({ errors, clusterConnected, channelConnected }) => {\n    const numShown = 3;\n    const latestErrors = errors.ids.slice(Math.max(0, errors.ids.length - numShown));\n    const showModal = errors.ids.length > 0 && clusterConnected && channelConnected;\n    return (\n        <Modal open={showModal}>\n            {latestErrors.map(error => <Error error={errors.byId[error]} key={error} />)}\n        </Modal>\n    );\n}\n\nexport default connect(mapStateToProps)(ErrorList);","import * as React from 'react';\nimport 'semantic-ui-css/semantic.min.css';\nimport { Container, Icon, Modal, Popup } from 'semantic-ui-react';\nimport About from './About';\nimport ChannelStatus from './channel/components/ChannelStatus';\nimport DatasetList from './dataset/components/DatasetList';\nimport ErrorList from './errors/components/ErrorList';\nimport logo from './images/LiberTEM logo-medium.png';\n\nclass App extends React.Component {\n    public render() {\n        return (\n            <Container style={{ margin: \"5em 1em 5em 1em\" }}>\n                <div style={{ display: \"flex\" }}>\n                    <img src={logo} width=\"200\" height=\"46\" alt=\"LiberTEM\" style={{ marginBottom: \"20px\" }} />\n                    {' '}\n                    <Modal trigger={\n                        <Icon name=\"info circle\" link={true} style={{ alignSelf: \"flex-start\" }} />\n                    }>\n                        <Popup.Header>About LiberTEM</Popup.Header>\n                        <Popup.Content>\n                            <About />\n                        </Popup.Content>\n                    </Modal>\n                </div>\n                <ErrorList />\n                <ChannelStatus>\n                    <DatasetList />\n                </ChannelStatus>\n            </Container>\n        );\n    }\n}\n\nexport default App;\n","// tslint:disable:no-console\n// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the 'N+1' visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL!,\n      window.location.toString()\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker) {\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the old content will have been purged and\n                // the fresh content will have been added to the cache.\n                // It's the perfect time to display a 'New content is\n                // available; please refresh.' message in your web app.\n                console.log('New content is available; please refresh.');\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // 'Content is cached for offline use.' message.\n                console.log('Content is cached for offline use.');\n              }\n            }\n          };\n        }\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type')!.indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { AnalysisDetails, CancelJobResponse, StartJobRequest, StartJobResponse } from \"../messages\";\n\nexport function startJob(jobId: string, datasetId: string, analysis: AnalysisDetails): Promise<StartJobResponse> {\n    const payload: StartJobRequest = {\n        job: {\n            dataset: datasetId,\n            analysis,\n        }\n    }\n    return fetch(`/api/jobs/${jobId}/`, {\n        body: JSON.stringify(payload),\n        credentials: \"same-origin\",\n        method: \"PUT\",\n    }).then(r => r.json());\n}\n\nexport function cancelJob(jobId: string): Promise<CancelJobResponse> {\n    return fetch(`/api/jobs/${jobId}/`, {\n        method: \"DELETE\",\n        credentials: \"same-origin\",\n    }).then(r => r.json());\n}","import { buffers } from 'redux-saga';\nimport { actionChannel, call, cancel, fork, put, select, take, takeEvery } from 'redux-saga/effects';\nimport uuid from 'uuid/v4';\nimport { assertNotReached } from '../helpers';\nimport { cancelJob, startJob } from '../job/api';\nimport { JobState } from '../job/types';\nimport { AnalysisDetails, AnalysisTypes, DatasetState } from '../messages';\nimport { RootReducer } from '../store';\nimport * as analysisActions from './actions';\nimport { AnalysisState, JobKind } from './types';\n\n\n// TODO: flip this around - create classes for each analysis type\n// classes should provide:\n//  + methods for default parameters\n//  + creation of a job from current parameters\nfunction getAnalysisDetails(analysisType: AnalysisTypes, dataset: DatasetState): AnalysisDetails {\n    const shape = dataset.params.shape;\n    const width = shape[3];\n    const height = shape[2];\n    const minLength = Math.min(width, height);\n\n    switch (analysisType) {\n        case AnalysisTypes.APPLY_DISK_MASK: {\n            return {\n                type: analysisType,\n                parameters: {\n                    shape: \"disk\",\n                    cx: width / 2,\n                    cy: height / 2,\n                    r: minLength / 2,\n                }\n            };\n        }\n        case AnalysisTypes.APPLY_RING_MASK: {\n            return {\n                type: analysisType,\n                parameters: {\n                    shape: \"ring\",\n                    cx: width / 2,\n                    cy: height / 2,\n                    ri: minLength / 4,\n                    ro: minLength / 2,\n                }\n            }\n        }\n        case AnalysisTypes.CENTER_OF_MASS: {\n            return {\n                type: analysisType,\n                parameters: {\n                    shape: \"com\",\n                    cx: width / 2,\n                    cy: height / 2,\n                    r: minLength / 2,\n                },\n            };\n        }\n        case AnalysisTypes.APPLY_POINT_SELECTOR: {\n            return {\n                type: analysisType,\n                parameters: {\n                    shape: \"point\",\n                    cx: width / 2,\n                    cy: width / 2,\n                }\n            }\n        }\n        case AnalysisTypes.SUM_FRAMES: {\n            return {\n                type: AnalysisTypes.SUM_FRAMES,\n                parameters: {},\n            }\n        }\n        case AnalysisTypes.PICK_FRAME: {\n            return {\n                type: AnalysisTypes.PICK_FRAME,\n                parameters: {\n                    x: Math.round(width / 2),\n                    y: Math.round(height / 2),\n                }\n            }\n        }\n    }\n    return assertNotReached(\"unhandeled analysis type\");\n}\n\nfunction selectDataset(state: RootReducer, dataset: string) {\n    return state.datasets.byId[dataset];\n}\n\nfunction selectAnalysis(state: RootReducer, id: string) {\n    return state.analyses.byId[id];\n}\n\nfunction selectJob(state: RootReducer, id: string) {\n    return state.jobs.byId[id];\n}\n\n\nexport function* createAnalysisSaga(action: ReturnType<typeof analysisActions.Actions.create>) {\n    try {\n        const datasetState: DatasetState = yield select(selectDataset, action.payload.dataset)\n        const analysis: AnalysisState = {\n            id: uuid(),\n            dataset: action.payload.dataset,\n            resultDetails: getAnalysisDetails(action.payload.analysisType, datasetState),\n            frameDetails: { type: AnalysisTypes.SUM_FRAMES, parameters: {} },\n            jobs: {},\n            jobHistory: {\n                FRAME: [],\n                RESULT: [],\n            }\n        }\n\n        const sidecarTask = yield fork(analysisSidecar, analysis.id);\n\n        yield put(analysisActions.Actions.created(analysis));\n        yield put(analysisActions.Actions.run(analysis.id, \"FRAME\"));\n\n        while (true) {\n            const removeAction: ReturnType<typeof analysisActions.Actions.remove> = yield take(analysisActions.ActionTypes.REMOVE);\n            if (removeAction.payload.id === analysis.id) {\n                yield cancel(sidecarTask);\n            }\n        }\n    } catch (e) {\n        const timestamp = Date.now();\n        const id = uuid();\n        yield put(analysisActions.Actions.error(`Error creating analysis: ${e.toString()}`, timestamp, id));\n    }\n}\n\nexport function* cancelOldJob(analysis: AnalysisState, kind: JobKind) {\n    const jobId = analysis.jobs[kind]\n    if (jobId === undefined) {\n        return;\n    } else {\n        const job: JobState = yield select(selectJob, jobId);\n        if (job.running !== \"DONE\") {\n            yield call(cancelJob, jobId);\n        }\n    }\n}\n\nexport function* analysisSidecar(analysisId: string) {\n    // channel for incoming actions:\n    // all actions that arrive while we block in `call` will be buffered here.\n    // because the buffer is sliding of size 1, we only keep the latest action!\n    const runOrParamsChannel = yield actionChannel(analysisActions.ActionTypes.RUN, buffers.sliding(1));\n\n    while (true) {\n        try {\n            const action: analysisActions.ActionParts[\"run\"] = yield take(runOrParamsChannel);\n\n            // ignore actions meant for other analyses\n            if (action.payload.id !== analysisId) {\n                continue;\n            }\n\n            // get the current state incl. configuration\n            const analysis: AnalysisState = yield select(selectAnalysis, analysisId);\n\n            const kind = action.payload.kind;\n            const oldJobId = analysis.jobs[kind];\n            if (oldJobId !== undefined) {\n                const job: JobState = yield select(selectJob, oldJobId);\n                if (job && job.running !== \"DONE\") {\n                    // wait until the job is cancelled:\n                    yield call(cancelJob, oldJobId);\n                }\n            }\n\n            const jobId = uuid();\n            // wait until the job is started\n            if (kind === \"FRAME\") {\n                yield call(startJob, jobId, analysis.dataset, analysis.frameDetails);\n            } else if (kind === \"RESULT\") {\n                yield call(startJob, jobId, analysis.dataset, analysis.resultDetails);\n            }\n            yield put(analysisActions.Actions.running(analysis.id, jobId, kind))\n        } catch (e) {\n            const timestamp = Date.now();\n            const id = uuid();\n            yield put(analysisActions.Actions.error(`Error running analysis: ${e.toString()}`, timestamp, id));\n        }\n    }\n}\n\nexport function* updateFrameViewMode(action: ReturnType<typeof analysisActions.Actions.setFrameViewMode>) {\n    yield put(analysisActions.Actions.run(action.payload.id, \"FRAME\"));\n}\n\nexport function* updateFrameViewParams(action: ReturnType<typeof analysisActions.Actions.updateParameters>) {\n    if (action.payload.kind === \"FRAME\") {\n        yield put(analysisActions.Actions.run(action.payload.id, \"FRAME\"));\n    }\n}\n\nexport function* doRemoveAnalysisSaga(action: ReturnType<typeof analysisActions.Actions.remove>) {\n    const analysis: AnalysisState = yield select(selectAnalysis, action.payload.id)\n    try {\n        yield call(cancelOldJob, analysis, \"RESULT\");\n        yield call(cancelOldJob, analysis, \"FRAME\");\n    } finally {\n        yield put(analysisActions.Actions.removed(action.payload.id));\n    }\n}\n\nexport function* analysisRootSaga() {\n    yield takeEvery(analysisActions.ActionTypes.CREATE, createAnalysisSaga);\n    yield takeEvery(analysisActions.ActionTypes.REMOVE, doRemoveAnalysisSaga);\n    yield takeEvery(analysisActions.ActionTypes.SET_FRAMEVIEW_MODE, updateFrameViewMode);\n    yield takeEvery(analysisActions.ActionTypes.UPDATE_PARAMETERS, updateFrameViewParams);\n}","import * as _ from 'lodash';\nimport { MsgPartConfig } from \"../messages\";\nimport { ConfigState } from \"./reducers\";\n\nconst CONFIG_KEY = \"LiberTEM.config\";\n\nexport function joinPaths(config: ConfigState, ...parts: string[]) {\n    const removeSep = (part: string) => part.replace(new RegExp(`${_.escapeRegExp(config.separator)}$`), \"\")\n    parts = [removeSep(parts[0]), ...parts.slice(1)];\n    return parts.map(part => part.trim()).join(config.separator);\n}\n\nexport function mergeLocalStorage(config: MsgPartConfig): ConfigState {\n    const localSettings = window.localStorage.getItem(CONFIG_KEY);\n    if (localSettings === null) {\n        return getDefaultLocalConfig(config);\n    }\n    const localSettingsParsed = JSON.parse(localSettings);\n    const defaultConfig = getDefaultLocalConfig(config);\n    const mergedConfig: ConfigState = Object.assign(defaultConfig, localSettingsParsed);\n    return mergedConfig;\n}\n\nexport function setLocalStorage(config: ConfigState): void {\n    const keys: Array<Partial<keyof ConfigState>> = [\"cwd\", \"lastOpened\", \"fileHistory\"];\n    const localSettings = keys.reduce((acc, item) => {\n        acc[item] = config[item];\n        return acc;\n    }, {} as ConfigState);\n    window.localStorage.setItem(CONFIG_KEY, JSON.stringify(localSettings));\n}\n\nexport function clearLocalStorage(): void {\n    window.localStorage.removeItem(CONFIG_KEY);\n}\n\nexport function getDefaultLocalConfig(config: MsgPartConfig): ConfigState {\n    return Object.assign({}, config, {\n        lastOpened: {},\n        fileHistory: [],\n        cwd: \"/\",\n    });\n}\n\nexport function makeUnique<T>(inp: T[]): T[] {\n    return inp.reduce((acc: T[], curr: T) => {\n        if (acc.indexOf(curr) === -1) {\n            return [...acc, curr];\n        } else {\n            return acc;\n        }\n    }, [] as T[]);\n}","import { DirectoryListingResponse } from \"../messages\";\n\nexport function getDirectoryListing(path: string): Promise<DirectoryListingResponse> {\n    const url = `/api/browse/localfs/?path=${path}`;\n    return fetch(url, {\n        method: 'GET',\n        credentials: \"same-origin\",\n    }).then(r => r.json());\n}","import { ActionsUnion, createAction } from '../helpers/actionHelpers';\nimport { JobResultType } from '../job/types';\nimport { MsgPartDataset, MsgPartJob } from '../messages';\n\n\nexport type PartialResultType = JobResultType;\n\nexport enum ActionTypes {\n    INITIAL_STATE = 'CHANNEL_INITIAL_STATE',\n    START_JOB = 'CHANNEL_START_JOB',\n    FINISH_JOB = 'CHANNEL_FINISH_JOB',\n    TASK_RESULT = 'CHANNEL_TASK_RESULT',\n    JOB_ERROR = 'CHANNEL_JOB_ERROR',\n    OPEN = \"CHANNEL_OPEN\",\n    CLOSE = \"CHANNEL_CLOSE\",\n    ERROR = \"CHANNEL_ERROR\",\n}\n\nexport const Actions = {\n    initialState: (jobs: MsgPartJob[], datasets: MsgPartDataset[], timestamp: number) => createAction(ActionTypes.INITIAL_STATE, { jobs, datasets, timestamp }),\n    startJob: (job: string, dataset: string, timestamp: number) => createAction(ActionTypes.START_JOB, { job, timestamp, dataset }),\n    finishJob: (job: string, results: JobResultType[], timestamp: number) => createAction(ActionTypes.FINISH_JOB, { job, results, timestamp }),\n    taskResult: (job: string, results: PartialResultType[], timestamp: number) => createAction(ActionTypes.TASK_RESULT, { job, results, timestamp }),\n    jobError: (job: string, msg: string, id: string, timestamp: number) => createAction(ActionTypes.JOB_ERROR, { job, msg, id, timestamp }),\n    open: (timestamp: number) => createAction(ActionTypes.OPEN, { timestamp }),\n    close: (timestamp: number) => createAction(ActionTypes.CLOSE, { timestamp }),\n    error: (msg: string, timestamp: number, id: string) => createAction(ActionTypes.ERROR, { msg, timestamp, id }),\n}\n\nexport type Actions = ActionsUnion<typeof Actions>;","import { call, fork, put, select, take } from \"redux-saga/effects\";\nimport uuid from 'uuid/v4';\nimport { joinPaths } from \"../config/helpers\";\nimport { ConfigState } from \"../config/reducers\";\nimport { DirectoryListingResponse } from \"../messages\";\nimport { RootReducer } from \"../store\";\nimport * as browserActions from './actions';\nimport { getDirectoryListing } from \"./api\";\nimport { DirectoryBrowserState } from \"./types\";\n\nexport function* directoryListingSaga() {\n    yield fork(fetchOnRequest);\n    yield fork(fetchDirectoryListOnOpen);\n}\n\nfunction* fetchOnRequest() {\n    while (true) {\n        const action: ReturnType<typeof browserActions.Actions.list> = yield take(browserActions.ActionTypes.LIST_DIRECTORY);\n\n        const { name, path } = action.payload;\n        const config: ConfigState = yield select((state: RootReducer) => state.config)\n        const newPath = name !== undefined ? joinPaths(config, path, name) : path;\n        yield fork(fetchDirectoryListing, newPath);\n    }\n}\n\nfunction* fetchDirectoryListing(path: string) {\n    try {\n        const result: DirectoryListingResponse = yield call(getDirectoryListing, path);\n        if (result.status === \"ok\") {\n            yield put(browserActions.Actions.dirListing(result.path, result.dirs, result.files, result.drives, result.places));\n        } else if (result.status === \"error\") {\n            const browserState: DirectoryBrowserState = yield select((state: RootReducer) => state.browser);\n            const timestamp = Date.now();\n            const id = uuid();\n            const alternative = result.alternative ? result.alternative : browserState.places.home.path;\n            yield put(browserActions.Actions.error(`Error browsing directory: ${result.msg}`, timestamp, id));\n            yield put(browserActions.Actions.list(alternative));\n        }\n    } catch (e) {\n        const browserState: DirectoryBrowserState = yield select((state: RootReducer) => state.browser);\n        const timestamp = Date.now();\n        const id = uuid();\n        yield put(browserActions.Actions.error(`Error browsing directory: ${e.toString()}`, timestamp, id));\n        yield put(browserActions.Actions.list(browserState.places.home.path));\n    }\n}\n\nfunction* fetchDirectoryListOnOpen() {\n    while (true) {\n        yield take(browserActions.ActionTypes.OPEN);\n        const config: ConfigState = yield select((state: RootReducer) => state.config)\n        yield put(browserActions.Actions.list(config.cwd));\n    }\n}","import { ActionCreatorsMapObject } from \"redux\";\nimport { FollowupPart, MsgPartDataset, MsgPartJob } from \"../messages\";\n\nexport interface Message<T extends string> {\n    messageType: T\n}\n\nexport function createMessage<T extends string, O>(messageType: T, attribs: O) {\n    return Object.assign({ messageType }, attribs);\n}\n\nexport enum MessageTypes {\n    INITIAL_STATE = \"INITIAL_STATE\",\n    START_JOB = \"START_JOB\",\n    FINISH_JOB = \"FINISH_JOB\",\n    TASK_RESULT = \"TASK_RESULT\",\n    JOB_ERROR = \"JOB_ERROR\",\n    BINARY = \"BINARY\",\n    OPEN = \"OPEN\",\n    CLOSE = \"CLOSE\",\n    ERROR = \"ERROR\",\n    DELETE_DATASET = \"DELETE_DATASET\"\n}\n\nexport const Messages = {\n    initialState: (jobs: MsgPartJob[], datasets: MsgPartDataset[]) => createMessage(MessageTypes.INITIAL_STATE, { jobs, datasets }),\n    startJob: (job: string, dataset: string) => createMessage(MessageTypes.START_JOB, { job, dataset }),\n    finishJob: (job: string, followup: FollowupPart) => createMessage(MessageTypes.FINISH_JOB, { job, followup }),\n    taskResult: (job: string, followup: FollowupPart) => createMessage(MessageTypes.TASK_RESULT, { job, followup }),\n    jobError: (job: string, msg: string) => createMessage(MessageTypes.JOB_ERROR, { job, msg }),\n    binary: (objectURL: string) => createMessage(MessageTypes.BINARY, { objectURL }),\n    open: () => createMessage(MessageTypes.OPEN, {}),\n    close: () => createMessage(MessageTypes.CLOSE, {}),\n    error: (msg: string) => createMessage(MessageTypes.ERROR, { msg }),\n    deleteDataset: (dataset: string) => createMessage(MessageTypes.DELETE_DATASET, { dataset }),\n}\n\nexport type MessagesUnion<A extends ActionCreatorsMapObject> = ReturnType<A[keyof A]>\nexport type Messages = MessagesUnion<typeof Messages>;\n\n// types of messages sent by the server:\n/*\nexport type InitialStateMessage = ReturnType<typeof Messages.initialState>;\nexport type StartJobMessage = ReturnType<typeof Messages.startJob>;\nexport type FinishJobMessage = ReturnType<typeof Messages.finishJob>;\nexport type TaskResultMessage = ReturnType<typeof Messages.taskResult>;\n*/\n\nexport type BinaryMessage = ReturnType<typeof Messages.binary>;","import { Channel, delay, END, eventChannel } from \"redux-saga\";\nimport { call, fork, put, take } from \"redux-saga/effects\";\nimport uuid from 'uuid/v4';\nimport * as datasetActions from '../dataset/actions';\nimport * as channelActions from \"./actions\";\nimport * as channelMessages from './messages';\n\ntype SocketChannel = Channel<channelMessages.Messages>;\n\n\n/**\n * create typesafe messages from the websocket messages\n * \n * also creates some synthetic events like open, close, error\n */\nfunction createWebSocketChannel(/* addr */): SocketChannel {\n    return eventChannel(emit => {\n        function onMessage(msg: MessageEvent) {\n            if (msg.data instanceof Blob) {\n                // TODO: cleanup createObjectURL results somewhere\n                emit(channelMessages.Messages.binary(URL.createObjectURL(msg.data)));\n            } else {\n                const parsed = JSON.parse(msg.data) as channelMessages.Messages;\n                emit(parsed);\n            }\n        }\n\n        function onOpen() {\n            emit(channelMessages.Messages.open());\n        }\n\n        function onClose() {\n            emit(channelMessages.Messages.close());\n            emit(END);\n        }\n\n        function onError(err: Event) {\n            emit(channelMessages.Messages.error(\"Error in weboscket connection\"));\n        }\n\n        const ws = new WebSocket(`ws://${window.location.hostname}:${window.location.port}/api/events/`);\n        ws.addEventListener(\"message\", onMessage);\n        ws.addEventListener(\"open\", onOpen);\n        ws.addEventListener(\"close\", onClose);\n        ws.addEventListener(\"error\", onError);\n\n        // return cleanup function:\n        return () => {\n            ws.removeEventListener(\"message\", onMessage);\n            ws.removeEventListener(\"open\", onOpen);\n            ws.removeEventListener(\"close\", onClose);\n            ws.removeEventListener(\"error\", onError);\n            // TODO: close connection if still open\n            // (or is it guaranteed that if an error was thrown, the connection is closed?)\n        };\n    });\n}\n\n/**\n * handles the connection lifecycle for our websocket\n */\nexport function* webSocketSaga() {\n    while (true) {\n        const socketChannel = yield call(createWebSocketChannel);\n        yield fork(actionsFromChannel, socketChannel);\n        const action: channelActions.Actions = yield take([\n            channelActions.ActionTypes.OPEN,\n            channelActions.ActionTypes.CLOSE,\n        ]);\n        if (action.type === channelActions.ActionTypes.OPEN) {\n            yield take([\n                channelActions.ActionTypes.CLOSE,\n                channelActions.ActionTypes.ERROR,\n            ]);\n        }\n        yield delay(1000);\n    }\n}\n\n/**\n * translates the messages from the channel to redux actions, handles aggregation etc.\n */\nexport function* actionsFromChannel(socketChannel: SocketChannel) {\n    try {\n        while (true) {\n            const msg = yield take(socketChannel);\n            const timestamp = Date.now();\n            switch (msg.messageType) {\n                case channelMessages.MessageTypes.OPEN: {\n                    yield put(channelActions.Actions.open(timestamp));\n                    break;\n                }\n                case channelMessages.MessageTypes.CLOSE: {\n                    yield put(channelActions.Actions.close(timestamp));\n                    break;\n                }\n                case channelMessages.MessageTypes.ERROR: {\n                    const id = uuid();\n                    yield put(channelActions.Actions.error(msg.msg, timestamp, id));\n                    break;\n                }\n                case channelMessages.MessageTypes.INITIAL_STATE: {\n                    yield put(channelActions.Actions.initialState(msg.jobs, msg.datasets, timestamp));\n                    break;\n                }\n                case channelMessages.MessageTypes.START_JOB: {\n                    yield put(channelActions.Actions.startJob(msg.job, msg.details.dataset, timestamp));\n                    break;\n                }\n                case channelMessages.MessageTypes.FINISH_JOB: {\n                    yield call(handleFinishJob, msg, socketChannel, timestamp);\n                    break;\n                }\n                case channelMessages.MessageTypes.TASK_RESULT: {\n                    yield call(handleTaskResult, msg, socketChannel, timestamp);\n                    break;\n                }\n                case channelMessages.MessageTypes.DELETE_DATASET: {\n                    yield put(datasetActions.Actions.deleted(msg.dataset));\n                    break;\n                }\n                case channelMessages.MessageTypes.JOB_ERROR: {\n                    const id = uuid();\n                    yield put(channelActions.Actions.jobError(msg.job, msg.msg, id, timestamp));\n                }\n            }\n        }\n    } finally {\n        // disconnected\n    }\n}\n\nexport function* handleBinaryParts(numParts: number, socketChannel: SocketChannel) {\n    const parts: channelMessages.BinaryMessage[] = [];\n    while (parts.length < numParts) {\n        const binMsg = yield take(socketChannel)\n        parts.push(binMsg);\n    }\n    return parts;\n}\n\nexport function* handleTaskResult(msg: ReturnType<typeof channelMessages.Messages.taskResult>, socketChannel: SocketChannel, timestamp: number) {\n    const parts: channelMessages.BinaryMessage[] = yield call(handleBinaryParts, msg.followup.numMessages, socketChannel);\n    const images = parts.map((part, idx) => ({ imageURL: part.objectURL, description: msg.followup.descriptions[idx] }));\n    yield put(channelActions.Actions.taskResult(msg.job, images, timestamp));\n}\n\nexport function* handleFinishJob(msg: ReturnType<typeof channelMessages.Messages.finishJob>, socketChannel: SocketChannel, timestamp: number) {\n    const parts: channelMessages.BinaryMessage[] = yield call(handleBinaryParts, msg.followup.numMessages, socketChannel);\n    const images = parts.map((part, idx) => ({ imageURL: part.objectURL, description: msg.followup.descriptions[idx] }));\n    yield put(channelActions.Actions.finishJob(msg.job, images, timestamp));\n}","import { ConnectRequest, ConnectRequestParams, ConnectResponse } from \"../messages\";\n\nexport function connectToCluster(params: ConnectRequestParams): Promise<ConnectResponse> {\n    const payload: ConnectRequest = {\n        connection: params\n    }\n    return fetch(`/api/config/connection/`, {\n        body: JSON.stringify(payload),\n        credentials: \"same-origin\",\n        method: \"PUT\",\n    }).then(r => r.json());\n}\n\nexport function checkClusterConnection(): Promise<ConnectResponse> {\n    return fetch(`/api/config/connection/`, {\n        method: 'GET',\n    }).then(r => r.json());\n}","import { ActionsUnion, createAction } from \"../helpers/actionHelpers\";\nimport { ConfigState } from \"./reducers\";\n\nexport enum ActionTypes {\n    FETCHED = \"CONFIG_FETCHED\",\n    FETCH = \"CONFIG_FETCH\",\n    FETCH_FAILED = \"CONFIG_FETCH_FAILED\",\n}\n\nexport const Actions = {\n    fetch: () => createAction(ActionTypes.FETCH),\n    fetched: (config: ConfigState) => createAction(ActionTypes.FETCHED, { config }),\n    fetchFailed: (msg: string, timestamp: number, id: string) => createAction(ActionTypes.FETCH_FAILED, { msg, timestamp, id }),\n}\n\nexport type Actions = ActionsUnion<typeof Actions>;","import { all, call, put, take, takeEvery } from \"redux-saga/effects\";\nimport * as channelActions from '../channel/actions';\nimport { ConnectResponse } from \"../messages\";\nimport * as clusterActions from './actions';\nimport { checkClusterConnection, connectToCluster } from \"./api\";\n\nfunction* connectSaga(action: ReturnType<typeof clusterActions.Actions.connect>) {\n    const conn: ConnectResponse = yield call(connectToCluster, action.payload.params);\n    yield call(putClusterStatus, conn);\n}\n\nfunction* putClusterStatus(conn: ConnectResponse) {\n    if (conn.status === \"ok\") {\n        yield put(clusterActions.Actions.connected(conn.connection.connection));\n    } else {\n        yield put(clusterActions.Actions.notConnected());\n    }\n}\n\n/**\n * when the channel is connected, check if cluster is connected and update status accordingly\n */\nfunction* trackClusterConnection() {\n    while (true) {\n        yield take(channelActions.ActionTypes.OPEN)\n        const conn: ConnectResponse = yield call(checkClusterConnection);\n        yield call(putClusterStatus, conn);\n    }\n}\n\nexport function* clusterConnectionSaga() {\n    yield takeEvery(clusterActions.ActionTypes.CONNECT, connectSaga);\n    yield all([\n        trackClusterConnection(),\n    ])\n}","import { GetConfigResponse } from \"../messages\";\n\nexport function getConfig(): Promise<GetConfigResponse> {\n    return fetch(`/api/config/`, {\n        method: \"GET\",\n        credentials: \"same-origin\",\n    }).then(r => r.json());\n}","import { call, fork, put, select, take, takeEvery } from 'redux-saga/effects';\nimport uuid from 'uuid/v4';\nimport * as browserActions from '../browser/actions';\nimport * as channelActions from '../channel/actions';\nimport * as datasetActions from '../dataset/actions';\nimport { GetConfigResponse } from '../messages';\nimport { RootReducer } from '../store';\nimport * as configActions from './actions';\nimport { getConfig } from './api';\nimport { clearLocalStorage, getDefaultLocalConfig, mergeLocalStorage, setLocalStorage } from './helpers';\nimport { ConfigState } from './reducers';\n\nfunction* getConfigOnReconnect() {\n    yield takeEvery(channelActions.ActionTypes.OPEN, getConfigSaga);\n}\n\n/**\n * get config from server and try to merge in the localStorage config\n */\nfunction* getConfigSaga() {\n    yield put(configActions.Actions.fetch());\n    const configResponse: GetConfigResponse = yield call(getConfig);\n    try {\n        const mergedConfig = mergeLocalStorage(configResponse.config);\n        yield put(configActions.Actions.fetched(mergedConfig));\n    } catch (e) {\n        try {\n            clearLocalStorage();\n            // tslint:disable-next-line:no-empty\n        } catch (e) { }\n        yield put(configActions.Actions.fetched(getDefaultLocalConfig(configResponse.config)));\n    }\n}\n\n/**\n * update localStorage config on opening files or using the file browser\n */\nfunction* updateLocalStorageConfig() {\n    while (true) {\n        yield take([\n            datasetActions.ActionTypes.CREATE,\n            browserActions.ActionTypes.DIRECTORY_LISTING\n        ]);\n        const config: ConfigState = yield select((state: RootReducer) => state.config);\n        setLocalStorage(config);\n    }\n}\n\nexport function* firstConfigFetch() {\n    try {\n        yield call(getConfigSaga);\n    } catch (e) {\n        const timestamp = Date.now();\n        const id = uuid();\n        yield put(configActions.Actions.fetchFailed(`failed to fetch config: ${e.toString()}`, timestamp, id));\n    }\n}\n\nexport function* configRootSaga() {\n    yield fork(firstConfigFetch);\n    yield fork(getConfigOnReconnect);\n    yield fork(updateLocalStorageConfig);\n}","import { DeleteDatasetResponse, DetectDatasetResponse, OpenDatasetRequest, OpenDatasetResponse } from \"../messages\";\n\nexport function openDataset(id: string, dataset: OpenDatasetRequest): Promise<OpenDatasetResponse> {\n    return fetch(`/api/datasets/${id}/`, {\n        body: JSON.stringify(dataset),\n        credentials: \"same-origin\",\n        method: \"PUT\",\n    }).then(r => r.json());\n}\n\nexport function deleteDataset(id: string): Promise<DeleteDatasetResponse> {\n    return fetch(`/api/datasets/${id}/`, {\n        credentials: \"same-origin\",\n        method: \"DELETE\",\n    }).then(r => r.json());\n}\n\n\nexport function detectDataset(path: string): Promise<DetectDatasetResponse> {\n    return fetch(`/api/datasets/detect/?path=${path}`, {\n        credentials: \"same-origin\",\n        method: \"GET\",\n    }).then(r => r.json());\n}","import { call, put, select, takeEvery } from 'redux-saga/effects';\nimport uuid from 'uuid/v4';\nimport * as browserActions from '../browser/actions';\nimport { joinPaths } from '../config/helpers';\nimport { ConfigState } from '../config/reducers';\nimport { DetectDatasetResponse, OpenDatasetResponse } from '../messages';\nimport { RootReducer } from '../store';\nimport * as datasetActions from \"./actions\";\nimport { deleteDataset, detectDataset, openDataset } from './api';\n\n\nexport function* createDatasetSaga(action: ReturnType<typeof datasetActions.Actions.create>) {\n    try {\n        const resp: OpenDatasetResponse = yield call(openDataset, action.payload.dataset.id, { dataset: action.payload.dataset });\n        if (resp.status === \"ok\") {\n            yield put(datasetActions.Actions.created(resp.details));\n        } else if (resp.status === \"error\") {\n            const timestamp = Date.now();\n            const id = uuid();\n            yield put(datasetActions.Actions.error(resp.dataset, resp.msg, timestamp, id));\n        }\n    } catch (e) {\n        const timestamp = Date.now();\n        const id = uuid();\n        yield put(datasetActions.Actions.error(action.payload.dataset.id, `Error loading dataset: ${e.toString()}`, timestamp, id));\n    }\n}\n\nexport function* deleteDatasetSaga(action: ReturnType<typeof datasetActions.Actions.delete>) {\n    try {\n        yield call(deleteDataset, action.payload.dataset);\n    } catch (e) {\n        const timestamp = Date.now();\n        const id = uuid();\n        yield put(datasetActions.Actions.error(action.payload.dataset, `Error closing dataset: ${e.toString()}`, timestamp, id));\n    }\n}\n\nexport function* doOpenDataset(fullPath: string) {\n    const config: ConfigState = yield select((state: RootReducer) => state.config);\n    let prefillParams = config.lastOpened[fullPath];\n    if (!prefillParams || true) {\n        try {\n            yield put(datasetActions.Actions.detect(fullPath));\n            const detectResult: DetectDatasetResponse = yield call(detectDataset, fullPath);\n            if (detectResult.status === \"ok\") {\n                prefillParams = detectResult.datasetParams;\n                yield put(datasetActions.Actions.detected(fullPath, detectResult.datasetParams));\n            } else {\n                yield put(datasetActions.Actions.detectFailed(fullPath));\n            }\n        } catch (e) {\n            yield put(datasetActions.Actions.detectFailed(fullPath));\n        }\n    }\n    yield put(datasetActions.Actions.open(fullPath, prefillParams));\n}\n\nexport function* openDatasetSagaFullPath(action: ReturnType<typeof browserActions.Actions.selectFullPath>) {\n    const fullPath = action.payload.path;\n    yield call(doOpenDataset, fullPath);\n}\n\nexport function* openDatasetSaga(action: ReturnType<typeof browserActions.Actions.select>) {\n    // TODO: ask the server what it thinks about this file\n    const config: ConfigState = yield select((state: RootReducer) => state.config);\n    const fullPath = joinPaths(config, action.payload.path, action.payload.name);\n    yield call(doOpenDataset, fullPath);\n}\n\nexport function* datasetRootSaga() {\n    yield takeEvery(datasetActions.ActionTypes.CREATE, createDatasetSaga);\n    yield takeEvery(datasetActions.ActionTypes.DELETE, deleteDatasetSaga);\n    yield takeEvery(browserActions.ActionTypes.SELECT, openDatasetSaga);\n    yield takeEvery(browserActions.ActionTypes.SELECT_FULL_PATH, openDatasetSagaFullPath);\n}","import { all } from 'redux-saga/effects';\nimport { analysisRootSaga } from './analysis/sagas';\nimport { directoryListingSaga } from './browser/sagas';\nimport { webSocketSaga } from './channel/sagas';\nimport { clusterConnectionSaga } from './cluster/sagas';\nimport { configRootSaga } from './config/sagas';\nimport { datasetRootSaga } from './dataset/sagas';\n\nexport function* rootSaga() {\n    yield all([\n        configRootSaga(),\n        webSocketSaga(),\n        analysisRootSaga(),\n        datasetRootSaga(),\n        clusterConnectionSaga(),\n        directoryListingSaga(),\n    ]);\n}","import { AllActions } from \"../actions\";\nimport * as datasetActions from \"../dataset/actions\";\nimport { ById, filterWithPred, insertById, updateById } from \"../helpers/reducerHelpers\";\nimport * as analysisActions from \"./actions\";\nimport { AnalysisState, JobList } from \"./types\";\n\nexport type AnalysisReducerState = ById<AnalysisState>;\n\nconst initialAnalysisState: AnalysisReducerState = {\n    byId: {},\n    ids: [],\n}\n\nexport function analysisReducer(state = initialAnalysisState, action: AllActions): AnalysisReducerState {\n    switch (action.type) {\n        case analysisActions.ActionTypes.CREATED: {\n            return insertById(state, action.payload.analysis.id, action.payload.analysis);\n        }\n        case analysisActions.ActionTypes.UPDATE_PARAMETERS: {\n            const key = action.payload.kind === \"FRAME\" ? \"frameDetails\" : \"resultDetails\";\n            const details = state.byId[action.payload.id][key];\n            const newDetails = Object.assign({}, details, {\n                parameters: Object.assign({}, details.parameters, action.payload.parameters),\n            })\n            // TODO: convince typescript that `[key]: newDetails` is a better way...\n            if (action.payload.kind === \"FRAME\") {\n                return updateById(state, action.payload.id, {\n                    frameDetails: newDetails,\n                });\n            } else {\n                return updateById(state, action.payload.id, {\n                    resultDetails: newDetails,\n                });\n            }\n        }\n        case analysisActions.ActionTypes.RUNNING: {\n            const { kind, id } = action.payload;\n            const analysis = state.byId[id];\n            const oldJob = analysis.jobs[kind];\n            let jobHistory = analysis.jobHistory;\n            if (oldJob !== undefined) {\n                // TODO: length restriction?\n                jobHistory = Object.assign({}, jobHistory, {\n                    [kind]: [oldJob, ...jobHistory[kind]],\n                });\n            }\n            const newJobs: JobList = Object.assign({}, analysis.jobs, {\n                [action.payload.kind]: action.payload.job,\n            });\n            return updateById(state, action.payload.id, { jobs: newJobs, jobHistory })\n        }\n        case analysisActions.ActionTypes.REMOVED: {\n            return filterWithPred(state, (r: AnalysisState) => r.id !== action.payload.id);\n        }\n        case analysisActions.ActionTypes.SET_FRAMEVIEW_MODE: {\n            const newFrameDetails = Object.assign({}, state.byId[action.payload.id].frameDetails, {\n                type: action.payload.mode,\n                parameters: action.payload.initialParams,\n            });\n            return updateById(state, action.payload.id, { frameDetails: newFrameDetails });\n        }\n        case datasetActions.ActionTypes.DELETE: {\n            return filterWithPred(state, (r: AnalysisState) => r.dataset !== action.payload.dataset);\n        }\n    }\n    return state;\n}","import { AllActions } from \"../actions\";\nimport * as configActions from '../config/actions';\nimport { DirectoryListingDetails, FSPlace } from \"../messages\";\nimport * as browserActions from './actions';\nimport { DirectoryBrowserState } from \"./types\";\n\nconst initialBrowserState: DirectoryBrowserState = {\n    isOpen: false,\n    isLoading: true,\n    path: \"/\",\n    drives: [],\n    places: {},\n    files: [] as DirectoryListingDetails[],\n    dirs: [] as DirectoryListingDetails[],\n}\n\nexport function directoryBrowserReducer(state: DirectoryBrowserState = initialBrowserState, action: AllActions): DirectoryBrowserState {\n    switch (action.type) {\n        case configActions.ActionTypes.FETCHED: {\n            return Object.assign({}, state, {\n                path: action.payload.config.cwd,\n            })\n            break;\n        }\n        case browserActions.ActionTypes.OPEN: {\n            return Object.assign({}, state, {\n                isOpen: true,\n            })\n            break;\n        }\n        case browserActions.ActionTypes.CANCEL: {\n            return Object.assign({}, state, {\n                isOpen: false,\n            })\n            break;\n        }\n        case browserActions.ActionTypes.LIST_DIRECTORY: {\n            return Object.assign({}, state, {\n                isLoading: true,\n            })\n            break;\n        }\n        case browserActions.ActionTypes.DIRECTORY_LISTING: {\n            const places = action.payload.places.reduce((acc, place: FSPlace) => {\n                return Object.assign({}, acc, {\n                    [place.key]: place,\n                })\n            }, {});\n            return Object.assign({}, state, {\n                isLoading: false,\n                path: action.payload.path,\n                files: action.payload.files,\n                dirs: action.payload.dirs,\n                drives: action.payload.drives,\n                places,\n            })\n            break;\n        }\n        case browserActions.ActionTypes.SELECT_FULL_PATH:\n        case browserActions.ActionTypes.SELECT: {\n            return Object.assign({}, state, {\n                isLoading: false,\n                isOpen: false,\n            });\n        }\n    }\n    return state;\n}","import { AllActions } from \"../actions\";\nimport * as channelActions from './actions';\n\nexport interface ChannelStatusReducer {\n    status: ChannelStatusCodes,\n}\n\nexport enum ChannelStatusCodes {\n    CONNECTING = \"connecting\",\n    CONNECTED = \"connected\",\n    READY = \"ready\",\n    WAITING = \"waiting\",\n}\n\nconst initialChannelState: ChannelStatusReducer = {\n    status: ChannelStatusCodes.WAITING,\n}\n\nexport function channelStatusReducer(state = initialChannelState, action: AllActions): ChannelStatusReducer {\n    switch (action.type) {\n        case channelActions.ActionTypes.OPEN: {\n            return { status: ChannelStatusCodes.CONNECTED };\n        }\n        case channelActions.ActionTypes.INITIAL_STATE: {\n            return { status: ChannelStatusCodes.READY };\n        }\n        case channelActions.ActionTypes.CLOSE: {\n            return { status: ChannelStatusCodes.WAITING };\n        }\n    }\n    return state;\n}","import { AllActions } from \"../actions\";\nimport { ConnectRequestParams } from \"../messages\";\nimport * as clusterActions from './actions';\n\nexport type ClusterConnectionState = {\n    status: \"connected\",\n    params: ConnectRequestParams,\n} | {\n    status: \"disconnected\",\n} | {\n    status: \"unknown\",\n}\n\nconst initialClusterConnectionState: ClusterConnectionState = {\n    status: \"unknown\"\n}\n\nexport function clusterConnectionReducer(state = initialClusterConnectionState, action: AllActions): ClusterConnectionState {\n    switch (action.type) {\n        case clusterActions.ActionTypes.NOT_CONNECTED: {\n            return {\n                status: \"disconnected\"\n            };\n        }\n        case clusterActions.ActionTypes.CONNECTED: {\n            return {\n                status: \"connected\",\n                params: action.payload.params,\n            }\n        }\n    }\n    return state;\n}","import { AllActions } from \"../actions\";\nimport * as browserActions from '../browser/actions';\nimport * as datasetActions from '../dataset/actions';\nimport { DatasetFormParams, MsgPartConfig } from \"../messages\";\nimport * as configActions from './actions';\nimport { makeUnique } from \"./helpers\";\n\nexport type ConfigState = MsgPartConfig & {\n    fileHistory: string[],\n    lastOpened: {\n        [path: string]: DatasetFormParams\n    }\n};\n\nconst initialConfigState: ConfigState = {\n    version: \"\",\n    revision: \"\",\n    localCores: 0,\n    cwd: \"/\",\n    separator: \"/\",\n    lastOpened: {},\n    fileHistory: [],\n}\n\nexport function configReducer(state = initialConfigState, action: AllActions) {\n    switch (action.type) {\n        case configActions.ActionTypes.FETCHED: {\n            return action.payload.config;\n        }\n        case browserActions.ActionTypes.DIRECTORY_LISTING: {\n            return Object.assign({}, state, {\n                cwd: action.payload.path,\n            });\n        }\n        case datasetActions.ActionTypes.CREATE: {\n            const newLastOpened = Object.assign({}, state.lastOpened, { [action.payload.dataset.params.path]: action.payload.dataset.params });\n            const newFileHistory = makeUnique([\n                action.payload.dataset.params.path, ...state.fileHistory\n            ]).slice(0, 11);\n            return Object.assign({}, state, {\n                lastOpened: newLastOpened,\n                fileHistory: newFileHistory,\n            });\n        }\n    }\n    return state;\n}","import { AllActions } from \"../actions\";\nimport * as channelActions from '../channel/actions';\nimport { constructById, filterWithPred, insertById, updateById } from \"../helpers/reducerHelpers\";\nimport { DatasetState, DatasetStatus } from \"../messages\";\nimport * as datasetActions from './actions';\nimport { DatasetsState, OpenDatasetState } from \"./types\";\n\nconst initialDatasetState: DatasetsState = {\n    byId: {},\n    ids: [],\n};\n\nexport function datasetReducer(state = initialDatasetState, action: AllActions): DatasetsState {\n    switch (action.type) {\n        case channelActions.ActionTypes.INITIAL_STATE: {\n            // FIXME: without type annotation, missing attributes in reducer state are not detected\n            const datasets: DatasetState[] = action.payload.datasets.map(ds => ({\n                id: ds.id,\n                status: DatasetStatus.OPEN,\n                params: ds.params,\n                diagnostics: ds.diagnostics,\n            }));\n            return {\n                byId: constructById(datasets, ds => ds.id),\n                ids: datasets.map(ds => ds.id),\n            }\n        }\n        case datasetActions.ActionTypes.CREATE: {\n            const ds = { ...action.payload.dataset, status: DatasetStatus.OPENING };\n            return insertById(state, action.payload.dataset.id, ds);\n        }\n        case datasetActions.ActionTypes.CREATED: {\n            const ds = { ...action.payload.dataset, status: DatasetStatus.OPEN };\n            return updateById(state, action.payload.dataset.id, ds);\n        }\n        case datasetActions.ActionTypes.ERROR: {\n            return filterWithPred(state, (r: DatasetState) => r.id !== action.payload.dataset);\n        }\n        case datasetActions.ActionTypes.DELETE: {\n            return updateById(state, action.payload.dataset, { status: DatasetStatus.DELETING });\n        }\n        case datasetActions.ActionTypes.DELETED: {\n            return filterWithPred(state, (r: DatasetState) => r.id !== action.payload.dataset);\n        }\n    }\n    return state;\n}\n\nconst initialOpenDatasetState: OpenDatasetState = {\n    busy: false,\n    busyPath: \"\",\n    formVisible: false,\n    formPath: \"/\",\n    formInitialParams: undefined,\n}\n\nexport function openDatasetReducer(state = initialOpenDatasetState, action: AllActions): OpenDatasetState {\n    switch (action.type) {\n        case datasetActions.ActionTypes.OPEN: {\n            return {\n                ...state,\n                formVisible: true,\n                formPath: action.payload.path,\n                formInitialParams: action.payload.initialParams,\n            };\n        }\n        case datasetActions.ActionTypes.CANCEL_OPEN: {\n            return {\n                ...state,\n                formVisible: false,\n            }\n        }\n        case datasetActions.ActionTypes.CREATE: {\n            return {\n                ...state,\n                formVisible: false,\n            }\n        }\n        case datasetActions.ActionTypes.DETECT: {\n            return {\n                ...state,\n                busyPath: action.payload.path,\n                busy: true,\n            }\n        }\n        case datasetActions.ActionTypes.DETECTED:\n        case datasetActions.ActionTypes.DETECT_FAILED: {\n            return {\n                ...state,\n                busyPath: \"\",\n                busy: false,\n            }\n        }\n    }\n    return state;\n}","import { AllActions } from \"../actions\";\nimport * as analysisActions from '../analysis/actions';\nimport * as browserActions from '../browser/actions';\nimport * as channelActions from '../channel/actions';\nimport * as datasetActions from '../dataset/actions';\nimport { ById, filterWithPred, insertById } from \"../helpers/reducerHelpers\";\nimport * as errorActions from './actions';\n\nexport interface ErrorMessage {\n    id: string,\n    msg: string,\n    timestamp: number,\n}\n\nexport type ErrorState = ById<ErrorMessage>;\n\nconst initialErrorState: ErrorState = {\n    byId: {},\n    ids: [],\n};\n\nexport function errorReducer(state = initialErrorState, action: AllActions): ErrorState {\n    switch (action.type) {\n        case browserActions.ActionTypes.ERROR:\n        case datasetActions.ActionTypes.ERROR:\n        case channelActions.ActionTypes.ERROR:\n        case analysisActions.ActionTypes.ERROR:\n        case channelActions.ActionTypes.JOB_ERROR: {\n            return insertById(state, action.payload.id, {\n                id: action.payload.id,\n                msg: action.payload.msg,\n                timestamp: action.payload.timestamp,\n            });\n        }\n        case channelActions.ActionTypes.OPEN: {\n            return initialErrorState;\n        }\n        case errorActions.ActionTypes.DISMISS: {\n            return filterWithPred(state, (r: ErrorMessage) => r.id !== action.payload.id);\n        }\n    }\n    return state;\n}","import { AllActions } from \"../actions\";\nimport * as analysisActions from '../analysis/actions';\nimport * as channelActions from '../channel/actions';\nimport { ById, insertById, updateById } from \"../helpers/reducerHelpers\";\nimport { JobResultType, JobState } from \"./types\";\n\nexport type JobReducerState = ById<JobState>;\n\nconst initialJobState: JobReducerState = {\n    byId: {},\n    ids: [],\n};\n\nexport function jobReducer(state = initialJobState, action: AllActions) {\n    switch (action.type) {\n        case analysisActions.ActionTypes.RUNNING: {\n            // in case there is no job record yet for the job id, \n            const currentJob = state.byId[action.payload.job];\n            if (currentJob === undefined) {\n                return insertById(\n                    state,\n                    action.payload.job,\n                    {\n                        id: action.payload.job,\n                        results: [] as JobResultType[],\n                        running: \"CREATING\",\n                        status: \"CREATING\",\n                    }\n                )\n            } else {\n                return state;\n            }\n        }\n        case channelActions.ActionTypes.START_JOB: {\n            return insertById(\n                state,\n                action.payload.job,\n                {\n                    id: action.payload.job,\n                    dataset: action.payload.dataset,\n                    results: [] as JobResultType[],\n                    running: \"RUNNING\",\n                    status: \"IN_PROGRESS\",\n                    startTimestamp: action.payload.timestamp,\n                }\n            )\n        }\n        case channelActions.ActionTypes.TASK_RESULT: {\n            return updateById(\n                state,\n                action.payload.job,\n                {\n                    results: action.payload.results,\n                }\n            );\n        }\n        case channelActions.ActionTypes.FINISH_JOB: {\n            return updateById(\n                state,\n                action.payload.job,\n                {\n                    results: action.payload.results,\n                    running: \"DONE\",\n                    status: \"SUCCESS\",\n                    endTimestamp: action.payload.timestamp,\n                }\n            );\n        }\n        case channelActions.ActionTypes.JOB_ERROR: {\n            return updateById(\n                state,\n                action.payload.job,\n                {\n                    running: \"DONE\",\n                    status: \"ERROR\",\n                    endTimestamp: action.payload.timestamp,\n                }\n            )\n        }\n    }\n    return state;\n}","import { combineReducers } from \"redux\";\nimport { analysisReducer } from \"./analysis/reducers\";\nimport { directoryBrowserReducer } from './browser/reducers';\nimport { channelStatusReducer } from \"./channel/reducers\";\nimport { clusterConnectionReducer } from \"./cluster/reducers\";\nimport { configReducer } from \"./config/reducers\";\nimport { datasetReducer, openDatasetReducer } from \"./dataset/reducers\";\nimport { errorReducer } from \"./errors/reducers\";\nimport { jobReducer } from \"./job/reducers\";\n\nexport const rootReducer = combineReducers({\n    analyses: analysisReducer,\n    channelStatus: channelStatusReducer,\n    clusterConnection: clusterConnectionReducer,\n    datasets: datasetReducer,\n    openDataset: openDatasetReducer,\n    jobs: jobReducer,\n    errors: errorReducer,\n    config: configReducer,\n    browser: directoryBrowserReducer,\n})\n\nexport type RootReducer = ReturnType<typeof rootReducer>;","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { applyMiddleware, compose, createStore } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\nimport { rootSaga } from './sagas';\nimport { rootReducer } from './store';\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst composeEnhancers = (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(rootReducer, composeEnhancers(\n    applyMiddleware(\n        sagaMiddleware,\n    )\n));\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n  document.getElementById('root') as HTMLElement\n);\nregisterServiceWorker();\n\nsagaMiddleware.run(rootSaga);"],"sourceRoot":""}