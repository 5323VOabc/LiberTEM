{"version":3,"sources":["job/components/ResultImage.module.css","images/LiberTEM logo-medium.png","cluster/actions.ts","About.tsx","helpers/actionHelpers.ts","helpers/index.ts","messages.ts","browser/actions.ts","cluster/components/LocalConnectionForm.tsx","cluster/components/TCPConnectionForm.tsx","cluster/components/ClusterConnectionForm.tsx","channel/components/ChannelConnecting.tsx","channel/components/ChannelStatus.tsx","browser/components/FileBrowserEntry.tsx","browser/components/FileBrowserHeader.tsx","browser/components/FileEntry.tsx","browser/components/FolderEntry.tsx","browser/components/PathDropDownItem.tsx","browser/components/PathInput.tsx","browser/components/RecentFiles.tsx","browser/components/PathBar.tsx","browser/components/FileBrowser.tsx","job/types.ts","browser/components/BrowserWrapper.tsx","widgets/BusySpinner.tsx","widgets/BusyWrapper.tsx","widgets/HandleParent.tsx","job/components/ResultImage.tsx","job/components/Result.tsx","job/components/Selectors.tsx","job/components/ResultList.tsx","widgets/constraints.ts","widgets/styles.ts","widgets/Disk.tsx","widgets/kbdHandler.ts","widgets/DraggableHandle.tsx","analysis/actions.ts","analysis/components/AnalysisLayoutTwoCol.tsx","analysis/components/FramePicker.tsx","analysis/components/ModeSelector.tsx","analysis/components/SumFrames.tsx","analysis/components/DefaultFrameView.tsx","analysis/components/Toolbar.tsx","analysis/helpers.ts","analysis/components/CenterOfMassAnalysis.tsx","analysis/components/DiskMaskAnalysis.tsx","analysis/components/PointSelectionAnalysis.tsx","helpers/svg.ts","widgets/Ring.tsx","analysis/components/RadialFourierAnalysis.tsx","analysis/components/RingMaskAnalysis.tsx","analysis/components/Analysis.tsx","analysis/components/AnalysisList.tsx","helpers/reducerHelpers.ts","analysis/types.ts","dataset/actions.ts","analysis/components/AnalysisSelect.tsx","dataset/components/AddAnalysis.tsx","dataset/components/DatasetParams.tsx","dataset/components/DatasetInfo.tsx","dataset/components/DatasetToolbar.tsx","dataset/components/Dataset.tsx","dataset/helpers.ts","dataset/components/BLOParamsForm.tsx","errors/actions.ts","dataset/components/DatasetTypeSelect.tsx","dataset/components/EMPADParamsForm.tsx","dataset/components/FRMS6ParamsForm.tsx","dataset/components/HDF5ParamsForm.tsx","dataset/components/HDFSParamsForm.tsx","dataset/components/K2ISParamsForm.tsx","dataset/components/MIBParamsForm.tsx","dataset/components/RawFileParamsForm.tsx","dataset/components/SERParamsForm.tsx","dataset/components/DatasetOpen.tsx","dataset/components/DatasetOpenSpinner.tsx","dataset/components/DatasetList.tsx","errors/components/Error.tsx","errors/components/ErrorList.tsx","App.tsx","registerServiceWorker.ts","job/actions.ts","job/api.ts","analysis/sagas.ts","config/helpers.ts","browser/api.ts","channel/actions.ts","browser/sagas.ts","channel/messages.ts","channel/sagas.ts","cluster/api.ts","config/actions.ts","cluster/sagas.ts","config/api.ts","config/sagas.ts","dataset/api.ts","dataset/sagas.ts","sagas.ts","analysis/reducers.ts","browser/reducers.ts","channel/reducers.ts","cluster/reducers.ts","config/reducers.ts","dataset/reducers.ts","errors/reducers.ts","job/reducers.ts","store.ts","index.tsx"],"names":["module","exports","default","fallback","__webpack_require__","p","ActionTypes","connect","state","version","config","revision","_ref","react","Header","as","slice","List","Item","Icon","name","Content","href","src","alt","createAction","type","payload","meta","undefined","Actions","notConnected","NOT_CONNECTED","params","CONNECT","connected","CONNECTED","assertNotReached","message","Error","defaultDebounce","fn","delay","arguments","length","_","maxWait","getEnumValues","e","Object","keys","ClusterTypes","DatasetTypes","DatasetStatus","AnalysisTypes","ClusterTypeMetadata","_ClusterTypeMetadata","defineProperty","LOCAL","label","TCP","helpText","withFormik","mapPropsToValues","ownProps","numWorkers","localCores","handleSubmit","values","formikBag","onSubmit","props","objectSpread","touched","errors","isSubmitting","dirty","handleChange","handleBlur","handleReset","Form","Field","htmlFor","value","onChange","onBlur","Button","primary","disabled","address","mapDispatchToProps","connectToCluster","clusterActions","clusterTypeOptions","map","t","text","ClusterConnectionForm","clusterType","setType","_this","setState","data","this","components_LocalConnectionForm","components_TCPConnectionForm","Dropdown","inline","options","Segment","renderForm","React","ChannelConnecting","msg","Message","icon","loading","messages","waiting","connecting","clusterMessages","channelStatus","clusterConnection","haveConfig","children","status","components_ChannelConnecting","components_ClusterConnectionForm","list","path","LIST_DIRECTORY","dirListing","dirs","files","drives","places","DIRECTORY_LISTING","open","OPEN","cancel","CANCEL","select","SELECT","selectFullPath","SELECT_FULL_PATH","error","timestamp","id","ERROR","detectParams","DETECT_PARAMS","paramsDetected","PARAMS_DETECTED","TimeStamp","ts","date","Date","fmtDate","toLocaleDateString","fmtTime","toLocaleTimeString","title","concat","style","display","whiteSpace","width","marginRight","FileSize","_ref2","fmtSize","bytes","si","thresh","Math","abs","size","unit","units","u","toFixed","humanFileSize","textAlign","Cell","_ref3","overflow","textOverflow","FileBrowserEntry","onClick","_this$props","details","myStyle","cursor","tsStyles","paddingRight","flexGrow","FileBrowserEntry_Cell","FileBrowserEntry_FileSize","owner","FileBrowserEntry_TimeStamp","ctime","mtime","FileBrowserHeader","alignRight","paddingBottom","FileEntry","components_FileBrowserEntry","dispatch","browserActions","window","setTimeout","toString","objectWithoutProperties","newProps","initialPath","enableReinitialize","Input","autoComplete","lastOpened","fileHistory","separator","recentFiles","filter","item","floating","Menu","content","option","idx","key","refresh","currentPath","handleInputChange","goUp","driveOptions","placeOptions","components_RecentFiles","components_PathDropDownItem","components_PathInput","listRef","scrollToTop","current","scrollToItem","sortByKey","array","getKey","sort","a","b","x","y","JobRunning","JobStatus","browser","isLoading","getSortKey","toLowerCase","dirEntries","dir","components_FolderEntry","fileEntries","f","components_FileEntry","entries","index_esm","overflowY","ref","height","itemCount","itemSize","index","Group","components_PathBar","components_FileBrowserHeader","isOpen","components_FileBrowser","labelPosition","BusySpinner","margin","padding","position","bottom","right","color","opacity","BusyWrapper","busy","widgets_BusySpinner","HandleParent","_React$Component","_getPrototypeOf2","classCallCheck","_len","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","currentHandle","handleDragStart","h","handleDrop","handleMouseMove","externalMouseMove","handleMouseLeave","externalLeave","handleMouseUp","externalMouseUp","inherits","createClass","onMouseMove","onMouseLeave","onMouseUp","onKeyDown","onKeyboardEvent","outline","tabIndex","fill","renderHandles","_this2","_this$props2","handles","i","elem","ResultImage","job","result","results","className","styles","viewBox","xlinkHref","imageURL","ResultWrapper","styled","svg","_templateObject","Result","extraHandles","toConsumableArray","widgets_HandleParent","extraWidgets","running","DONE","widgets_BusyWrapper","components_ResultImage","Selectors","div","Selectors_templateObject","ResultList","selectedChannel","selectChannel","getJob","currentJob","analysis","jobsById","jobIndex","history","jobHistory","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","tmpJob","err","return","selectors","dataset","subtitle","currentResult","border","components_Result","dt","endTimestamp","startTimestamp","components_Selectors","ResultList_ResultImageSelector","selectedImg","ResultImageSelector","availableImages","description","analyses","byId","jobId","jobs","ds","datasets","inRectConstraint","max","min","cbToRadius","cx","cy","cb","dx","dy","sqrt","dist","keepOnCY","riConstraint","outerPos","otherX","roConstraints","innerPos","defaultMaskStyles","imageWidth","fillOpacity","strokeOpacity","stroke","strokeWidth","Disk","imageHeight","r","handleKeyEvent","update","delta","shiftKey","preventDefault","StyledCircle","circle","DraggableHandle_templateObject","Cross","_templateObject2","FocusGroup","g","_templateObject3","Handle","scale","withCross","focusRef","transform","crossSpec","cross","d","assign","relativeCoords","parent","ownerSVGElement","inWidthAttr","getAttribute","inWidth","getBoundingClientRect","getScalingFactor","parentPos","pageX","left","pageXOffset","pageY","top","pageYOffset","DraggableHandle","posRef","dragging","drag","move","stopDrag","applyConstraint","constraint","startDrag","parentOnDragStart","assertThisInitialized","focus","onDragMove","constrained","parentOnDrop","_this$state","handleKeyDown","newCoords","visibility","DraggableHandle_Handle","onMouseDown","_this$state$drag","renderCommon","renderDragging","create","analysisType","CREATE","created","CREATED","prepareRun","PREPARE_RUN","run","parameters","RUN","RUNNING","remove","REMOVE","removed","REMOVED","AnalysisLayoutTwoCol","toolbar","attached","Grid","columns","Row","Column","useFramePicker","enabled","scanWidth","scanHeight","analysisId","_React$useState","useState","round","_React$useState2","slicedToArray","setCx","_React$useState3","_React$useState4","setCy","useEffect","PICK_FRAME","onPickChange","pickX","pickY","newX","newY","coords","onDragStart","onDrop","react_default","createElement","widgets_DraggableHandle","ModeSelector","modes","currentMode","onModeChange","useSumFrames","SUM_FRAMES","useDefaultFrameView","availableModes","_useState","_useState2","frameMode","setMode","frameModeSelector","components_ModeSelector","_useFramePicker","pickCoords","pickHandles","frameViewTitle","jobIdxsToInclude","filteredJobs","indexOf","reduce","prevValue","getAnalysisStatus","busyIdxs","handleRemove","analysisActions","onApply","applyIconProps","shape","_shape","minLength","_useState3","_useState4","_useState5","_useState6","setR","rHandle","handleCenterChange","newCx","newCy","handleRChange","frameViewWidgets","widgets_Disk","_useDefaultFrameView","resultHandles","components_Toolbar","CENTER_OF_MASS","components_AnalysisLayoutTwoCol","components_ResultList","DraggableHandle_DraggableHandle","APPLY_DISK_MASK","APPLY_POINT_SELECTOR","getPathArc","center","start","end","radius","degree","points","push","getLocationFromAngle","clockWise","join","getCirclePath","radian","PI","cos","sin","Ring","ri","pathSpec","ro","fillRule","setRi","_useState7","_useState8","setRo","_useState9","nBins","_useState11","maxOrder","riHandle","roHandle","handleRIChange","handleROChange","widgets_Ring","RADIAL_FOURIER","n_bins","max_order","APPLY_RING_MASK","mainAnalysisType","components_RingMaskAnalysis","components_DiskMaskAnalysis","components_CenterOfMassAnalysis","components_PointSelectionAnalysis","components_RadialFourierAnalysis","AnalysisList","ids","Analysis","updateById","partialRecord","newObj","newById","insertById","record","filterWithPred","pred","acc","AnalysisMetadata","_AnalysisMetadata","long","short","showInUI","getMetadata","analysisTypeOptions","AnalysisSelect","labeled","button","handleAddAnalysis","components_AnalysisSelect","renderParams","Table","DatasetParams","HeaderCell","Body","DiagElem","DatasetInfo_DiagElems","diagnostics","renderValue","DiagElems","DatasetInfo_DiagElem","DatasetInfo","components_DatasetParams","initialParams","cancelOpen","CANCEL_OPEN","delete","DELETE","deleted","DELETED","detect","DETECT","detected","DETECTED","detectFailed","DETECT_FAILED","handleRemoveDataset","datasetActions","DatasetContainer","_msg","OPENING","DELETING","dividing","marginTop","marginBottom","horizontal","Modal","trigger","link","Popup","components_DatasetInfo","flexShrink","components_DatasetToolbar","components_AnalysisList","components_AddAnalysis","parseNumList","nums","split","part","getInitial","otherwise","initial","tileshape","_formikBag$props","BLO","onCancel","datasetTypeOptions","DatasetTypeSelect","currentType","scan_size","EMPAD","FRMS6","ds_path","HDF5","HDFS","K2IS","MIB","enable_direct","detector_size","dtype","RAW","checked","SER","DatasetOpen","datasetType","setDatasetType","formInitial","formPath","createDataset","form","components_DatasetTypeSelect","components_HDF5ParamsForm","components_HDFSParamsForm","components_RawFileParamsForm","MIBParamsForm","BLOParamsForm","K2ISParamsForm","components_SERParamsForm","components_FRMS6ParamsForm","EMPADParamsForm","formVisible","openDataset","formInitialParams","uuid","busyPath","DatasetList","dsId","Dataset","components_DatasetOpenSpinner","components_DatasetOpen","components_BrowserWrapper","DISMISS","dismiss","errorActions","negative","onDismiss","clusterConnected","channelConnected","latestErrors","showModal","components_Error","App","Container","logo","alignSelf","src_About","components_ErrorList","components_ChannelStatus","components_DatasetList","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","startJob","datasetId","fetch","body","JSON","stringify","credentials","method","json","cancelJob","createAnalysisSaga","analysisSidecar","doRemoveAnalysisSaga","analysisRootSaga","selectDataset","selectAnalysis","selectJob","action","sidecarTask","regenerator_default","wrap","_context","prev","sent","fork","put","take","t0","now","stop","_marked","runOrParamsChannel","_action$payload","oldJobId","_context3","actionChannel","buffers","sliding","abrupt","jobActions","_marked3","_context4","finish","_marked4","_context5","takeEvery","_marked5","CONFIG_KEY","joinPaths","parts","replace","RegExp","trim","mergeLocalStorage","serverConfig","localSettings","localStorage","getItem","localSettingsParsed","parse","defaultConfig","setLocalStorage","setItem","getDirectoryListing","url","directoryListingSaga","fetchOnRequest","fetchDirectoryListing","fetchDirectoryListOnOpen","sagas_marked","newPath","_context2","sagas_marked2","browserState","alternative","_browserState","_timestamp","_id","home","sagas_marked3","cwd","sagas_marked4","MessageTypes","initialState","INITIAL_STATE","jobStarted","JOB_STARTED","finishJob","FINISH_JOB","taskResult","TASK_RESULT","jobError","JOB_ERROR","close","CLOSE","createMessage","messageType","attribs","Messages","followup","binary","objectURL","BINARY","deleteDataset","DELETE_DATASET","webSocketSaga","actionsFromChannel","handleBinaryParts","handleTaskResult","handleFinishJob","createWebSocketChannel","eventChannel","emit","onMessage","Blob","channelMessages","URL","createObjectURL","parsed","onOpen","onClose","END","onError","ws","WebSocket","port","addEventListener","removeEventListener","socketChannel","channelActions","channel_sagas_marked","channel_sagas_marked2","numParts","binMsg","channel_sagas_marked3","images","numMessages","descriptions","channel_sagas_marked4","sagas_marked5","connection","checkClusterConnection","connectSaga","putClusterStatus","trackClusterConnection","clusterConnectionSaga","conn","cluster_sagas_marked","cluster_sagas_marked2","cluster_sagas_marked3","all","cluster_sagas_marked4","FETCH","fetched","FETCHED","fetchFailed","FETCH_FAILED","getConfig","getConfigOnReconnect","getConfigSaga","updateLocalStorageConfig","firstConfigFetch","configRootSaga","config_sagas_marked","configResponse","mergedConfig","configActions","removeItem","config_sagas_marked2","config_sagas_marked3","config_sagas_marked4","config_sagas_marked5","detectDataset","createDatasetSaga","deleteDatasetSaga","doOpenDataset","openDatasetSagaFullPath","openDatasetSaga","datasetRootSaga","resp","dataset_sagas_marked","dataset_sagas_marked2","fullPath","prefillParams","detectResult","datasetParams","dataset_sagas_marked3","dataset_sagas_marked4","dataset_sagas_marked5","_context6","_marked6","rootSaga","src_sagas_marked","initialAnalysisState","ChannelStatusCodes","initialBrowserState","initialChannelState","WAITING","initialClusterConnectionState","initialConfigState","initialDatasetState","initialOpenDatasetState","initialErrorState","initialJobState","rootReducer","combineReducers","oldJob","hist","newJobs","READY","items","CREATING","IN_PROGRESS","SUCCESS","_action$payload2","inp","newLastOpened","newFileHistory","curr","place","sagaMiddleware","createSagaMiddleware","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","ReactDOM","es","src_App","document","getElementById","process","origin","response","headers","get","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.0bbd92d2.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"default\":\"ResultImage_default__3UGMF\",\"fallback\":\"ResultImage_fallback__7NTHF\"};","module.exports = __webpack_public_path__ + \"static/media/LiberTEM logo-medium.7999e0dc.png\";","import { ActionsUnion, createAction } from '../helpers/actionHelpers';\nimport { ConnectRequestParams } from '../messages';\n\nexport enum ActionTypes {\n    NOT_CONNECTED = 'CLUSTER_NOT_CONNECTED',\n    CONNECT = 'CLUSTER_CONNECT',\n    CONNECTED = 'CLUSTER_CONNECTED',\n}\n\nexport const Actions = {\n    notConnected: () => createAction(ActionTypes.NOT_CONNECTED),\n    connect: (params: ConnectRequestParams) => createAction(ActionTypes.CONNECT, { params }),\n    connected: (params: ConnectRequestParams) => createAction(ActionTypes.CONNECTED, { params }),\n}\n\nexport type Actions = ActionsUnion<typeof Actions>;\n","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Header, List } from \"semantic-ui-react\";\nimport { RootReducer } from \"./store\";\n\nconst mapStateToProps = (state: RootReducer) => {\n    return {\n        version: state.config.version,\n        revision: state.config.revision,\n    }\n}\n\ntype MergedProps = ReturnType<typeof mapStateToProps>;\n\nconst About: React.SFC<MergedProps> = ({ version, revision }) => {\n    return (\n        <>\n            <Header as=\"h3\">This is LiberTEM version {version} (revision {revision.slice(0, 8)})</Header>\n            <List>\n                <List.Item>\n                    <List.Icon name=\"github\" />\n                    <List.Content>\n                        Find us on <a href=\"https://github.com/LiberTEM/LiberTEM\">GitHub</a>\n                    </List.Content>\n                </List.Item>\n                <List.Item>\n                    <List.Icon name=\"bug\" />\n                    <List.Content>\n                        Found a bug? Got a feature request? Please <a href=\"https://github.com/LiberTEM/LiberTEM/issues/new\">open an issue!</a>\n                    </List.Content>\n                </List.Item>\n                <List.Item>\n                    <List.Icon name=\"legal\" />\n                    <List.Content>\n                        LiberTEM is licensed under the <a href=\"https://github.com/LiberTEM/LiberTEM/blob/master/LICENSE\">GNU General Public License v3.0</a>\n                    </List.Content>\n                </List.Item>\n                <List.Item>\n                    <List.Icon name=\"book\" />\n                    <List.Content>\n                        Read <a href=\"https://libertem.github.io/LiberTEM/\">the documentation</a>\n                    </List.Content>\n                </List.Item>\n                <List.Item>\n                    <List.Icon name=\"user\" />\n                    <List.Content>\n                        Read <a href=\"https://libertem.github.io/LiberTEM/acknowledgments.html\">the acknowledgments</a>\n                    </List.Content>\n                </List.Item>\n                <List.Item>\n                    <List.Icon name=\"gitter\" />\n                    <List.Content>\n                        Join our <a href=\"https://gitter.im/LiberTEM/Lobby\">chat on gitter!</a>\n                    </List.Content>\n                </List.Item>\n                <List.Item>\n                    <List.Icon name=\"linkify\" />\n                    <List.Content>\n                    <a href=\"https://doi.org/10.5281/zenodo.1478763\"><img src=\"https://zenodo.org/badge/DOI/10.5281/zenodo.1478763.svg\" alt=\"DOI\"/></a>\n                    </List.Content>\n                </List.Item>\n            </List>\n        </>\n    );\n}\n\nexport default connect(mapStateToProps)(About);","import { ActionCreatorsMapObject } from \"redux\";\n\nexport interface Action<T extends string> {\n    type: T\n}\n\nexport interface ActionWithPayload<T extends string, P> extends Action<T> {\n    payload: P\n}\n\nexport interface ActionWithMeta<T extends string, P, M> extends ActionWithPayload<T, P> {\n    meta: M\n}\n\nexport function createAction<T extends string>(type: T): Action<T>\nexport function createAction<T extends string, P, M>(type: T, payload?: P): ActionWithPayload<T, P>\nexport function createAction<T extends string, P, M>(type: T, payload?: P, meta?: M): ActionWithMeta<T, P, M>\nexport function createAction<T extends string, P, M>(type: T, payload?: P, meta?: M) {\n    if (meta === undefined && payload === undefined) {\n        return { type };\n    } else if (meta === undefined) {\n        return { type, payload };\n    } else {\n        return { type, payload, meta }\n    }\n}\n\nexport type ActionsUnion<A extends ActionCreatorsMapObject> = ReturnType<A[keyof A]>","import * as _ from \"lodash\";\n\nexport function assertNotReached(message: string): never {\n    throw new Error(message);\n}\n\nexport function defaultDebounce<T extends (...args: any[]) => any>(fn: T, delay: number = 50) {\n    return _.debounce(fn, delay, { maxWait: delay });\n}\n\nexport function getEnumValues<E>(e: E): Array<keyof E> {\n    return Object.keys(e) as Array<keyof E>;\n}","\n/* \n * Common\n */\n\nexport interface FollowupPart {\n    numMessages: number,\n    descriptions: Array<{ title: string, desc: string }>,\n}\n\nexport interface MsgPartConfig {\n    version: string,\n    revision: string,\n    localCores: number,\n    cwd: string,\n    separator: string,\n}\n\nexport interface GetConfigResponse {\n    status: \"ok\",\n    config: MsgPartConfig,\n}\n\n/*\n * Connection\n */\n\nexport enum ClusterTypes {\n    LOCAL = \"LOCAL\",\n    TCP = \"TCP\",\n}\n\nexport const ClusterTypeMetadata: { [s: string]: { [s: string]: string } } = {\n    [ClusterTypes.LOCAL]: {\n        label: \"Create local cluster\",\n    },\n    [ClusterTypes.TCP]: {\n        label: \"Connect to cluster\",\n        helpText: \"can be either local or remote, connection via TCP\",\n    }\n}\n\nexport interface ConnectRequestLocalCluster {\n    type: ClusterTypes.LOCAL,\n    numWorkers?: number,\n}\n\nexport interface ConnectRequestTCP {\n    type: ClusterTypes.TCP,\n    address: string,\n}\n\nexport type ConnectRequestParams = ConnectRequestLocalCluster | ConnectRequestTCP\n\nexport interface ConnectRequest {\n    connection: ConnectRequestParams\n}\n\nexport type ConnectResponse = {\n    status: \"ok\",\n    connection: ConnectRequest,\n} | {\n    status: \"disconnected\",\n    connection: {},\n}\n\n/*\n * Dataset\n */\n\nexport enum DatasetTypes {\n    HDF5 = \"HDF5\",\n    HDFS = \"HDFS\",\n    RAW = \"RAW\",\n    MIB = \"MIB\",\n    BLO = \"BLO\",\n    K2IS = \"K2IS\",\n    SER = \"SER\",\n    FRMS6 = \"FRMS6\",\n    EMPAD = \"EMPAD\",\n}\n\nexport interface DatasetParamsCommon {\n    name: string,\n}\n\nexport type DatasetParamsHDFS = {\n    type: DatasetTypes.HDFS,\n    path: string,\n    tileshape: number[],\n} & DatasetParamsCommon;\n\nexport type DatasetParamsHDF5 = {\n    type: DatasetTypes.HDF5,\n    path: string,\n    ds_path: string,\n    tileshape: number[],\n} & DatasetParamsCommon\n\nexport type DatasetParamsRaw = {\n    type: DatasetTypes.RAW,\n    path: string,\n    dtype: string,\n    detector_size: number[],\n    enable_direct: boolean,\n    scan_size: number[],\n    tileshape: number[],\n} & DatasetParamsCommon\n\nexport type DatasetParamsMIB = {\n    type: DatasetTypes.MIB,\n    path: string,\n    scan_size: number[],\n    tileshape: number[],\n} & DatasetParamsCommon\n\nexport type DatasetParamsBLO = {\n    type: DatasetTypes.BLO,\n    path: string,\n    tileshape: number[],\n} & DatasetParamsCommon\n\nexport type DatasetParamsK2IS = {\n    type: DatasetTypes.K2IS,\n    path: string,\n} & DatasetParamsCommon\n\nexport type DatasetParamsSER = {\n    type: DatasetTypes.SER,\n    path: string,\n} & DatasetParamsCommon\n\nexport type DatasetParamsFRMS6 = {\n    type: DatasetTypes.FRMS6,\n    path: string,\n} & DatasetParamsCommon\n\nexport type DatasetParamsEMPAD = {\n    type: DatasetTypes.EMPAD,\n    path: string,\n    scan_size: number[],\n} & DatasetParamsCommon\n\nexport type DatasetFormParams = DatasetParamsHDF5 | DatasetParamsHDFS | DatasetParamsRaw | DatasetParamsMIB | DatasetParamsBLO | DatasetParamsK2IS | DatasetParamsSER | DatasetParamsFRMS6 | DatasetParamsEMPAD\n\nexport interface DatasetCreateParams {\n    id: string,\n    params: DatasetFormParams,\n}\n\nexport enum DatasetStatus {\n    OPEN = \"OPEN\",\n    OPENING = \"OPENING\",\n    DELETING = \"DELETING\",\n}\n\nexport interface DiagElemMsg {\n    name: string,\n    value: string | DiagElemMsg[],\n}\n\ninterface DatasetCommon {\n    id: string,\n    params: DatasetFormParams,\n}\n\nexport type DatasetOpening = DatasetCommon & {\n    status: DatasetStatus.OPENING,\n}\n\nexport type DatasetDeleting = DatasetCommon & {\n    status: DatasetStatus.DELETING,\n}\n\nexport type DatasetOpen = DatasetCommon & {\n    status: DatasetStatus.OPEN,\n    params: {\n        shape: number[],\n    }\n    diagnostics: DiagElemMsg[],\n}\n\nexport type Dataset = DatasetOpening | DatasetOpen | DatasetDeleting;\n\nexport interface OpenDatasetRequest {\n    dataset: DatasetCreateParams\n}\n\nexport interface OpenDatasetResponseOk {\n    status: \"ok\",\n    dataset: string,  // TODO: uuid type?\n    details: Dataset,\n}\n\nexport interface OpenDatasetResponseError {\n    status: \"error\",\n    dataset: string,\n    msg: string,\n}\n\nexport type OpenDatasetResponse = OpenDatasetResponseOk | OpenDatasetResponseError\n\nexport interface DeleteDatasetResponse {\n    status: \"ok\",\n    dataset: string,\n}\n\nexport interface DetectDatasetSuccessResponse {\n    status: \"ok\",\n    datasetParams: DatasetFormParams,\n}\n\nexport interface DetectDatasetErrorResponse {\n    status: \"error\",\n    path: string,\n    msg: string,\n}\n\nexport type DetectDatasetResponse = DetectDatasetSuccessResponse | DetectDatasetErrorResponse;\n\nexport type MsgPartInitialDataset = DatasetOpen\n\n// type alias to add client-side state to datasets\nexport type DatasetState = Dataset & {}\n\n/*\n * Job\n */\nexport interface MsgPartJob {\n    id: string,\n    dataset: string,\n}\n\nexport interface MaskDefRing {\n    shape: \"ring\",\n    cx: number,\n    cy: number,\n    ri: number,\n    ro: number\n}\n\nexport interface MaskDefDisk {\n    shape: \"disk\",\n    cx: number,\n    cy: number,\n    r: number,\n}\n\nexport interface PointDef {\n    shape: \"point\",\n    cx: number,\n    cy: number,\n}\n\n// TODO: shape doesn't really make sense here, needs to be restructured\nexport interface CenterOfMassParams {\n    shape: \"com\",\n    cx: number,\n    cy: number,\n    r: number,\n}\n\nexport interface PickFrameParams {\n    x: number,\n    y: number,\n}\n\nexport interface RadialFourierParams {\n    shape: \"radial_fourier\",\n    cx: number,\n    cy: number,\n    ri: number,\n    ro: number,\n    n_bins: number,\n    max_order: number\n}\n\nexport enum AnalysisTypes {\n    APPLY_RING_MASK = \"APPLY_RING_MASK\",\n    APPLY_DISK_MASK = \"APPLY_DISK_MASK\",\n    APPLY_POINT_SELECTOR = \"APPLY_POINT_SELECTOR\",\n    CENTER_OF_MASS = \"CENTER_OF_MASS\",\n    SUM_FRAMES = \"SUM_FRAMES\",\n    PICK_FRAME = \"PICK_FRAME\",\n    RADIAL_FOURIER = \"RADIAL_FOURIER\"\n}\n\nexport interface RingMaskDetails {\n    type: AnalysisTypes.APPLY_RING_MASK,\n    parameters: MaskDefRing,\n}\n\nexport interface DiskMaskDetails {\n    type: AnalysisTypes.APPLY_DISK_MASK,\n    parameters: MaskDefDisk,\n}\n\nexport interface PointDefDetails {\n    type: AnalysisTypes.APPLY_POINT_SELECTOR,\n    parameters: PointDef,\n}\n\nexport interface CenterOfMassDetails {\n    type: AnalysisTypes.CENTER_OF_MASS,\n    parameters: CenterOfMassParams,\n}\n\nexport interface SumFramesDetails {\n    type: AnalysisTypes.SUM_FRAMES,\n    parameters: {},\n}\n\nexport interface PickFrameDetails {\n    type: AnalysisTypes.PICK_FRAME,\n    parameters: PickFrameParams,\n}\n\nexport interface RadialFourierDetails {\n    type: AnalysisTypes.RADIAL_FOURIER,\n    parameters: RadialFourierParams,\n}\n\nexport type AnalysisParameters = MaskDefRing | MaskDefDisk | CenterOfMassParams | PointDef | PickFrameParams | RadialFourierParams;\nexport type AnalysisDetails = RingMaskDetails | DiskMaskDetails | CenterOfMassDetails | PointDefDetails | SumFramesDetails | PickFrameDetails | RadialFourierDetails;\n\nexport interface StartJobRequest {\n    job: {\n        dataset: string,\n        analysis: AnalysisDetails,\n    }\n}\n\nexport interface StartJobResponse {\n    status: \"ok\",\n    job: string,\n    details: MsgPartJob,\n}\n\nexport interface CancelJobResponse {\n    status: \"ok\",\n    job: string,\n}\n\n\n/*\n * fs browser \n */\n\n// some named place, i.e. \"Documents\", \"Home\", ...\nexport interface FSPlace {\n    title: string,\n    path: string,\n    key: string,\n}\n\nexport interface DirectoryListingDetails {\n    name: string,\n    size: number,\n    ctime: number,\n    mtime: number,\n    owner: string,\n}\n\nexport interface DirectoryListingResponseOK {\n    status: \"ok\",\n    path: string,\n    files: DirectoryListingDetails[],\n    dirs: DirectoryListingDetails[],\n    drives: string[],\n    places: FSPlace[],\n}\n\nexport interface DirectoryListingResponseError {\n    status: \"error\",\n    path: string,\n    code: string,\n    msg: string,\n    alternative?: string,\n}\n\nexport type DirectoryListingResponse = DirectoryListingResponseOK | DirectoryListingResponseError;\n","import { ActionsUnion, createAction } from \"../helpers/actionHelpers\";\nimport { DatasetFormParams, DirectoryListingDetails, FSPlace } from \"../messages\";\n\nexport enum ActionTypes {\n    LIST_DIRECTORY = 'BROWSER_LIST_DIRECTORY',\n    LIST_FULL_PATH = 'BROWSER_LIST_DIRECTORY_FULL',\n    DIRECTORY_LISTING = 'BROWSER_DIRECTORY_LISTING',\n    DETECT_PARAMS = 'BROWSER_DETECT_PARAMS',\n    PARAMS_DETECTED = 'BROWSER_PARAMS_DETECTED',\n    ERROR = 'BROWSER_ERROR',\n    OPEN = 'BROWSER_OPEN',\n    CANCEL = 'BROWSER_CANCEL',\n    SELECT = 'BROWSER_SELECT',\n    SELECT_FULL_PATH = 'BROWSER_SELECT_FULL_PATH',\n}\n\nexport const Actions = {\n    list: (path: string, name?: string) => createAction(ActionTypes.LIST_DIRECTORY, { path, name }),\n    dirListing: (path: string, dirs: DirectoryListingDetails[], files: DirectoryListingDetails[], drives: string[], places: FSPlace[]) => createAction(ActionTypes.DIRECTORY_LISTING, { path, dirs, files, drives, places }),\n    open: () => createAction(ActionTypes.OPEN),\n    cancel: () => createAction(ActionTypes.CANCEL),\n    select: (path: string, name: string) => createAction(ActionTypes.SELECT, { path, name }),\n    selectFullPath: (path: string) => createAction(ActionTypes.SELECT_FULL_PATH, { path }),\n    error: (msg: string, timestamp: number, id: string) => createAction(ActionTypes.ERROR, { msg, timestamp, id }),\n    detectParams: (path: string) => createAction(ActionTypes.DETECT_PARAMS, { path }),\n    paramsDetected: (path: string, params: DatasetFormParams) => createAction(ActionTypes.PARAMS_DETECTED, { path, params }),\n}\n\nexport type Actions = ActionsUnion<typeof Actions>;","import { FormikProps, withFormik } from \"formik\";\nimport * as React from \"react\";\nimport { Button, Form } from \"semantic-ui-react\";\nimport { ConfigState } from \"../../config/reducers\";\nimport { Omit } from \"../../helpers/types\";\nimport { ClusterTypes, ConnectRequestLocalCluster } from \"../../messages\";\n\ntype FormValues = Omit<ConnectRequestLocalCluster, \"type\">;\n\ninterface FormProps {\n    onSubmit: (params: ConnectRequestLocalCluster) => void,\n    config: ConfigState,\n}\n\ntype MergedProps = FormikProps<FormValues> & FormProps;\n\nconst LocalConnectionForm: React.SFC<MergedProps> = ({\n    values,\n    touched,\n    errors,\n    dirty,\n    isSubmitting,\n    handleChange,\n    handleBlur,\n    handleSubmit,\n    handleReset,\n}) => {\n    return (\n        <Form onSubmit={handleSubmit}>\n            <Form.Field>\n                <label htmlFor=\"numWorkers\">Number of Workers:</label>\n                <input type=\"number\" name=\"numWorkers\" value={values.numWorkers}\n                    onChange={handleChange}\n                    onBlur={handleBlur} />\n                {errors.numWorkers && touched.numWorkers && errors.numWorkers}\n            </Form.Field>\n            <Button primary={true} type=\"submit\" disabled={isSubmitting}>Connect</Button>\n        </Form>\n    )\n}\n\nexport default withFormik<FormProps, FormValues>({\n    mapPropsToValues: (ownProps: FormProps) => ({\n        numWorkers: ownProps.config.localCores,\n    }),\n    handleSubmit: (values, formikBag) => {\n        const { onSubmit } = formikBag.props;\n        onSubmit({\n            type: ClusterTypes.LOCAL,\n            ...values,\n        });\n    }\n})(LocalConnectionForm);\n","\nimport { FormikProps, withFormik } from \"formik\";\nimport * as React from \"react\";\nimport { Button, Form } from \"semantic-ui-react\";\nimport { Omit } from \"../../helpers/types\";\nimport { ClusterTypes, ConnectRequestTCP } from \"../../messages\";\n\ntype FormValues = Omit<ConnectRequestTCP, \"type\">;\n\ninterface FormProps {\n    onSubmit: (params: ConnectRequestTCP) => void,\n}\n\ntype MergedProps = FormikProps<FormValues> & FormProps;\n\nconst TCPConnectionForm: React.SFC<MergedProps> = ({\n    values,\n    touched,\n    errors,\n    dirty,\n    isSubmitting,\n    handleChange,\n    handleBlur,\n    handleSubmit,\n    handleReset,\n}) => {\n    return (\n        <Form onSubmit={handleSubmit}>\n            <Form.Field>\n                <label htmlFor=\"address\">Scheduler URI</label>\n                <input type=\"text\" name=\"address\" value={values.address}\n                    onChange={handleChange}\n                    onBlur={handleBlur} />\n                {errors.address && touched.address && errors.address}\n            </Form.Field>\n            <Button primary={true} type=\"submit\" disabled={isSubmitting}>Connect</Button>\n        </Form>\n    )\n}\n\nexport default withFormik<FormProps, FormValues>({\n    mapPropsToValues: () => ({\n        address: \"tcp://localhost:8786\",\n    }),\n    handleSubmit: (values, formikBag) => {\n        const { onSubmit } = formikBag.props;\n        onSubmit({\n            type: ClusterTypes.TCP,\n            ...values\n        });\n    }\n})(TCPConnectionForm);\n","\nimport * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Dropdown, DropdownProps, Segment } from \"semantic-ui-react\";\nimport * as clusterActions from \"../../cluster/actions\";\nimport { getEnumValues } from \"../../helpers\";\nimport { ClusterTypeMetadata, ClusterTypes, ConnectRequestParams } from \"../../messages\";\nimport { RootReducer } from \"../../store\";\nimport LocalConnectionForm from \"./LocalConnectionForm\";\nimport TCPConnectionForm from \"./TCPConnectionForm\";\n\n\nconst mapDispatchToProps = {\n    connectToCluster: clusterActions.Actions.connect,\n};\n\nconst mapStateToProps = (state: RootReducer) => {\n    return {\n        config: state.config,\n    }\n}\n\ntype MergedProps = DispatchProps<typeof mapDispatchToProps> & ReturnType<typeof mapStateToProps>;\n\nconst clusterTypeKeys = getEnumValues(ClusterTypes);\nconst clusterTypeOptions = clusterTypeKeys.map(t => ({\n    text: ClusterTypeMetadata[ClusterTypes[t]].label,\n    value: ClusterTypes[t],\n}));\n\ninterface ConnectionParamsState {\n    clusterType: ClusterTypes\n}\n\nclass ClusterConnectionForm extends React.Component<MergedProps, ConnectionParamsState> {\n    public state = {\n        clusterType: ClusterTypes.LOCAL,\n    }\n\n    public setType = (type: ClusterTypes) => {\n        this.setState({\n            clusterType: type,\n        });\n    }\n\n    public handleChange = (e: React.SyntheticEvent, data: DropdownProps) => {\n        const value = data.value as ClusterTypes;\n        this.setType(value);\n    }\n\n    public handleSubmit = (params: ConnectRequestParams) => {\n        this.props.connectToCluster(params);\n    }\n\n    public renderForm() {\n        const { clusterType } = this.state;\n        const { config } = this.props;\n\n        switch (clusterType) {\n            case ClusterTypes.LOCAL: {\n                return <LocalConnectionForm config={config} onSubmit={this.handleSubmit} />\n            }\n            case ClusterTypes.TCP: {\n                return <TCPConnectionForm onSubmit={this.handleSubmit} />\n            }\n        }\n    }\n\n    public render() {\n        return (\n            <>\n                <div>\n                    <Dropdown\n                        inline={true}\n                        options={clusterTypeOptions}\n                        value={this.state.clusterType}\n                        onChange={this.handleChange}\n                    />\n                </div>\n                <Segment>\n                    {this.renderForm()}\n                </Segment>\n            </>\n        )\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ClusterConnectionForm);","import * as React from 'react';\nimport { Icon, Message } from 'semantic-ui-react';\n\ninterface ChannelConnectingProps {\n    msg: string,\n}\n\nconst ChannelConnecting: React.SFC<ChannelConnectingProps> = ({ msg }) => (\n    <Message icon={true}>\n        <Icon name='cog' loading={true} />\n        <Message.Content>\n            <Message.Header>Connecting to LiberTEM</Message.Header>\n            {msg}\n        </Message.Content>\n    </Message>\n)\n\nexport default ChannelConnecting;","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport ClusterConnectionForm from \"../../cluster/components/ClusterConnectionForm\";\nimport { RootReducer } from \"../../store\";\nimport ChannelConnecting from \"./ChannelConnecting\";\n\nconst mapStateToProps = (state: RootReducer) => {\n    return {\n        channelStatus: state.channelStatus,\n        clusterConnection: state.clusterConnection,\n        haveConfig: state.config.haveConfig,\n    }\n}\n\n\ntype MergedProps = ReturnType<typeof mapStateToProps>;\n\nconst messages = {\n    waiting: \"Waiting...\",\n    connecting: \"Connecting...\",\n}\n\nconst clusterMessages = {\n    connected: \"Connected, waiting for initial state...\",\n    unknown: \"Connected, fetching cluster status...\",\n}\n\nconst ChannelStatus: React.SFC<MergedProps> = ({ haveConfig, children, channelStatus, clusterConnection }) => {\n    switch (channelStatus.status) {\n        case \"waiting\":\n        case \"connecting\": {\n            return <ChannelConnecting msg={messages[channelStatus.status]} />;\n        }\n        case \"connected\": {\n            if (!haveConfig) {\n                return <ChannelConnecting msg=\"waiting for configuration...\" />;\n            }\n            if (clusterConnection.status === \"disconnected\") {\n                return <ClusterConnectionForm />\n            } else if (clusterConnection.status === \"connected\") {\n                return <ChannelConnecting msg={clusterMessages.connected} />;\n            } else if (clusterConnection.status === \"unknown\") {\n                return <ChannelConnecting msg={clusterMessages.unknown} />;\n            }\n        }\n    }\n    return <>{children}</>;\n}\n\nexport default connect(mapStateToProps)(ChannelStatus);","import * as React from \"react\";\nimport { Icon, SemanticICONS } from \"semantic-ui-react\";\nimport { DirectoryListingDetails } from \"../../messages\";\n\n\ninterface FileBrowserEntryProps {\n    style: object,\n    details: DirectoryListingDetails,\n    onClick?: () => void,\n    icon?: SemanticICONS,\n}\n\ninterface TimeStampProps {\n    ts: number,\n}\n\nexport const TimeStamp: React.SFC<TimeStampProps> = ({ ts }) => {\n    const date = new Date(ts * 1000);\n    const fmtDate = date.toLocaleDateString();\n    const fmtTime = date.toLocaleTimeString();\n    const title = `${fmtDate} ${fmtTime}`;\n    return (\n        <div style={{ display: \"flex\", whiteSpace: \"nowrap\" }} title={title}>\n            <div style={{ width: \"50%\", marginRight: \"10px\" }}>{fmtDate}</div>\n            <div style={{ width: \"45%\" }}>{fmtTime}</div>\n        </div>\n    )\n}\n\n// adapted from https://stackoverflow.com/a/14919494/540644\nfunction humanFileSize(bytes: number, si: boolean = false) {\n    const thresh = si ? 1000 : 1024;\n    if (Math.abs(bytes) < thresh) {\n        return {\n            size: bytes,\n            unit: 'B',\n        }\n    }\n    const units = si\n        ? ['kB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB']\n        : ['KiB', 'MiB', 'GiB', 'TiB', 'PiB', 'EiB', 'ZiB', 'YiB'];\n    let u = -1;\n    do {\n        bytes /= thresh;\n        ++u;\n    } while (Math.abs(bytes) >= thresh && u < units.length - 1);\n\n    return {\n        size: bytes.toFixed(1),\n        unit: units[u],\n    }\n}\n\ninterface FileSizeProps {\n    size: number,\n    si?: boolean,\n}\n\nexport const FileSize: React.SFC<FileSizeProps> = ({ size, si }) => {\n    const fmtSize = humanFileSize(size, si)\n    return (\n        <div style={{ textAlign: \"right\" }}>\n            {fmtSize.size} {fmtSize.unit}\n        </div>\n    );\n}\n\nexport const Cell: React.SFC<{ title?: string }> = ({ children, title }) => {\n    const styles: React.CSSProperties = {\n        whiteSpace: \"nowrap\",\n        overflow: \"hidden\",\n        textOverflow: \"ellipsis\",\n        marginRight: \"10px\",\n    }\n    return (\n        <div style={styles} title={title}>{children}</div>\n    );\n}\n\n\nclass FileBrowserEntry extends React.Component<FileBrowserEntryProps> {\n    public onClick = (e: React.MouseEvent) => {\n        const { onClick } = this.props;\n        if (onClick) {\n            onClick();\n        }\n    }\n\n    public render() {\n        const { details, style, icon } = this.props;\n        const myStyle: React.CSSProperties = {\n            cursor: \"pointer\",\n            ...style,\n        };\n\n        const tsStyles: React.CSSProperties = {\n            textAlign: \"right\",\n        };\n\n        return (\n            <div onClick={this.onClick} style={myStyle}>\n                <div style={{ display: \"flex\", paddingRight: \"10px\" }}>\n                    <div style={{ width: \"20%\", flexGrow: 1 }}>\n                        <Cell title={details.name}>\n                            {icon && <Icon name={icon} />}\n                            {details.name}\n                        </Cell>\n                    </div>\n                    <div style={{ width: \"10%\" }}><Cell><FileSize size={details.size} si={false} /></Cell></div>\n                    <div style={{ width: \"10%\" }}><Cell>{details.owner}</Cell></div>\n                    <div style={{ width: \"18%\", ...tsStyles }}>\n                        <Cell><TimeStamp ts={details.ctime} /></Cell>\n                    </div>\n                    <div style={{ width: \"18%\", ...tsStyles }}>\n                        <Cell><TimeStamp ts={details.mtime} /></Cell>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default FileBrowserEntry;","import * as React from \"react\";\nimport { Cell } from \"./FileBrowserEntry\";\n\nconst FileBrowserHeader: React.SFC = () => {\n    const alignRight: React.CSSProperties = {\n        textAlign: \"right\",\n    };\n\n    // ugly hack: padding-right to compensate for scrollbar size\n    return (\n        <div style={{ paddingRight: \"20px\", paddingBottom: \"10px\" }}>\n            <div style={{ display: \"flex\" }}>\n                <div style={{ width: \"20%\", flexGrow: 1 }}>\n                    <Cell>Name</Cell>\n                </div>\n                <div style={{ width: \"10%\", ...alignRight }}>\n                    <Cell>Size</Cell>\n                </div>\n                <div style={{ width: \"10%\" }}>\n                    <Cell>Owner</Cell>\n                </div>\n                <div style={{ width: \"18%\", ...alignRight }}>\n                    <Cell>Created</Cell>\n                </div>\n                <div style={{ width: \"18%\", ...alignRight }}>\n                    <Cell>Modified</Cell>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default FileBrowserHeader;","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { DirectoryListingDetails } from \"../../messages\";\nimport * as browserActions from '../actions';\nimport FileBrowserEntry from \"./FileBrowserEntry\";\n\ninterface FileEntryProps {\n    path: string,\n    style: object,\n    details: DirectoryListingDetails,\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch, ownProps: FileEntryProps) => {\n    return {\n        select: () => dispatch(browserActions.Actions.select(ownProps.path, ownProps.details.name)),\n    };\n}\n\ntype MergedProps = FileEntryProps & ReturnType<typeof mapDispatchToProps>;\n\nclass FileEntry extends React.Component<MergedProps> {\n    public render() {\n        const { details, style, select } = this.props;\n\n        return (\n            <FileBrowserEntry onClick={select} style={style} details={details}\n                icon=\"file outline\" />\n        )\n    }\n}\n\nexport default connect(null, mapDispatchToProps)(FileEntry);","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { DirectoryListingDetails } from \"../../messages\";\nimport * as browserActions from '../actions';\nimport FileBrowserEntry from \"./FileBrowserEntry\";\n\nconst mapDispatchToProps = (dispatch: Dispatch, ownProps: FolderEntryProps) => {\n    return {\n        list: () => {\n            dispatch(browserActions.Actions.list(ownProps.path, ownProps.details.name));\n            window.setTimeout(() => ownProps.onChange(), 0);\n        },\n    };\n}\n\ninterface FolderEntryProps {\n    path: string,\n    style: object,\n    details: DirectoryListingDetails,\n    onChange: () => void,\n}\n\ntype MergedProps = FolderEntryProps & ReturnType<typeof mapDispatchToProps>;\n\nconst FolderEntry: React.SFC<MergedProps> = ({ list, details, style, onChange }) => {\n    return (\n        <FileBrowserEntry onClick={list} style={style} details={details} icon=\"folder\" />\n    )\n}\n\nexport default connect(null, mapDispatchToProps)(FolderEntry);\n","import * as React from 'react';\nimport { connect } from \"react-redux\";\nimport { Dispatch } from 'redux';\nimport { Dropdown, DropdownItemProps } from \"semantic-ui-react\";\nimport * as browserActions from '../actions';\n\nconst mapDispatchToProps = (dispatch: Dispatch, ownProps: DropdownItemProps) => {\n    return {\n        list: () => {\n            if (ownProps.value !== undefined) {\n                dispatch(browserActions.Actions.list(ownProps.value.toString()));\n                window.setTimeout(() => ownProps.onChange(), 0);\n            }\n        },\n    };\n}\n\ntype MergedProps = ReturnType<typeof mapDispatchToProps> & DropdownItemProps & {\n    onChange: () => void,\n};\n\nconst PathDropDownItem: React.SFC<MergedProps> = ({ list, ...props }) => {\n    const newProps = {\n        onClick: list,\n        ...props,\n    }\n    return <Dropdown.Item {...newProps} />;\n}\n\nexport default connect(null, mapDispatchToProps)(PathDropDownItem);","import { FormikProps, withFormik } from \"formik\";\nimport * as React from \"react\";\nimport { Form, Input } from \"semantic-ui-react\";\n\ninterface FormValues {\n    path: string,\n}\n\ninterface PathInputProps {\n    onChange: (path: string) => void,\n    initialPath: string,\n}\n\ntype MergedProps = FormikProps<FormValues> & PathInputProps;\n\nconst PathInput: React.SFC<MergedProps> = ({\n    values,\n    touched,\n    errors,\n    dirty,\n    isSubmitting,\n    handleChange,\n    handleBlur,\n    handleSubmit,\n    handleReset,\n}) => {\n    return (\n        <Form onSubmit={handleSubmit} style={{ flexGrow: 1 }}>\n            <Form.Field>\n                <Input autoComplete=\"off\" onBlur={handleBlur} onChange={handleChange} value={values.path} name=\"path\" />\n            </Form.Field>\n        </Form>\n    )\n}\n\nexport default withFormik<PathInputProps, FormValues>({\n    mapPropsToValues: ({ initialPath }) => ({\n        path: initialPath,\n    }),\n    handleSubmit: (values, formikBag) => {\n        const { onChange } = formikBag.props;\n        onChange(values.path);\n    },\n    enableReinitialize: true,\n})(PathInput);","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { Dropdown, DropdownItemProps } from \"semantic-ui-react\";\nimport { DatasetTypes } from \"../../messages\";\nimport { RootReducer } from \"../../store\";\nimport * as browserActions from '../actions';\n\n\ntype DropdownOptions = Array<{\n    text: string,\n    value: {\n        type: DatasetTypes,\n        path: string,\n    },\n}>;\n\nconst mapStateToProps = (state: RootReducer) => {\n    return {\n        lastOpened: state.config.lastOpened,\n        fileHistory: state.config.fileHistory,\n        separator: state.config.separator,\n    };\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch) => {\n    return {\n        select: (path: string) => dispatch(browserActions.Actions.selectFullPath(path)),\n    };\n}\n\ntype MergedProps = ReturnType<typeof mapStateToProps> & ReturnType<typeof mapDispatchToProps>;\n\nconst RecentFiles: React.SFC<MergedProps> = ({ lastOpened, fileHistory, select }) => {\n\n    const recentFiles: DropdownOptions = fileHistory.filter((path: string) => lastOpened[path]).map((path: string) => {\n        const item = lastOpened[path];\n        return {\n            text: item.path,\n            value: {\n                type: item.type,\n                path: item.path,\n            },\n        };\n    });\n\n    const onClick = (e: React.MouseEvent<HTMLDivElement>, data: DropdownItemProps) => data.value && select(data.value.toString())\n\n    return (\n        <Dropdown item={true} text=\"Recent\" floating={true}>\n            <Dropdown.Menu>\n                <Dropdown.Header content=\"recent datasets\" />\n                {recentFiles.map((option, idx) => (\n                    <Dropdown.Item key={idx} value={option.value.path} content={option.text} onClick={onClick} />\n                ))}\n            </Dropdown.Menu>\n        </Dropdown>\n    );\n}\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(RecentFiles);","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { Dropdown, Menu } from \"semantic-ui-react\";\nimport * as browserActions from '../actions';\nimport { FSPlaces } from \"../types\";\nimport PathDropDownItem from \"./PathDropDownItem\";\nimport PathInput from \"./PathInput\";\nimport RecentFiles from \"./RecentFiles\";\n\nconst mapDispatchToProps = (dispatch: Dispatch, ownProps: PathBarProps) => {\n    return {\n        refresh: () => {\n            dispatch(browserActions.Actions.list(ownProps.currentPath));\n            window.setTimeout(() => ownProps.onChange(), 0);\n        },\n        handleInputChange: (path: string) => {\n            dispatch(browserActions.Actions.list(path));\n            window.setTimeout(() => ownProps.onChange(), 0);\n        },\n        goUp: () => {\n            dispatch(browserActions.Actions.list(ownProps.currentPath, '..'));\n            window.setTimeout(() => ownProps.onChange(), 0);\n        },\n    };\n}\n\ninterface PathBarProps {\n    currentPath: string,\n    onChange: () => void,\n    drives: string[],\n    places: FSPlaces,\n}\n\ntype MergedProps = ReturnType<typeof mapDispatchToProps> & PathBarProps;\n\nconst PathBar: React.SFC<MergedProps> = ({ currentPath, drives, places, onChange, refresh, goUp, handleInputChange }) => {\n    const driveOptions = drives.map((path) => ({ key: path, text: path }));\n    const placeOptions = Object.keys(places).map((key) => ({ key: places[key].path, text: places[key].title }))\n    return (\n        <Menu>\n            <RecentFiles />\n            <Dropdown text=\"Go to...\" floating={true} item={true}>\n                <Dropdown.Menu>\n                    <Dropdown.Header content=\"Drives\" />\n                    {driveOptions.map((option) => {\n                        return <PathDropDownItem key={option.key} value={option.key} content={option.text} onChange={onChange} />\n                    })}\n                    <Dropdown.Header content=\"Places\" />\n                    {placeOptions.map((option) => {\n                        return <PathDropDownItem key={option.key} value={option.key} content={option.text} onChange={onChange} />\n                    })}\n                </Dropdown.Menu>\n            </Dropdown>\n            <Menu.Item icon=\"arrow up\" onClick={goUp} />\n            <Menu.Item style={{ flexGrow: 1 }}>\n                <PathInput onChange={handleInputChange} initialPath={currentPath} />\n            </Menu.Item>\n            <Menu.Item icon=\"refresh\" onClick={refresh} />\n        </Menu>\n    );\n}\n\n\nexport default connect(null, mapDispatchToProps)(PathBar);","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { FixedSizeList as List } from \"react-window\";\nimport { Dispatch } from \"redux\";\nimport { Button, Header, Segment } from \"semantic-ui-react\";\nimport { DirectoryListingDetails } from \"../../messages\";\nimport { RootReducer } from \"../../store\";\nimport * as browserActions from '../actions';\nimport FileBrowserHeader from \"./FileBrowserHeader\";\nimport FileEntry from \"./FileEntry\";\nimport FolderEntry from \"./FolderEntry\";\nimport PathBar from \"./PathBar\";\n\nconst mapStateToProps = (state: RootReducer) => {\n    const { browser } = state;\n    return {\n        files: browser.files,\n        dirs: browser.dirs,\n        path: browser.path,\n        drives: browser.drives,\n        places: browser.places,\n        isLoading: browser.isLoading,\n    };\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch) => {\n    return {\n        cancel: () => dispatch(browserActions.Actions.cancel()),\n    };\n}\n\ntype MergedProps = ReturnType<typeof mapStateToProps> & ReturnType<typeof mapDispatchToProps>;\n\ninterface EntryFnArgs {\n    index: number,\n    style: object\n}\ntype EntryFn = (arg: EntryFnArgs) => void\n\nconst listRef = React.createRef<List>();\n\nconst scrollToTop = () => {\n    if (listRef.current === null) {\n        return;\n    }\n    listRef.current.scrollToItem(0);\n}\n\nfunction sortByKey<T extends object>(array: T[], getKey: (item: T) => any) {\n    return array.sort((a, b) => {\n        const x = getKey(a);\n        const y = getKey(b);\n        return ((x < y) ? -1 : ((x > y) ? 1 : 0));\n    });\n}\n\nconst FileBrowser: React.SFC<MergedProps> = ({ files, dirs, path, drives, places, cancel, isLoading }) => {\n    const getSortKey = (item: DirectoryListingDetails) => item.name.toLowerCase();\n    const dirEntries = sortByKey(dirs, getSortKey).map((dir) => (style: object) => <FolderEntry style={style} onChange={scrollToTop} path={path} details={dir} />);\n    const fileEntries = sortByKey(files, getSortKey).map((f) => ((style: object) => <FileEntry style={style} path={path} details={f} />));\n    const entries = dirEntries.concat(fileEntries);\n\n    const cellFn: EntryFn = ({ index, style }) => {\n        return entries[index](style)\n    }\n\n    let list = (\n        <List style={{ overflowY: \"scroll\" }} ref={listRef} height={300} width=\"100%\" itemCount={entries.length} itemSize={35}>\n            {cellFn}\n        </List>\n    );\n\n    if (isLoading) {\n        // FIXME: hardcoded height\n        list = (\n            <Segment loading={true} style={{ height: \"300px\" }} />\n        )\n    }\n\n    return (\n        <Segment.Group>\n            <Segment>\n                <Header as=\"h2\">Open dataset</Header>\n            </Segment>\n            <Segment>\n                <PathBar currentPath={path} drives={drives} places={places} onChange={scrollToTop} />\n            </Segment>\n            <Segment>\n                <FileBrowserHeader />\n                {list}\n            </Segment>\n            <Segment>\n                <Button onClick={cancel}>Cancel</Button>\n            </Segment>\n        </Segment.Group>\n    );\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(FileBrowser);","\nexport interface JobResultType {\n    imageURL: string,\n    description: { title: string, desc: string },\n}\n\nexport enum JobRunning {\n    CREATING = 'CREATING',\n    RUNNING = 'RUNNING',\n    DONE = 'DONE',\n}\n\nexport enum JobStatus {\n    CREATING = 'CREATING',\n    IN_PROGRESS = 'IN_PROGRESS',\n    CANCELLED = 'CANCELLED',\n    SUCCESS = 'SUCCESS',\n    ERROR = 'ERROR',\n}\n\nexport interface JobStateCommon {\n    id: string,\n    dataset: string,\n    status: JobStatus,\n    startTimestamp: number,\n    results: JobResultType[],\n}\n\nexport type JobStateStart = JobStateCommon & {\n    running: JobRunning.CREATING | JobRunning.RUNNING,\n}\n\nexport type JobStateDone = JobStateCommon & {\n    running: JobRunning.DONE,\n    endTimestamp: number,\n}\n\nexport type JobState = JobStateStart | JobStateDone;","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Button, Icon } from \"semantic-ui-react\";\nimport { RootReducer } from \"../../store\";\nimport * as browserActions from '../actions';\nimport FileBrowser from \"./FileBrowser\";\n\nexport const mapStateToProps = (state: RootReducer) => {\n    return {\n        isOpen: state.browser.isOpen,\n    }\n}\n\nexport const mapDispatchToProps = {\n    open: browserActions.Actions.open,\n}\n\ntype MergedProps = ReturnType<typeof mapStateToProps> & DispatchProps<typeof mapDispatchToProps>;\n\nconst BrowserWrapper: React.SFC<MergedProps> = ({ isOpen, open }) => {\n    if (!isOpen) {\n        return (\n            <Button icon={true} labelPosition=\"left\" onClick={open}>\n                <Icon name='add' />\n                Browse\n            </Button>\n        );\n    }\n    return (\n        <FileBrowser />\n    );\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(BrowserWrapper)","import * as React from \"react\";\nimport { Icon } from \"semantic-ui-react\";\n\nconst BusySpinner: React.SFC = () => {\n    const styles: React.CSSProperties = {\n        margin: 0,\n        padding: 0,\n        position: \"absolute\",\n        bottom: \"10px\",\n        right: \"10px\",\n        color: \"white\",\n        opacity: 0.7,\n        filter: \"drop-shadow(0 0 3px #000)\",\n    };\n    return (\n        <Icon name=\"cog\" loading={true} style={styles} />\n    )\n}\n\nexport default BusySpinner;","import * as React from \"react\";\nimport BusySpinner from \"./BusySpinner\";\n\ninterface BusyWrapperProps {\n    busy: boolean,\n}\n\nconst BusyWrapper: React.SFC<BusyWrapperProps> = ({ children, busy }) => {\n    const styles: React.CSSProperties = {\n        position: \"relative\",\n    };\n    return (\n        <div style={styles}>\n            {children}\n            {busy && <BusySpinner />}\n        </div>\n    )\n}\n\nexport default BusyWrapper;","import * as React from \"react\";\nimport { DraggableHandle } from \"./DraggableHandle\";\nimport { HandleRenderFunction } from \"./types\";\n\nexport interface HandleParentProps {\n    width: number,\n    height: number,\n    onKeyboardEvent?: React.KeyboardEventHandler<SVGElement>,\n    handles: HandleRenderFunction[],\n}\n\nexport class HandleParent extends React.Component<HandleParentProps> {\n    public currentHandle: DraggableHandle | undefined;\n\n    public handleDragStart = (h: DraggableHandle): void => {\n        this.currentHandle = h;\n    }\n\n    public handleDrop = (): void => {\n        this.currentHandle = undefined;\n    }\n\n    public handleMouseMove = (e: React.MouseEvent<SVGElement>): void => {\n        if (this.currentHandle) {\n            return this.currentHandle.externalMouseMove(e);\n        }\n    }\n\n    public handleMouseLeave = (e: React.MouseEvent<SVGElement>): void => {\n        if (this.currentHandle) {\n            this.currentHandle.externalLeave(e);\n        }\n    }\n\n    public handleMouseUp = (e: React.MouseEvent<SVGElement>): void => {\n        if (this.currentHandle) {\n            this.currentHandle.externalMouseUp(e);\n        }\n    }\n\n    public render() {\n        const { width, height } = this.props;\n        const styles = {\n            outline: \"1px dashed black\"\n        }\n        return (\n            <g\n                onMouseMove={this.handleMouseMove}\n                onMouseLeave={this.handleMouseLeave}\n                onMouseUp={this.handleMouseUp}\n                onKeyDown={this.props.onKeyboardEvent}\n                style={styles}\n                tabIndex={0}\n            >\n                <rect style={{ fill: \"transparent\" }}\n                    x={0} y={0} width={width} height={height}\n                />\n                {this.renderHandles()}\n            </g>\n        );\n    }\n\n    public renderHandles() {\n        const { handles, onKeyboardEvent } = this.props;\n        // we need to inform the handle when there are move/up/leave events\n        // on this parent element, for which we need to know the current handle.\n        // so we pass the handle a dragstart/drop function and kindly ask it\n        // to call us if it starts to be dragged or is dropped.\n        return handles.map((h, i) => {\n            const elem = h(this.handleDragStart, this.handleDrop, onKeyboardEvent);\n            if (React.isValidElement(elem)) {\n                return React.cloneElement(elem, { key: i });\n            }\n        });\n    }\n}\n\nexport default HandleParent;","import * as React from \"react\";\nimport { JobState } from \"../types\";\nimport styles from \"./ResultImage.module.css\";\n\ninterface ResultImageProps {\n    job: JobState,\n    idx: number,\n    width: number,\n    height: number,\n}\n\nconst ResultImage: React.SFC<ResultImageProps> = ({ job, idx, width, height }) => {\n    const result = job.results[idx];\n    if (result === undefined) {\n        return (\n            <svg className={styles.fallback} width={width} height={height} viewBox={`0 0 ${width} ${height}`} key={-1} />\n        )\n    }\n    return (\n        <image className={styles.default} xlinkHref={result.imageURL} width={width} height={height} />\n    );\n}\n\nexport default ResultImage;","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport styled from 'styled-components';\nimport { AnalysisState } from \"../../analysis/types\";\nimport { DatasetState } from \"../../messages\";\nimport BusyWrapper from \"../../widgets/BusyWrapper\";\nimport HandleParent from \"../../widgets/HandleParent\";\nimport { HandleRenderFunction } from \"../../widgets/types\";\nimport { JobRunning, JobState } from \"../types\";\nimport ResultImage from \"./ResultImage\";\n\ninterface ResultProps {\n    width: number,\n    height: number,\n    job: JobState,\n    dataset: DatasetState,\n    analysis: AnalysisState,\n    extraHandles?: HandleRenderFunction,\n    extraWidgets?: React.ReactElement<SVGElement>,\n    idx: number,\n    jobIndex: number,\n}\n\nconst ResultWrapper = styled.svg`\n    display: block;\n    border: 1px solid black;\n    width: 100%;\n    height: auto;\n`;\n\ntype MergedProps = ResultProps;\n\nclass Result extends React.Component<MergedProps> {\n    public renderHandles() {\n        const { width, height, extraHandles } = this.props;\n        let handles: HandleRenderFunction[] = [];\n        if (extraHandles) {\n            handles = [...handles, extraHandles];\n        }\n\n        return (\n            <HandleParent width={width} height={height} handles={handles} />\n        )\n    }\n\n    public render() {\n        const { job, idx, width, height, extraWidgets } = this.props;\n        const busy = job.running !== JobRunning.DONE;\n\n        return (\n            <BusyWrapper busy={busy}>\n                <ResultWrapper width={width} height={height} viewBox={`0 0 ${width} ${height}`}>\n                    <ResultImage job={job} idx={idx} width={width} height={height} />\n                    {extraWidgets}\n                    {this.renderHandles()}\n                </ResultWrapper>\n            </BusyWrapper>\n        );\n    }\n};\n\nexport default connect(null, null)(Result);","import styled from 'styled-components';\n\n\nconst Selectors = styled.div`\n    display: flex;\n    & > * {\n        margin-right: 10px;\n    }\n`;\n\n\n\nexport default Selectors;","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Dropdown, DropdownProps } from \"semantic-ui-react\";\nimport { RootReducer } from \"../../store\";\nimport { HandleRenderFunction } from \"../../widgets/types\";\nimport { JobRunning, JobState } from \"../types\";\nimport Result from \"./Result\";\nimport Selectors from \"./Selectors\";\n\ninterface ResultListProps {\n    width: number,\n    height: number,\n    selectors?: React.ReactElement<any>,\n    extraHandles?: HandleRenderFunction,\n    extraWidgets?: React.ReactElement<SVGElement>,\n    subtitle?: React.ReactNode,\n}\n\ninterface ExternalResultListProps {\n    analysis: string,\n    jobIndex: number,\n}\n\nconst mapStateToProps = (state: RootReducer, ownProps: ExternalResultListProps) => {\n    const analysis = state.analyses.byId[ownProps.analysis];\n    const jobId = analysis.jobs[ownProps.jobIndex];\n    const job = jobId ? state.jobs.byId[jobId] : undefined;\n    const ds = job ? state.datasets.byId[job.dataset] : undefined;\n\n    return {\n        currentJob: job,\n        jobsById: state.jobs.byId,\n        analysis,\n        dataset: ds,\n        jobIndex: ownProps.jobIndex,\n    };\n};\n\ntype MergedProps = ResultListProps & ReturnType<typeof mapStateToProps>;\n\ninterface ResultListState {\n    selectedChannel: number,\n}\n\nclass ResultList extends React.Component<MergedProps, ResultListState> {\n    public state: ResultListState = { selectedChannel: 0 };\n\n    public selectChannel = (e: React.SyntheticEvent, data: DropdownProps) => {\n        const value = data.value as number;\n        this.setState({ selectedChannel: value });\n    }\n\n    public getJob = () => {\n        const { currentJob, analysis, jobsById, jobIndex } = this.props;\n        if (!currentJob) {\n            return;\n        }\n        if (currentJob.results.length > 0) {\n            return currentJob;\n        }\n        const history = analysis.jobHistory[jobIndex];\n\n        if (history === undefined) {\n            return;\n        }\n        for (const tmpJobId of history) {\n            const tmpJob = jobsById[tmpJobId];\n            if (tmpJob.results.length > 0) {\n                return tmpJob;\n            }\n        }\n        return;\n    }\n\n    public render() {\n        const {\n            selectors, analysis, dataset, children, width, height, jobIndex,\n            extraHandles, extraWidgets, subtitle,\n        } = this.props;\n        let msg;\n        let currentResult = (\n            // placeholder:\n            <svg style={{ display: \"block\", border: \"1px solid black\", width: \"100%\", height: \"auto\" }} width={width} height={height} viewBox={`0 0 ${width} ${height}`} key={-1} />\n        );\n        const job = this.getJob();\n        if (!job || !dataset) {\n            msg = <>&nbsp;</>;\n        } else {\n            currentResult = (\n                <Result analysis={analysis} job={job} dataset={dataset}\n                    extraHandles={extraHandles}\n                    extraWidgets={extraWidgets}\n                    width={width} height={height}\n                    jobIndex={jobIndex}\n                    idx={this.state.selectedChannel}\n                />\n            );\n            if (job.running === JobRunning.DONE) {\n                const dt = (job.endTimestamp - job.startTimestamp) / 1000;\n                msg = <>Analysis done in {dt.toFixed(3)}s</>;\n            } else {\n                msg = <>Analysis running...</>;\n            }\n        }\n        return (\n            <div>\n                {currentResult}\n                {children}\n                <Selectors>\n                    <ResultImageSelector job={job} handleChange={this.selectChannel} selectedImg={this.state.selectedChannel} />\n                    {selectors}\n                </Selectors>\n                <p>{subtitle} {msg}</p>\n            </div>\n        );\n    }\n}\n\ninterface ImageSelectorProps {\n    job?: JobState,\n    handleChange: (e: React.SyntheticEvent, data: DropdownProps) => void,\n    selectedImg: number,\n}\n\nconst ResultImageSelector: React.SFC<ImageSelectorProps> = ({ job, handleChange, selectedImg }) => {\n    if (!job) {\n        return null;\n    }\n    const availableImages = job.results.map((result, idx) => ({ text: result.description.title, value: idx }));\n    return (\n        <>\n            <div>\n                Channel:{' '}\n                <Dropdown\n                    inline={true}\n                    options={availableImages}\n                    value={selectedImg}\n                    onChange={handleChange}\n                />\n            </div>\n        </>\n    )\n}\n\n\nexport default connect(mapStateToProps)(ResultList);\n","export const inRectConstraint = (width: number, height: number) => (p: Point2D) => {\n    return {\n        x: Math.max(0, Math.min(width - 1, p.x)),\n        y: Math.max(0, Math.min(height - 1, p.y)),\n    }\n}\n\nexport const dist = (cx: number, cy: number, x: number, y: number) => {\n    const dx = cx - x;\n    const dy = cy - y;\n    return Math.sqrt(dx * dx + dy * dy);\n}\n\nexport const cbToRadius = (cx: number, cy: number, cb: ((r: number) => void) | undefined) => (x: number, y: number) => cb && cb(dist(cx, cy, x, y))\n\nexport const keepOnCY = (cy: number) => (p: Point2D) => {\n    return {\n        x: p.x,\n        y: cy,\n    }\n}\n\nexport const keepXLargerThan = (otherX: number) => (p: Point2D) => {\n    return {\n        x: otherX > p.x ? otherX : p.x,\n        y: p.y,\n    }\n}\n\nexport const keepXSmallerThan = (otherX: number) => (p: Point2D) => {\n    return {\n        x: otherX < p.x ? otherX : p.x,\n        y: p.y,\n    }\n}\n\nexport const riConstraint = (outerPos: number, cy: number) => (p: Point2D) => {\n    return keepXLargerThan(outerPos)(\n        keepOnCY(cy)(p)\n    );\n}\n\nexport const roConstraints = (innerPos: number, cy: number) => (p: Point2D) => {\n    return keepXSmallerThan(innerPos)(\n        keepOnCY(cy)(p)\n    );\n}","import { CSSProperties } from \"react\";\n\nexport const defaultMaskStyles = (imageWidth: number): CSSProperties => ({\n    fillOpacity: 0.3,\n    fill: \"red\",\n    strokeOpacity: 0.7,\n    stroke: \"red\",\n    strokeWidth: imageWidth / 128 / 3,\n});","import * as React from \"react\";\nimport { defaultMaskStyles } from \"./styles\";\n\nexport interface DiskProps {\n    imageWidth: number,\n    imageHeight: number,\n    cx: number,\n    cy: number,\n    r: number,\n}\n\nconst Disk: React.SFC<DiskProps> = ({ imageWidth, imageHeight, cx, cy, r }) => {\n    return (\n        <circle cx={cx} cy={cy} r={r} style={{ ...defaultMaskStyles(imageWidth) }} />\n    );\n}\n\nexport default Disk;","export type ModifyCoords = ((x: number, y: number) => ({ x: number, y: number }));\n\n/**\n * Call this function whenever a keyboard event happens. The keyboard event is then translated\n * to a coordinate transformation, which is passed to the update callback. The update callback is\n * only called if relevant keys were pressed (example: arrow keys).\n * \n * @param e keyboard event\n * @param update a callback to handle coordinate updates\n */\nexport const handleKeyEvent = (e: React.KeyboardEvent<SVGElement>, update: (fn: ModifyCoords) => void) => {\n    let delta = 1;\n    if (e.shiftKey) {\n        delta = 10;\n    }\n    switch (e.key) {\n        case \"ArrowUp\":\n            update((x: number, y: number) => ({ x, y: y - delta }));\n            break;\n        case \"ArrowDown\":\n            update((x: number, y: number) => ({ x, y: y + delta }));\n            break;\n        case \"ArrowLeft\":\n            update((x: number, y: number) => ({ x: x - delta, y }));\n            break;\n        case \"ArrowRight\":\n            update((x: number, y: number) => ({ x: x + delta, y }));\n            break;\n        default:\n            return;\n    }\n    e.preventDefault();\n}\n","import * as React from \"react\";\nimport styled from 'styled-components';\nimport { handleKeyEvent, ModifyCoords } from \"./kbdHandler\";\n\nexport type HandleProps = {\n    x: number,\n    y: number,\n    scale: number,\n    withCross?: boolean,\n    focusRef: React.RefObject<SVGGElement>,\n} & React.SVGProps<SVGGElement>;\n\nconst StyledCircle = styled.circle`\n    stroke: red;\n    stroke-width: 1;\n    fill: transparent;\n    g:focus > & {\n        stroke: lightgreen;\n    }\n`;\n\nconst Cross = styled.path`\n    stroke: red;\n    stroke-width: 1;\n    fill: transparent;\n    g:focus > & {\n        stroke: lightgreen;\n    }\n`;\n\nconst FocusGroup = styled.g`\n    &:focus { outline: none; }\n`;\n\nconst Handle: React.SFC<HandleProps> = ({ scale, x, y, withCross, focusRef, ...args }) => {\n    const r = 3;\n    // scaleMatrix is needed to set the origin of the scale\n    const scaleMatrix = `matrix(${scale}, 0, 0, ${scale}, ${x - scale * x}, ${y - scale * y})`;\n    const style: React.CSSProperties = { transform: scaleMatrix };\n    const crossSpec = `\n        M${x - r / 2} ${y} L ${x + r / 2} ${y}\n        M${x} ${y - r / 2} L ${x} ${y + r / 2}\n    `;\n    const cross = withCross ? <Cross d={crossSpec} style={style} /> : null;\n    return (\n        <FocusGroup {...args} ref={focusRef}>\n            <StyledCircle cx={x} cy={y} r={r} style={style} />\n            {cross}\n        </FocusGroup>\n    )\n}\n\nexport interface DraggableHandleProps {\n    x: number,\n    y: number,\n    withCross?: boolean,\n    imageWidth?: number,\n    onDragMove?: (x: number, y: number) => void,\n    parentOnDragStart: (h: DraggableHandle) => void,\n    parentOnDrop: (x: number, y: number) => void,\n    onKeyboardEvent?: (e: React.KeyboardEvent<SVGElement>) => void,\n    constraint?: (p: Point2D) => Point2D,\n}\n\nexport function getScalingFactor(elem: SVGElement): number {\n    const svg = elem.ownerSVGElement;\n    if (svg === null) {\n        throw new Error(\"no owner SVG element?\");\n    }\n    const inWidthAttr = svg.getAttribute(\"width\");\n    if (inWidthAttr === null) {\n        throw new Error(\"no width on SVG element?\");\n    }\n    const inWidth = +inWidthAttr;\n    const svgMeasurements = svg.getBoundingClientRect();\n    return svgMeasurements.width / inWidth;\n}\n\nfunction relativeCoords(e: React.MouseEvent, parent: SVGElement) {\n    const f = getScalingFactor(parent);\n    const parentPos = parent.getBoundingClientRect();\n    const res = {\n        x: (e.pageX - (parentPos.left + window.pageXOffset)) / f,\n        y: (e.pageY - (parentPos.top + window.pageYOffset)) / f,\n    }\n    return res;\n}\n\n/**\n * stateful draggable handle, to be used as part of <svg/>\n */\nexport class DraggableHandle extends React.Component<DraggableHandleProps> {\n    public posRef: React.RefObject<SVGRectElement>;\n    public focusRef: React.RefObject<SVGGElement>;\n\n    public state = {\n        dragging: false,\n        drag: { x: 0, y: 0 },\n    }\n\n    constructor(props: DraggableHandleProps) {\n        super(props);\n        this.posRef = React.createRef<SVGRectElement>();\n        this.focusRef = React.createRef<SVGGElement>();\n    }\n\n    // mousemove event from outside (delegated from surrounding element)\n    public externalMouseMove = (e: React.MouseEvent<SVGElement>): void => {\n        this.move(e);\n    }\n\n    // mouseleave event from outside (delegated from surrounding element)\n    public externalLeave = (e: React.MouseEvent<SVGElement>): void => {\n        this.stopDrag(e);\n    }\n\n    // mouseup event from outside (delegated from surrounding element)\n    public externalMouseUp = (e: React.MouseEvent<SVGElement>): void => {\n        this.stopDrag(e);\n    }\n\n    public applyConstraint = (p: Point2D) => {\n        const { constraint } = this.props;\n        if (constraint) {\n            return constraint(p);\n        } else {\n            return p;\n        }\n    }\n\n    public startDrag = (e: React.MouseEvent<SVGElement>): void => {\n        e.preventDefault();\n        const { parentOnDragStart } = this.props;\n        if (this.posRef.current) {\n            this.setState({\n                dragging: true,\n                drag: this.applyConstraint(relativeCoords(e, this.posRef.current)),\n            });\n            if (parentOnDragStart) {\n                parentOnDragStart(this);\n            }\n            if (this.focusRef.current && this.focusRef.current.focus) {\n                this.focusRef.current.focus();\n            }\n        } else {\n            throw new Error(\"startDrag without posRef\");\n        }\n    }\n\n    public move = (e: React.MouseEvent<SVGElement>): void => {\n        const { onDragMove } = this.props;\n        if (!this.state.dragging) {\n            return;\n        }\n        if (this.posRef.current) {\n            this.setState({\n                drag: this.applyConstraint(relativeCoords(e, this.posRef.current)),\n            }, () => {\n                if (onDragMove) {\n                    const constrained = this.applyConstraint(this.state.drag)\n                    onDragMove(constrained.x, constrained.y);\n                }\n            })\n        } else {\n            throw new Error(\"move without posRef\");\n        }\n    }\n\n    public stopDrag = (e: React.MouseEvent<SVGElement>): void => {\n        const { parentOnDrop } = this.props;\n        const { dragging, drag } = this.state;\n        if (!dragging) {\n            return;\n        }\n        this.setState({\n            dragging: false,\n        })\n        if (parentOnDrop) {\n            parentOnDrop(drag.x, drag.y);\n        }\n    }\n\n    public handleKeyDown = (e: React.KeyboardEvent<SVGElement>) => {\n        const update = (fn: ModifyCoords) => {\n            const { x, y, onDragMove } = this.props;\n            const newCoords = fn(x, y);\n            const constrained = this.applyConstraint(newCoords);\n            if (onDragMove) {\n                onDragMove(constrained.x, constrained.y);\n            }\n        }\n        handleKeyEvent(e, update);\n    }\n\n    public renderCommon(x: number, y: number) {\n        const { imageWidth } = this.props;\n        const scale = imageWidth === undefined ? 1 : imageWidth / 128;\n        // empty zero-size <rect> as relative position reference\n        return (\n            <g>\n                <rect\n                    style={{ visibility: \"hidden\" }}\n                    ref={this.posRef}\n                    x={0} y={0} width={0} height={0}\n                />\n                <Handle scale={scale} x={x + .5} y={y + .5} withCross={this.props.withCross}\n                    focusRef={this.focusRef}\n                    onMouseUp={this.stopDrag}\n                    onMouseMove={this.move}\n                    onMouseDown={this.startDrag}\n                    onKeyDown={this.handleKeyDown}\n                    tabIndex={0}\n                />\n            </g>\n        );\n    }\n\n    public renderDragging() {\n        const { x, y } = this.state.drag;\n        return this.renderCommon(x, y);\n    }\n\n    public render() {\n        const { x, y } = this.props;\n        // either render from state (when dragging) or from props\n        if (this.state.dragging) {\n            return this.renderDragging();\n        } else {\n            return this.renderCommon(x, y);\n        }\n    }\n}\n\nexport default DraggableHandle;","import { ActionsUnion, createAction } from \"../helpers/actionHelpers\";\nimport { AnalysisDetails, AnalysisTypes } from \"../messages\";\nimport { AnalysisState } from \"./types\";\n\n\nexport enum ActionTypes {\n    CREATE = 'ANALYSIS_CREATE',\n    CREATED = 'ANALYSIS_CREATED',\n    PREPARE_RUN = 'ANALYSIS_PREPARE_RUN',\n    RUN = 'ANALYSIS_RUN',\n    RUNNING = 'ANALYSIS_RUNNING',\n    REMOVE = 'ANALYSIS_REMOVE',\n    REMOVED = 'ANALYSIS_REMOVED',\n    ERROR = 'ANALYSIS_ERROR',\n}\n\nexport const Actions = {\n    create: (dataset: string, analysisType: AnalysisTypes) => createAction(ActionTypes.CREATE, { dataset, analysisType }),\n    created: (analysis: AnalysisState) => createAction(ActionTypes.CREATED, { analysis }),\n    prepareRun: (id: string, jobIndex: number, job: string) => createAction(ActionTypes.PREPARE_RUN, { id, jobIndex, job }),\n    run: (id: string, jobIndex: number, parameters: AnalysisDetails) => createAction(ActionTypes.RUN, { id, jobIndex, parameters }),\n    running: (id: string, job: string, jobIndex: number) => createAction(ActionTypes.RUNNING, { id, job, jobIndex }),\n    remove: (id: string) => createAction(ActionTypes.REMOVE, { id }),\n    removed: (id: string) => createAction(ActionTypes.REMOVED, { id }),\n    error: (msg: string, timestamp: number, id: string) => createAction(ActionTypes.ERROR, { msg, timestamp, id }),\n}\n\nexport type Actions = ActionsUnion<typeof Actions>;\n\nexport type ActionParts = {\n    [K in keyof typeof Actions]: ReturnType<typeof Actions[K]>\n}","import * as React from \"react\";\nimport { Grid, Header, Icon, Segment } from \"semantic-ui-react\";\n\ninterface AnalysisLayoutTwoColProps {\n    title: string,\n    subtitle: React.ReactNode,\n    left: React.ReactNode,\n    right: React.ReactNode,\n    toolbar?: React.ReactNode,\n}\n\ntype MergedProps = AnalysisLayoutTwoColProps;\n\nconst AnalysisLayoutTwoCol: React.SFC<MergedProps> = ({\n    title, subtitle,\n    left, right,\n    toolbar,\n}) => {\n\n    return (\n        <>\n            <Header as='h3' attached=\"top\">\n                <Icon name=\"cog\" />\n                <Header.Content>{title}</Header.Content>\n            </Header>\n            <Segment attached={true}>\n                <Grid columns={2}>\n                    <Grid.Row>\n                        <Grid.Column>\n                            {left}\n                            <p>{subtitle}</p>\n                        </Grid.Column>\n                        <Grid.Column>\n                            {right}\n                        </Grid.Column>\n                    </Grid.Row>\n                </Grid>\n            </Segment>\n            {toolbar}\n        </>\n    )\n}\n\nexport default AnalysisLayoutTwoCol","import React from \"react\";\nimport { AnalysisTypes } from \"../../messages\";\nimport { inRectConstraint } from \"../../widgets/constraints\";\nimport DraggableHandle from \"../../widgets/DraggableHandle\";\nimport { HandleRenderFunction } from \"../../widgets/types\";\nimport * as analysisActions from \"../actions\";\n\nconst useFramePicker = ({\n    enabled, scanWidth, scanHeight, jobIndex, analysisId, run\n}: {\n    enabled: boolean, scanWidth: number, scanHeight: number,\n    jobIndex: number, analysisId: string, run: typeof analysisActions.Actions.run\n}) => {\n    const [cx, setCx] = React.useState(Math.round(scanWidth / 2));\n    const [cy, setCy] = React.useState(Math.round(scanHeight / 2));\n\n    React.useEffect(() => {\n        if (enabled) {\n            run(analysisId, jobIndex, {\n                type: AnalysisTypes.PICK_FRAME,\n                parameters: {\n                    x: cx,\n                    y: cy,\n                },\n            });\n        }\n    }, [analysisId, cx, cy, enabled, jobIndex]);\n\n    const onPickChange = (pickX: number, pickY: number) => {\n        const newX = Math.round(pickX);\n        const newY = Math.round(pickY);\n        if (cx === newX && cy === newY) {\n            return;\n        }\n        setCx(newX);\n        setCy(newY);\n    }\n\n    const renderPickHandle: HandleRenderFunction = (onDragStart, onDrop) => (\n        <DraggableHandle x={cx} y={cy} withCross={true}\n            imageWidth={scanWidth}\n            onDragMove={onPickChange}\n            parentOnDragStart={onDragStart}\n            parentOnDrop={onDrop}\n            constraint={inRectConstraint(scanWidth, scanHeight)} />\n    )\n\n    return { coords: { cx, cy }, handles: renderPickHandle };\n}\n\nexport default useFramePicker;","import * as React from \"react\";\nimport { Dropdown, DropdownProps } from \"semantic-ui-react\";\nimport { AnalysisTypes } from \"../../messages\";\n\ntype ModeOptions = Array<{\n    text: string;\n    value: AnalysisTypes;\n}>;\n\ninterface ModeSelectorProps {\n    modes: ModeOptions,\n    currentMode: AnalysisTypes,\n    onModeChange: (mode: AnalysisTypes) => void,\n}\n\nconst ModeSelector: React.FunctionComponent<ModeSelectorProps> = ({\n    modes, currentMode, onModeChange,\n}) => {\n\n    const onChange = (e: React.SyntheticEvent, data: DropdownProps) => {\n        onModeChange(data.value as AnalysisTypes)\n    }\n\n    return (\n        <>\n            <div>\n                Mode:{' '}\n                <Dropdown\n                    inline={true}\n                    options={modes}\n                    value={currentMode}\n                    onChange={onChange}\n                />\n            </div>\n        </>\n    )\n}\n\nexport default ModeSelector;","import React from \"react\";\nimport { AnalysisTypes } from \"../../messages\";\nimport * as analysisActions from \"../actions\";\n\nconst useSumFrames = ({\n    enabled, jobIndex, analysisId, run\n}: {\n    enabled: boolean, jobIndex: number, analysisId: string,\n    run: typeof analysisActions.Actions.run\n}) => {\n    React.useEffect(() => {\n        if (enabled) {\n            run(analysisId, jobIndex, {\n                type: AnalysisTypes.SUM_FRAMES,\n                parameters: {},\n            });\n        }\n    }, [analysisId, enabled, jobIndex]);\n};\n\nexport default useSumFrames;","import * as React from \"react\";\nimport { useState } from \"react\";\nimport { AnalysisTypes } from \"../../messages\";\nimport { HandleRenderFunction } from \"../../widgets/types\";\nimport * as analysisActions from \"../actions\";\nimport useFramePicker from \"./FramePicker\";\nimport ModeSelector from \"./ModeSelector\";\nimport useSumFrames from \"./SumFrames\";\n\nconst useDefaultFrameView = ({\n    scanWidth, scanHeight, analysisId, run\n}: {\n    scanWidth: number, scanHeight: number,\n    analysisId: string, run: typeof analysisActions.Actions.run\n}) => {\n    const availableModes = [\n        {\n            text: \"Average\",\n            value: AnalysisTypes.SUM_FRAMES,\n        },\n        {\n            text: \"Pick\",\n            value: AnalysisTypes.PICK_FRAME,\n        }\n    ];\n\n    const [frameMode, setMode] = useState(AnalysisTypes.SUM_FRAMES);\n\n    const frameModeSelector = <ModeSelector modes={availableModes} currentMode={frameMode} onModeChange={setMode} />\n\n    const { coords: pickCoords, handles: pickHandles } = useFramePicker({\n        enabled: frameMode === AnalysisTypes.PICK_FRAME,\n        scanWidth, scanHeight,\n        jobIndex: 0,\n        analysisId,\n        run\n    });\n\n    useSumFrames({\n        enabled: frameMode === AnalysisTypes.SUM_FRAMES,\n        jobIndex: 0,\n        analysisId,\n        run\n    })\n\n    const frameViewTitle = (\n        frameMode !== AnalysisTypes.PICK_FRAME ? null : <>Pick: x={pickCoords.cx}, y={pickCoords.cy} &emsp;</>\n    )\n\n    const nullHandles: HandleRenderFunction = (onDragStart, onDrop) => null\n\n    return {\n        frameViewTitle,\n        handles: frameMode !== AnalysisTypes.PICK_FRAME ? nullHandles : pickHandles,\n        frameModeSelector,\n    }\n}\n\nexport default useDefaultFrameView;","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { Button, Icon, IconProps, Segment } from \"semantic-ui-react\";\nimport { RootReducer } from \"../../store\";\nimport * as analysisActions from \"../actions\";\nimport { getAnalysisStatus } from \"../helpers\";\nimport { AnalysisState } from \"../types\";\n\ninterface ToolbarProps {\n    analysis: AnalysisState,\n    busyIdxs: number[],\n    onApply: () => void,\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch, ownProps: ToolbarProps) => {\n    return {\n        handleRemove: () => dispatch(analysisActions.Actions.remove(ownProps.analysis.id)),\n    }\n}\n\ntype MergedProps = ToolbarProps & ReturnType<typeof mapDispatchToProps> & ReturnType<typeof mapStateToProps>;\n\nconst Toolbar: React.SFC<MergedProps> = ({ status, onApply, handleRemove }) => {\n    const running = status === \"busy\";\n    const applyIconProps: IconProps = running ? { name: 'cog', loading: true } : { name: 'check' }\n    return (\n        <Segment attached=\"bottom\">\n            <Button.Group>\n                <Button primary={true} onClick={onApply} icon={true}>\n                    <Icon {...applyIconProps} />\n                    Apply\n                </Button>\n                <Button onClick={handleRemove} icon={true}>\n                    <Icon name='remove' />\n                    Remove\n                </Button>\n            </Button.Group>\n        </Segment>\n    );\n}\n\nconst mapStateToProps = (state: RootReducer, ownProps: ToolbarProps) => {\n    const status = getAnalysisStatus(ownProps.analysis, state.jobs, ownProps.busyIdxs);\n    return {\n        status,\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Toolbar);","import { JobReducerState } from \"../job/reducers\";\nimport { JobRunning } from \"../job/types\";\nimport { AnalysisState } from \"./types\";\n\nexport const getAnalysisStatus = (analysis: AnalysisState, jobs: JobReducerState, jobIdxsToInclude: number[] = []): \"idle\" | \"busy\" => {\n    let filteredJobs = analysis.jobs;\n\n    if (jobIdxsToInclude.length > 0) {\n        filteredJobs = analysis.jobs.filter((jobId: string, idx: number) => {\n            return jobIdxsToInclude.indexOf(idx) !== -1;\n        })\n    }\n\n    return filteredJobs.reduce((prevValue: \"idle\" | \"busy\", jobId: string) => {\n        const isDone = jobs.byId[jobId].running === JobRunning.DONE;\n        return isDone ? prevValue : \"busy\";\n    }, \"idle\");\n}","import * as React from \"react\";\nimport { useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { defaultDebounce } from \"../../helpers\";\nimport ResultList from \"../../job/components/ResultList\";\nimport { AnalysisTypes, DatasetOpen } from \"../../messages\";\nimport { cbToRadius, inRectConstraint, keepOnCY } from \"../../widgets/constraints\";\nimport Disk from \"../../widgets/Disk\";\nimport { DraggableHandle } from \"../../widgets/DraggableHandle\";\nimport { HandleRenderFunction } from \"../../widgets/types\";\nimport * as analysisActions from \"../actions\";\nimport { AnalysisState } from \"../types\";\nimport AnalysisLayoutTwoCol from \"./AnalysisLayoutTwoCol\";\nimport useDefaultFrameView from \"./DefaultFrameView\";\nimport Toolbar from \"./Toolbar\";\n\ninterface AnalysisProps {\n    analysis: AnalysisState,\n    dataset: DatasetOpen,\n}\n\nconst mapDispatchToProps = {\n    run: analysisActions.Actions.run,\n}\n\ntype MergedProps = AnalysisProps & DispatchProps<typeof mapDispatchToProps>\n\nconst CenterOfMassAnalysis: React.SFC<MergedProps> = ({ analysis, dataset, run }) => {\n    const { shape } = dataset.params;\n    const [scanHeight, scanWidth, imageHeight, imageWidth] = shape;\n    const minLength = Math.min(imageWidth, imageHeight);\n    const [cx, setCx] = useState(imageWidth / 2);\n    const [cy, setCy] = useState(imageHeight / 2);\n    const [r, setR] = useState(minLength / 4);\n\n    const rHandle = {\n        x: cx - r,\n        y: cy,\n    }\n\n    const handleCenterChange = defaultDebounce((newCx: number, newCy: number) => {\n        setCx(newCx);\n        setCy(newCy);\n    });\n    const handleRChange = defaultDebounce(setR);\n\n    const frameViewHandles: HandleRenderFunction = (handleDragStart, handleDrop) => (<>\n        <DraggableHandle x={cx} y={cy}\n            imageWidth={imageWidth}\n            onDragMove={handleCenterChange}\n            parentOnDragStart={handleDragStart}\n            parentOnDrop={handleDrop}\n            constraint={inRectConstraint(imageWidth, imageHeight)} />\n        <DraggableHandle x={rHandle.x} y={rHandle.y}\n            imageWidth={imageWidth}\n            onDragMove={cbToRadius(cx, cy, handleRChange)}\n            parentOnDragStart={handleDragStart}\n            parentOnDrop={handleDrop}\n            constraint={keepOnCY(cy)} />\n    </>);\n\n    const frameViewWidgets = (\n        <Disk cx={cx} cy={cy} r={r}\n            imageWidth={imageWidth} imageHeight={imageHeight} />\n    )\n\n    const { frameViewTitle, frameModeSelector, handles: resultHandles } = useDefaultFrameView({\n        scanWidth,\n        scanHeight,\n        analysisId: analysis.id,\n        run\n    })\n\n    const subtitle = <>{frameViewTitle} Disk: center=(x={cx.toFixed(2)}, y={cy.toFixed(2)}), r={r.toFixed(2)}</>;\n\n    const runAnalysis = () => {\n        run(analysis.id, 1, {\n            type: AnalysisTypes.CENTER_OF_MASS,\n            parameters: {\n                shape: \"com\",\n                cx,\n                cy,\n                r\n            }\n        });\n    };\n\n    const toolbar = <Toolbar analysis={analysis} onApply={runAnalysis} busyIdxs={[1]} />\n\n    return (\n        <AnalysisLayoutTwoCol\n            title=\"COM analysis\" subtitle={subtitle}\n            left={<>\n                <ResultList\n                    extraHandles={frameViewHandles} extraWidgets={frameViewWidgets}\n                    jobIndex={0} analysis={analysis.id}\n                    width={imageWidth} height={imageHeight}\n                    selectors={frameModeSelector}\n                />\n            </>}\n            right={<>\n                <ResultList\n                    jobIndex={1} analysis={analysis.id}\n                    width={scanWidth} height={scanHeight}\n                    extraHandles={resultHandles}\n                />\n            </>}\n            toolbar={toolbar}\n        />\n    );\n}\n\nexport default connect(null, mapDispatchToProps)(CenterOfMassAnalysis);","import * as React from \"react\";\nimport { useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { defaultDebounce } from \"../../helpers\";\nimport ResultList from \"../../job/components/ResultList\";\nimport { AnalysisTypes, DatasetOpen } from \"../../messages\";\nimport { cbToRadius, inRectConstraint, keepOnCY } from \"../../widgets/constraints\";\nimport Disk from \"../../widgets/Disk\";\nimport DraggableHandle from \"../../widgets/DraggableHandle\";\nimport { HandleRenderFunction } from \"../../widgets/types\";\nimport * as analysisActions from \"../actions\";\nimport { AnalysisState } from \"../types\";\nimport AnalysisLayoutTwoCol from \"./AnalysisLayoutTwoCol\";\nimport useDefaultFrameView from \"./DefaultFrameView\";\nimport Toolbar from \"./Toolbar\";\n\ninterface AnalysisProps {\n    analysis: AnalysisState,\n    dataset: DatasetOpen,\n}\n\nconst mapDispatchToProps = {\n    run: analysisActions.Actions.run,\n}\n\ntype MergedProps = AnalysisProps & DispatchProps<typeof mapDispatchToProps>;\n\nconst DiskMaskAnalysis: React.SFC<MergedProps> = ({ analysis, dataset, run }) => {\n    const { shape } = dataset.params;\n    const [scanHeight, scanWidth, imageHeight, imageWidth] = shape;\n\n    const minLength = Math.min(imageWidth, imageHeight);\n    const [cx, setCx] = useState(imageWidth / 2);\n    const [cy, setCy] = useState(imageHeight / 2);\n    const [r, setR] = useState(minLength / 4);\n\n    const handleCenterChange = defaultDebounce((newCx: number, newCy: number) => {\n        setCx(newCx);\n        setCy(newCy);\n    });\n    const handleRChange = defaultDebounce(setR);\n\n    const rHandle = {\n        x: cx - r,\n        y: cy,\n    }\n\n    const frameViewHandles: HandleRenderFunction = (handleDragStart, handleDrop) => (<>\n        <DraggableHandle x={cx} y={cy}\n            imageWidth={imageWidth}\n            onDragMove={handleCenterChange}\n            parentOnDragStart={handleDragStart}\n            parentOnDrop={handleDrop}\n            constraint={inRectConstraint(imageWidth, imageHeight)} />\n        <DraggableHandle x={rHandle.x} y={rHandle.y}\n            imageWidth={imageWidth}\n            onDragMove={cbToRadius(cx, cy, handleRChange)}\n            parentOnDragStart={handleDragStart}\n            parentOnDrop={handleDrop}\n            constraint={keepOnCY(cy)} />\n    </>);\n\n    const frameViewWidgets = (\n        <Disk cx={cx} cy={cy} r={r}\n            imageWidth={imageWidth} imageHeight={imageHeight}\n        />\n    );\n\n    const runAnalysis = () => {\n        run(analysis.id, 1, {\n            type: AnalysisTypes.APPLY_DISK_MASK,\n            parameters: {\n                shape: \"disk\",\n                cx,\n                cy,\n                r\n            }\n        });\n    };\n\n    const { frameViewTitle, frameModeSelector, handles: resultHandles } = useDefaultFrameView({\n        scanWidth,\n        scanHeight,\n        analysisId: analysis.id,\n        run\n    })\n\n    const subtitle = <>{frameViewTitle} Disk: center=(x={cx.toFixed(2)}, y={cy.toFixed(2)}), r={r.toFixed(2)}</>;\n\n    const toolbar = <Toolbar analysis={analysis} onApply={runAnalysis} busyIdxs={[1]} />\n\n    return (\n        <AnalysisLayoutTwoCol\n            title=\"Disk analysis\" subtitle={subtitle}\n            left={<>\n                <ResultList\n                    extraHandles={frameViewHandles} extraWidgets={frameViewWidgets}\n                    jobIndex={0} analysis={analysis.id}\n                    width={imageWidth} height={imageHeight}\n                    selectors={frameModeSelector}\n                />\n            </>}\n            right={<>\n                <ResultList\n                    jobIndex={1} analysis={analysis.id}\n                    width={scanWidth} height={scanHeight}\n                    extraHandles={resultHandles}\n                />\n            </>}\n            toolbar={toolbar}\n        />\n    );\n}\n\nexport default connect(null, mapDispatchToProps)(DiskMaskAnalysis);","import * as React from \"react\";\nimport { useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { defaultDebounce } from \"../../helpers\";\nimport ResultList from \"../../job/components/ResultList\";\nimport { AnalysisTypes, DatasetOpen } from \"../../messages\";\nimport { inRectConstraint } from \"../../widgets/constraints\";\nimport DraggableHandle from \"../../widgets/DraggableHandle\";\nimport { HandleRenderFunction } from \"../../widgets/types\";\nimport * as analysisActions from \"../actions\";\nimport { AnalysisState } from \"../types\";\nimport AnalysisLayoutTwoCol from \"./AnalysisLayoutTwoCol\";\nimport useDefaultFrameView from \"./DefaultFrameView\";\nimport Toolbar from \"./Toolbar\";\n\ninterface AnalysisProps {\n    analysis: AnalysisState,\n    dataset: DatasetOpen,\n}\n\nconst mapDispatchToProps = {\n    run: analysisActions.Actions.run,\n}\n\ntype MergedProps = AnalysisProps & DispatchProps<typeof mapDispatchToProps>\n\nconst PointSelectionAnalysis: React.SFC<MergedProps> = ({ analysis, dataset, run }) => {\n    const { shape } = dataset.params;\n    const [scanHeight, scanWidth, imageHeight, imageWidth] = shape;\n\n    const [cx, setCx] = useState(imageWidth / 2);\n    const [cy, setCy] = useState(imageHeight / 2);\n    const handleCenterChange = defaultDebounce((newCx: number, newCy: number) => {\n        setCx(newCx);\n        setCy(newCy);\n    });\n\n    const frameViewHandles: HandleRenderFunction = (handleDragStart, handleDrop) => (<>\n        <DraggableHandle x={cx} y={cy} withCross={true}\n            onDragMove={handleCenterChange}\n            imageWidth={imageWidth}\n            parentOnDragStart={handleDragStart}\n            parentOnDrop={handleDrop}\n            constraint={inRectConstraint(imageWidth, imageHeight)} />\n    </>);\n\n    const { frameViewTitle, frameModeSelector, handles: resultHandles } = useDefaultFrameView({\n        scanWidth,\n        scanHeight,\n        analysisId: analysis.id,\n        run\n    })\n\n    const subtitle = (\n        <>{frameViewTitle} Point: center=(x={cx.toFixed(2)}, y={cy.toFixed(2)})</>\n    )\n\n    const runAnalysis = () => {\n        run(analysis.id, 1, {\n            type: AnalysisTypes.APPLY_POINT_SELECTOR,\n            parameters: {\n                shape: \"point\",\n                cx,\n                cy,\n            }\n        });\n    };\n\n    const toolbar = <Toolbar analysis={analysis} onApply={runAnalysis} busyIdxs={[1]} />\n\n    return (\n        <AnalysisLayoutTwoCol\n            title=\"Point analysis\" subtitle={subtitle}\n            left={<>\n                <ResultList\n                    extraHandles={frameViewHandles}\n                    jobIndex={0} analysis={analysis.id}\n                    width={imageWidth} height={imageHeight}\n                    selectors={frameModeSelector}\n                />\n            </>}\n            right={<>\n                <ResultList\n                    jobIndex={1} analysis={analysis.id}\n                    width={scanWidth} height={scanHeight}\n                    extraHandles={resultHandles}\n                />\n            </>}\n            toolbar={toolbar}\n        />\n    );\n}\n\nexport default connect(null, mapDispatchToProps)(PointSelectionAnalysis);","// from https://stackoverflow.com/a/45100420/540644\nexport function getPathArc(center: { x: number, y: number }, start: number, end: number, radius: number) {\n    if (end === start) { end += 360; }\n    let degree = end - start;\n    degree = degree < 0 ? (degree + 360) : degree;\n    const points = [];\n    points.push(getLocationFromAngle(start, radius, center));\n    points.push(getLocationFromAngle(start + degree / 3, radius, center));\n    points.push(getLocationFromAngle(start + degree * 2 / 3, radius, center));\n    points.push(getLocationFromAngle(end, radius, center));\n    return getCirclePath(points, radius, (degree < 180) ? 0 : 1);\n}\n\nfunction getCirclePath(points: Array<{ x: number, y: number }>, radius: number, clockWise: 0 | 1) {\n    return ['M', points[0].x, points[0].y,\n        'A', radius, radius, 0, 0, clockWise, points[1].x, points[1].y,\n        'A', radius, radius, 0, 0, clockWise, points[2].x, points[2].y,\n        'A', radius, radius, 0, 0, clockWise, points[3].x, points[3].y\n    ].join(' ');\n}\n\nfunction getLocationFromAngle(degree: number, radius: number, center: { x: number, y: number }) {\n    const radian = (degree * Math.PI) / 180;\n    return {\n        x: Math.cos(radian) * radius + center.x,\n        y: Math.sin(radian) * radius + center.y\n    }\n}\n","import * as React from \"react\";\nimport { getPathArc } from \"../helpers/svg\";\nimport { defaultMaskStyles } from \"./styles\";\n\nexport interface RingProps {\n    imageWidth: number,\n    cx: number,\n    cy: number,\n    ri: number,\n    ro: number,\n}\n\nconst Ring: React.SFC<RingProps> = ({ imageWidth, cx, cy, ri, ro }) => {\n    // see also: https://stackoverflow.com/a/37883328/540644\n    const pathSpecs = [\n        getPathArc({ x: cx, y: cy }, 90, 90, ro),\n        getPathArc({ x: cx, y: cy }, 90, 90, ri)\n    ]\n    const pathSpec = pathSpecs.join(' ');\n\n    return (\n        <path d={pathSpec} fillRule=\"evenodd\" style={{ ...defaultMaskStyles(imageWidth) }} />\n    );\n}\n\nexport default Ring;","import * as React from \"react\";\nimport { useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { defaultDebounce } from \"../../helpers\";\nimport ResultList from \"../../job/components/ResultList\";\nimport { AnalysisTypes, DatasetOpen } from \"../../messages\";\nimport { cbToRadius, inRectConstraint, riConstraint, roConstraints } from \"../../widgets/constraints\";\nimport DraggableHandle from \"../../widgets/DraggableHandle\";\nimport Ring from \"../../widgets/Ring\";\nimport { HandleRenderFunction } from \"../../widgets/types\";\nimport * as analysisActions from \"../actions\";\nimport { AnalysisState } from \"../types\";\nimport AnalysisLayoutTwoCol from \"./AnalysisLayoutTwoCol\";\nimport useDefaultFrameView from \"./DefaultFrameView\";\nimport Toolbar from \"./Toolbar\";\n\ninterface AnalysisProps {\n    analysis: AnalysisState,\n    dataset: DatasetOpen,\n}\n\n\nconst mapDispatchToProps = {\n    run: analysisActions.Actions.run,\n}\n\ntype MergedProps = AnalysisProps & DispatchProps<typeof mapDispatchToProps>\n\nconst RadialFourierAnalysis: React.SFC<MergedProps> = ({ analysis, dataset, run }) => {\n    const { shape } = dataset.params;\n    const [scanHeight, scanWidth, imageHeight, imageWidth] = shape;\n\n    const minLength = Math.min(imageWidth, imageHeight);\n    const [cx, setCx] = useState(imageWidth / 2);\n    const [cy, setCy] = useState(imageHeight / 2);\n    const [ri, setRi] = useState(minLength / 4);\n    const [ro, setRo] = useState(minLength / 2);\n    const [nBins] = useState(1);\n    const [maxOrder] = useState(8);\n\n    const riHandle = {\n        x: cx - ri,\n        y: cy,\n    }\n    const roHandle = {\n        x: cx - ro,\n        y: cy,\n    }\n\n    const handleCenterChange = defaultDebounce((newCx: number, newCy: number) => {\n        setCx(newCx);\n        setCy(newCy);\n    });\n    const handleRIChange = defaultDebounce(setRi);\n    const handleROChange = defaultDebounce(setRo);\n\n    const frameViewHandles: HandleRenderFunction = (handleDragStart, handleDrop) => (<>\n        <DraggableHandle x={cx} y={cy}\n            imageWidth={imageWidth}\n            onDragMove={handleCenterChange}\n            parentOnDrop={handleDrop}\n            parentOnDragStart={handleDragStart}\n            constraint={inRectConstraint(imageWidth, imageHeight)} />\n        <DraggableHandle x={roHandle.x} y={roHandle.y}\n            imageWidth={imageWidth}\n            onDragMove={cbToRadius(cx, cy, handleROChange)}\n            parentOnDrop={handleDrop}\n            parentOnDragStart={handleDragStart}\n            constraint={roConstraints(riHandle.x, cy)} />\n        <DraggableHandle x={riHandle.x} y={riHandle.y}\n            imageWidth={imageWidth}\n            parentOnDrop={handleDrop}\n            parentOnDragStart={handleDragStart}\n            onDragMove={cbToRadius(cx, cy, handleRIChange)}\n            constraint={riConstraint(roHandle.x, cy)} />\n    </>);\n\n    const frameViewWidgets = (\n        <Ring cx={cx} cy={cy} ri={ri} ro={ro}\n            imageWidth={imageWidth} />\n    )\n\n    const { frameViewTitle, frameModeSelector, handles: resultHandles } = useDefaultFrameView({\n        scanWidth,\n        scanHeight,\n        analysisId: analysis.id,\n        run\n    })\n\n    const subtitle = (\n        <>{frameViewTitle} Ring: center=(x={cx.toFixed(2)}, y={cy.toFixed(2)}), ri={ri.toFixed(2)}, ro={ro.toFixed(2)}</>\n    )\n\n    const runAnalysis = () => {\n        run(analysis.id, 1, {\n            type: AnalysisTypes.RADIAL_FOURIER,\n            parameters: {\n                shape: \"radial_fourier\",\n                cx,\n                cy,\n                ri,\n                ro,\n                n_bins: nBins,\n                max_order: maxOrder,\n            }\n        });\n    };\n\n    const toolbar = <Toolbar analysis={analysis} onApply={runAnalysis} busyIdxs={[1]} />\n\n    return (\n        <AnalysisLayoutTwoCol\n            title=\"Radial Fourier analysis\" subtitle={subtitle}\n            left={<>\n                <ResultList\n                    extraHandles={frameViewHandles} extraWidgets={frameViewWidgets}\n                    jobIndex={0} analysis={analysis.id}\n                    width={imageWidth} height={imageHeight}\n                    selectors={frameModeSelector}\n                />\n            </>}\n            right={<>\n                <ResultList\n                    jobIndex={1} analysis={analysis.id}\n                    width={scanWidth} height={scanHeight}\n                    extraHandles={resultHandles}\n                />\n            </>}\n            toolbar={toolbar}\n        />\n    );\n}\n\nexport default connect(null, mapDispatchToProps)(RadialFourierAnalysis);","import * as React from \"react\";\nimport { useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { defaultDebounce } from \"../../helpers\";\nimport ResultList from \"../../job/components/ResultList\";\nimport { AnalysisTypes, DatasetOpen } from \"../../messages\";\nimport { cbToRadius, inRectConstraint, riConstraint, roConstraints } from \"../../widgets/constraints\";\nimport DraggableHandle from \"../../widgets/DraggableHandle\";\nimport Ring from \"../../widgets/Ring\";\nimport { HandleRenderFunction } from \"../../widgets/types\";\nimport * as analysisActions from \"../actions\";\nimport { AnalysisState } from \"../types\";\nimport AnalysisLayoutTwoCol from \"./AnalysisLayoutTwoCol\";\nimport useDefaultFrameView from \"./DefaultFrameView\";\nimport Toolbar from \"./Toolbar\";\n\ninterface AnalysisProps {\n    analysis: AnalysisState,\n    dataset: DatasetOpen,\n}\n\nconst mapDispatchToProps = {\n    run: analysisActions.Actions.run,\n}\n\ntype MergedProps = AnalysisProps & DispatchProps<typeof mapDispatchToProps>;\n\nconst RingMaskAnalysis: React.SFC<MergedProps> = ({ analysis, dataset, run }) => {\n    const { shape } = dataset.params;\n    const [scanHeight, scanWidth, imageHeight, imageWidth] = shape;\n    const minLength = Math.min(imageWidth, imageHeight);\n\n    const [cx, setCx] = useState(imageWidth / 2);\n    const [cy, setCy] = useState(imageHeight / 2);\n    const [ri, setRi] = useState(minLength / 4);\n    const [ro, setRo] = useState(minLength / 2);\n\n    const riHandle = {\n        x: cx - ri,\n        y: cy,\n    }\n    const roHandle = {\n        x: cx - ro,\n        y: cy,\n    }\n\n    const handleCenterChange = defaultDebounce((newCx: number, newCy: number) => {\n        setCx(newCx);\n        setCy(newCy);\n    });\n    const handleRIChange = defaultDebounce(setRi);\n    const handleROChange = defaultDebounce(setRo);\n\n    const frameViewHandles: HandleRenderFunction = (handleDragStart, handleDrop) => (<>\n        <DraggableHandle x={cx} y={cy}\n            imageWidth={imageWidth}\n            onDragMove={handleCenterChange}\n            parentOnDrop={handleDrop}\n            parentOnDragStart={handleDragStart}\n            constraint={inRectConstraint(imageWidth, imageHeight)} />\n        <DraggableHandle x={roHandle.x} y={roHandle.y}\n            imageWidth={imageWidth}\n            onDragMove={cbToRadius(cx, cy, handleROChange)}\n            parentOnDrop={handleDrop}\n            parentOnDragStart={handleDragStart}\n            constraint={roConstraints(riHandle.x, cy)} />\n        <DraggableHandle x={riHandle.x} y={riHandle.y}\n            imageWidth={imageWidth}\n            parentOnDrop={handleDrop}\n            parentOnDragStart={handleDragStart}\n            onDragMove={cbToRadius(cx, cy, handleRIChange)}\n            constraint={riConstraint(roHandle.x, cy)} />\n    </>);\n\n    const frameViewWidgets = (\n        <Ring cx={cx} cy={cy} ri={ri} ro={ro}\n            imageWidth={imageWidth} />\n    )\n\n    const runAnalysis = () => {\n        run(analysis.id, 1, {\n            type: AnalysisTypes.APPLY_RING_MASK,\n            parameters: {\n                shape: \"ring\",\n                cx,\n                cy,\n                ri,\n                ro,\n            }\n        });\n    };\n\n    const { frameViewTitle, frameModeSelector, handles: resultHandles } = useDefaultFrameView({\n        scanWidth,\n        scanHeight,\n        analysisId: analysis.id,\n        run\n    })\n\n    const subtitle = (\n        <>{frameViewTitle} Ring: center=(x={cx.toFixed(2)}, y={cy.toFixed(2)}), ri={ri.toFixed(2)}, ro={ro.toFixed(2)}</>\n    )\n\n    const toolbar = <Toolbar analysis={analysis} onApply={runAnalysis} busyIdxs={[1]} />\n\n    return (\n        <AnalysisLayoutTwoCol\n            title=\"Ring analysis\" subtitle={subtitle}\n            left={<>\n                <ResultList\n                    extraHandles={frameViewHandles} extraWidgets={frameViewWidgets}\n                    jobIndex={0} analysis={analysis.id}\n                    width={imageWidth} height={imageHeight}\n                    selectors={frameModeSelector}\n                />\n            </>}\n            right={<>\n                <ResultList\n                    extraWidgets={frameViewWidgets}\n                    jobIndex={1} analysis={analysis.id}\n                    width={scanWidth} height={scanHeight}\n                    extraHandles={resultHandles}\n                />\n            </>}\n            toolbar={toolbar}\n        />\n    );\n}\n\nexport default connect(null, mapDispatchToProps)(RingMaskAnalysis);","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { assertNotReached } from '../../helpers';\nimport { AnalysisTypes, DatasetStatus } from \"../../messages\";\nimport { RootReducer } from \"../../store\";\nimport { AnalysisState } from \"../types\";\nimport CenterOfMassAnalysis from \"./CenterOfMassAnalysis\";\nimport DiskMaskAnalysis from \"./DiskMaskAnalysis\";\nimport PointSelectionAnalysis from \"./PointSelectionAnalysis\";\nimport RadialFourierAnalysis from \"./RadialFourierAnalysis\";\nimport RingMaskAnalysis from \"./RingMaskAnalysis\";\n\ninterface AnalysisProps {\n    analysis: AnalysisState,\n}\n\nconst mapStateToProps = (state: RootReducer, ownProps: AnalysisProps) => {\n    return {\n        dataset: state.datasets.byId[ownProps.analysis.dataset],\n    }\n}\n\ntype MergedProps = AnalysisProps & ReturnType<typeof mapStateToProps>;\n\nconst AnalysisComponent: React.SFC<MergedProps> = ({ analysis, dataset }) => {\n    if (dataset.status !== DatasetStatus.OPEN) {\n        return null;\n    }\n\n    switch (analysis.mainAnalysisType) {\n        case AnalysisTypes.APPLY_RING_MASK: {\n            return <RingMaskAnalysis dataset={dataset} analysis={analysis} />;\n        }\n        case AnalysisTypes.APPLY_DISK_MASK: {\n            return <DiskMaskAnalysis dataset={dataset} analysis={analysis} />;\n        };\n        case AnalysisTypes.CENTER_OF_MASS: {\n            return <CenterOfMassAnalysis dataset={dataset} analysis={analysis} />;\n        }\n        case AnalysisTypes.APPLY_POINT_SELECTOR: {\n            return <PointSelectionAnalysis dataset={dataset} analysis={analysis} />\n        }\n        case AnalysisTypes.RADIAL_FOURIER: {\n            return <RadialFourierAnalysis dataset={dataset} analysis={analysis} />\n        }\n    }\n\n    return assertNotReached(\"unknown analysis type\");\n}\n\nexport default connect(mapStateToProps)(AnalysisComponent);","import * as React from \"react\";\nimport { AnalysisReducerState } from \"../reducers\";\nimport Analysis from \"./Analysis\";\n\ninterface AnalysisProps {\n    analyses: AnalysisReducerState,\n}\n\nconst AnalysisList: React.SFC<AnalysisProps> = ({ analyses }) => {\n    return (<>{\n        analyses.ids.map(analysisId => <Analysis key={analysisId} analysis={analyses.byId[analysisId]} />)\n    }</>);\n}\n\nexport default AnalysisList;","interface IdMap<R> {\n    [s: string]: R\n}\n\nexport interface ById<R> {\n    ids: string[],\n    byId: IdMap<R>,\n};\n\n// TODO: make ById DeepReadonly\n// import { DeepReadonly } from 'utility-types'\n\nexport function updateById<R>(state: ById<R>, id: string, partialRecord: Partial<R>): ById<R> {\n    const newObj = Object.assign({}, state.byId[id], partialRecord);\n    const newById = Object.assign({}, state.byId, { [id]: newObj });\n    return Object.assign({}, state, { byId: newById });\n}\n\nexport function insertById<R>(state: ById<R>, id: string, record: R): ById<R> {\n    const newById = Object.assign({}, state.byId, { [id]: record });\n    const newIds = [...state.ids, id];\n    return { byId: newById, ids: newIds };\n}\n\nexport function constructById<R>(items: R[], key: (k: R) => string): IdMap<R> {\n    const byId = items.reduce((acc, item) => Object.assign(acc, {\n        [key(item)]: item,\n    }), {} as IdMap<R>);\n    return byId;\n}\n\nexport type Predicate<R> = (item: R) => boolean;\n\nexport function filterWithPred<R>(state: ById<R>, pred: Predicate<R>): ById<R> {\n    const ids = state.ids.filter(id => pred(state.byId[id]));\n    const byId: IdMap<R> = ids.reduce((acc, id) => Object.assign(acc, {\n        [id]: state.byId[id],\n    }), {});\n    return {\n        byId,\n        ids,\n    };\n}","import { AnalysisTypes, PickFrameDetails, SumFramesDetails } from \"../messages\";\n\nexport type AnalysisStatus = \"busy\" | \"idle\";\n\nexport type JobList = string[];\n\nexport type JobHistory = string[][];\n\nexport type FrameAnalysisDetails = PickFrameDetails | SumFramesDetails;\n\nexport interface Analysis {\n    id: string,\n    dataset: string,\n    jobs: JobList,\n    jobHistory: JobHistory,\n    mainAnalysisType: AnalysisTypes,\n}\n\nexport type AnalysisState = Analysis & {\n};\n\ninterface AnalysisMetadataItem {\n    long: string,\n    short: string,\n    showInUI: boolean,\n}\n\nexport const AnalysisMetadata: { [s: string]: AnalysisMetadataItem } = {\n    [AnalysisTypes.APPLY_RING_MASK]: {\n        long: \"Apply a ring mask with center cx, cy; inner radius ri, outer radius ro\",\n        short: \"Ring\",\n        showInUI: true,\n    },\n    [AnalysisTypes.APPLY_DISK_MASK]: {\n        long: \"Apply a disk mask with center cx, cy; radius r\",\n        short: \"Disk\",\n        showInUI: true,\n    },\n    [AnalysisTypes.CENTER_OF_MASS]: {\n        long: \"Compute the center of mass of all diffraction images\",\n        short: \"Center of mass\",\n        showInUI: true,\n    },\n    [AnalysisTypes.APPLY_POINT_SELECTOR]: {\n        long: \"Create an image from a single pixel selected in the detector\",\n        short: \"Point selection\",\n        showInUI: true,\n    },\n    [AnalysisTypes.SUM_FRAMES]: {\n        long: \"Create a sum of all detector frames\",\n        short: \"Sum all frames\",\n        showInUI: false,\n    },\n    [AnalysisTypes.PICK_FRAME]: {\n        long: \"Pick a single frame\",\n        short: \"Pick frame\",\n        showInUI: false,\n    },\n    [AnalysisTypes.RADIAL_FOURIER]: {\n        long: \"Compute a radial Fourier analysis\",\n        short: \"Radial Fourier\",\n        showInUI: true,\n    },\n}","import { ActionsUnion, createAction } from '../helpers/actionHelpers';\nimport { DatasetCreateParams, DatasetFormParams, DatasetState } from '../messages';\n\nexport enum ActionTypes {\n    OPEN = 'DATASET_OPEN',\n    CANCEL_OPEN = 'DATASET_CANCEL_OPEN',\n    CREATE = 'DATASET_CREATE',\n    CREATED = 'DATASET_CREATED',\n    ERROR = 'DATASET_ERROR',\n    DELETE = 'DATASET_DELETE',\n    DELETED = 'DATASET_DELETED',\n    DETECT = 'DATASET_DETECT',\n    DETECTED = 'DATASET_DETECTED',\n    DETECT_FAILED = 'DATASET_DETECT_FAILED',\n}\n\nexport const Actions = {\n    open: (path: string, initialParams?: DatasetFormParams) => createAction(ActionTypes.OPEN, { path, initialParams }),\n    cancelOpen: () => createAction(ActionTypes.CANCEL_OPEN),\n    create: (dataset: DatasetCreateParams) => createAction(ActionTypes.CREATE, { dataset }),\n    created: (dataset: DatasetState) => createAction(ActionTypes.CREATED, { dataset }),\n    error: (dataset: string, msg: string, timestamp: number, id: string) => createAction(ActionTypes.ERROR, { dataset, msg, timestamp, id }),\n    delete: (dataset: string) => createAction(ActionTypes.DELETE, { dataset }),\n    deleted: (dataset: string) => createAction(ActionTypes.DELETED, { dataset }),\n    detect: (path: string) => createAction(ActionTypes.DETECT, { path }),\n    detected: (path: string, params: DatasetFormParams) => createAction(ActionTypes.DETECTED, { path, params }),\n    detectFailed: (path: string) => createAction(ActionTypes.DETECT_FAILED, { path }),\n}\n\nexport type Actions = ActionsUnion<typeof Actions>;\n","import * as React from \"react\";\nimport { Dropdown, DropdownItemProps } from \"semantic-ui-react\";\nimport { getEnumValues } from \"../../helpers\";\nimport { AnalysisTypes } from \"../../messages\";\nimport { AnalysisMetadata } from \"../types\";\n\n\nconst getMetadata = (t: any) => AnalysisMetadata[AnalysisTypes[t]];\nconst analysisTypeKeys = getEnumValues(AnalysisTypes);\nconst analysisTypeOptions = analysisTypeKeys.filter(t => getMetadata(t).showInUI).map(t => ({\n    text: getMetadata(t).short,\n    value: AnalysisTypes[t],\n}));\n\ninterface AnalysisSelectProps {\n    onClick: (analysisType: AnalysisTypes) => void,\n    label: string,\n}\n\nconst selectData = (fn: (v: AnalysisTypes) => void) => (e: React.MouseEvent, data: DropdownItemProps) => {\n    return fn(data.value as AnalysisTypes);\n}\n\nconst AnalysisSelect: React.SFC<AnalysisSelectProps> = ({ onClick, label }) => {\n    return (\n        <Dropdown text={label} icon='add' floating={true} labeled={true} button={true} className='icon'>\n            <Dropdown.Menu>\n                <Dropdown.Header content='implemented analyses' />\n                {analysisTypeOptions.map(option => <Dropdown.Item key={option.value} onClick={selectData(onClick)} {...option} />)}\n            </Dropdown.Menu>\n        </Dropdown>\n    );\n}\n\nexport default AnalysisSelect;","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport * as analysisActions from \"../../analysis/actions\";\nimport AnalysisSelect from \"../../analysis/components/AnalysisSelect\";\nimport { AnalysisTypes, DatasetState } from \"../../messages\";\n\ninterface DatasetProps {\n    dataset: DatasetState\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch, ownProps: DatasetProps) => {\n    return {\n        handleAddAnalysis: (type: AnalysisTypes) => {\n            dispatch(analysisActions.Actions.create(ownProps.dataset.id, type));\n        },\n    }\n}\ntype MergedProps = DatasetProps & ReturnType<typeof mapDispatchToProps>;\n\nconst AddAnalysis: React.SFC<MergedProps> = ({ handleAddAnalysis }) => {\n    return <AnalysisSelect onClick={handleAddAnalysis} label='Add analysis' />\n}\n\n\nexport default connect(null, mapDispatchToProps)(AddAnalysis);","import * as React from \"react\";\nimport { Table } from \"semantic-ui-react\";\nimport { DatasetState } from \"../../messages\";\n\ninterface DatasetProps {\n    dataset: DatasetState\n}\n\nconst renderParamValue = (value: any) => {\n    if (value instanceof Array) {\n        return `(${value.join(\",\")})`;\n    } else {\n        return value;\n    }\n}\n\nconst renderParams = (params: any) => {\n    return Object.keys(params).map((key: string, idx: number) => {\n        return (\n            <Table.Row key={idx}>\n                <Table.Cell>{key}</Table.Cell>\n                <Table.Cell>{renderParamValue(params[key])}</Table.Cell>\n            </Table.Row>\n        );\n    })\n}\n\n\nconst DatasetParams: React.SFC<DatasetProps> = ({ dataset }) => {\n    return (\n        <Table>\n            <Table.Header>\n                <Table.Row>\n                    <Table.HeaderCell>Parameter</Table.HeaderCell>\n                    <Table.HeaderCell>Value</Table.HeaderCell>\n                </Table.Row>\n            </Table.Header>\n            <Table.Body>\n                {renderParams(dataset.params)}\n            </Table.Body>\n        </Table>\n    );\n}\n\n\nexport default DatasetParams;","import * as React from \"react\";\nimport { Table } from \"semantic-ui-react\";\nimport { DatasetOpen, DiagElemMsg } from \"../../messages\";\nimport DatasetParams from \"./DatasetParams\";\n\ninterface DatasetInfoProps {\n    dataset: DatasetOpen,\n}\n\nconst renderValue = (elem: DiagElemMsg) => {\n    if (elem.value instanceof Array) {\n        return <DiagElems diagnostics={elem.value} />\n    } else {\n        return elem.value;\n    }\n}\n\nconst DiagElem: React.SFC<{ elem: DiagElemMsg }> = ({ elem }) => {\n    return (\n        <Table.Row>\n            <Table.Cell>{elem.name}</Table.Cell>\n            <Table.Cell>{renderValue(elem)}</Table.Cell>\n        </Table.Row>\n    )\n}\n\nconst DiagElems: React.SFC<{ diagnostics: DiagElemMsg[] }> = ({ diagnostics }) => {\n    if (diagnostics.length === 0) {\n        return null;\n    }\n    return (\n        <Table>\n            <Table.Header>\n                <Table.Row>\n                    <Table.HeaderCell>Name</Table.HeaderCell>\n                    <Table.HeaderCell>Value</Table.HeaderCell>\n                </Table.Row>\n            </Table.Header>\n            <Table.Body>\n                {diagnostics.map((elem, idx) => (\n                    <DiagElem elem={elem} key={idx} />\n                ))}\n            </Table.Body>\n        </Table>\n    );\n}\n\nconst DatasetInfo: React.SFC<DatasetInfoProps> = ({ dataset }) => {\n    return (\n        <>\n            <DatasetParams dataset={dataset} />\n            <DiagElems diagnostics={dataset.diagnostics} />\n        </>\n    );\n}\n\nexport default DatasetInfo;","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { Button } from \"semantic-ui-react\";\nimport { DatasetState } from \"../../messages\";\nimport * as datasetActions from \"../actions\";\n\ninterface DatasetProps {\n    dataset: DatasetState,\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch, ownProps: DatasetProps) => {\n    return {\n        handleRemoveDataset: () => {\n            dispatch(datasetActions.Actions.delete(ownProps.dataset.id));\n        }\n    }\n}\n\ntype MergedProps = DatasetProps & ReturnType<typeof mapDispatchToProps>;\n\nconst DatasetToolbar: React.SFC<MergedProps> = ({ dataset, handleRemoveDataset }) => {\n    return (\n        <>\n            <Button icon=\"remove\" labelPosition=\"left\" onClick={handleRemoveDataset} content='Close Dataset' />\n        </>\n    );\n}\n\n\nexport default connect(null, mapDispatchToProps)(DatasetToolbar);","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Header, Icon, Message, Modal, Popup, Segment } from 'semantic-ui-react';\nimport AnalysisList from \"../../analysis/components/AnalysisList\";\nimport { AnalysisState } from \"../../analysis/types\";\nimport { filterWithPred } from \"../../helpers/reducerHelpers\";\nimport { DatasetState, DatasetStatus } from \"../../messages\";\nimport { RootReducer } from \"../../store\";\nimport AddAnalysis from \"./AddAnalysis\";\nimport DatasetInfo from \"./DatasetInfo\";\nimport DatasetToolbar from \"./DatasetToolbar\";\n\ninterface DatasetProps {\n    dataset: DatasetState\n}\n\nconst mapStateToProps = (state: RootReducer, ownProps: DatasetProps) => {\n    const p = (analysis: AnalysisState) => analysis.dataset === ownProps.dataset.id;\n    return {\n        analyses: filterWithPred(state.analyses, p),\n    }\n}\n\ntype MergedProps = DatasetProps & ReturnType<typeof mapStateToProps>;\n\nconst DatasetComponent: React.SFC<MergedProps> = ({ dataset, analyses }) => {\n    const msg = {\n        [DatasetStatus.OPENING]: `Opening dataset ${dataset.params.name}`,\n        [DatasetStatus.DELETING]: `Closing dataset ${dataset.params.name}`,\n    }\n    if (dataset.status === DatasetStatus.OPENING || dataset.status === DatasetStatus.DELETING) {\n        return (\n            <>\n                <Header as=\"h2\" dividing={true}>{dataset.params.name}</Header>\n                <Message icon={true}>\n                    <Icon name='cog' loading={true} />\n                    <Message.Content>\n                        <Message.Header>{msg[dataset.status]}</Message.Header>\n                    </Message.Content>\n                </Message>\n            </>\n        );\n    }\n\n    return (\n        <Segment.Group style={{ marginTop: \"3em\", marginBottom: \"3em\" }}>\n            <Segment.Group horizontal={true}>\n                <Segment>\n                    <Header as=\"h2\">\n                        <Icon name=\"database\" />\n                        <Modal trigger={\n                            <Header.Content>\n                                {dataset.params.name}\n                                {' '}\n                                <Icon name=\"info circle\" size=\"small\" link={true} />\n                            </Header.Content>\n                        }>\n                            <Popup.Header>{dataset.params.type} Dataset {dataset.params.name}</Popup.Header>\n                            <Popup.Content>\n                                <DatasetInfo dataset={dataset} />\n                            </Popup.Content>\n                        </Modal>\n                    </Header>\n                </Segment>\n                <Segment style={{ flexShrink: 1, flexGrow: 0 }}>\n                    <DatasetToolbar dataset={dataset} />\n                </Segment>\n            </Segment.Group>\n            {\n                analyses.ids.length > 0 ? (\n                    <>\n                        <Segment>\n                            <AnalysisList analyses={analyses} />\n                        </Segment>\n                    </>\n                ) : null\n            }\n            <Segment textAlign=\"center\">\n                <AddAnalysis dataset={dataset} />\n            </Segment>\n        </Segment.Group>\n    );\n}\n\nconst DatasetContainer = connect(mapStateToProps)(DatasetComponent);\n\nexport default DatasetContainer;","\nexport function parseNumList(nums: string) {\n    return nums.split(\",\").map(part => +part);\n}\n\nexport function getInitial<T extends object, K extends keyof T, V>(key: K, otherwise: V, values?: T): V | T[K] {\n    if (!values) {\n        return otherwise;\n    }\n    const res = values[key] !== undefined ? values[key] : otherwise;\n    return res;\n}","import { FormikProps, withFormik } from \"formik\";\nimport * as React from \"react\";\nimport { Button, Form } from \"semantic-ui-react\";\nimport { Omit } from \"../../helpers/types\";\nimport { DatasetParamsBLO, DatasetTypes } from \"../../messages\";\nimport { getInitial, parseNumList } from \"../helpers\";\nimport { OpenFormProps } from \"../types\";\n\n// some fields have different types in the form vs. in messages\ntype DatasetParamsBLOForForm = Omit<DatasetParamsBLO,\n    \"path\"\n    | \"type\"\n    | \"tileshape\"> & {\n        tileshape: string,\n    };\n\ntype FormValues = DatasetParamsBLOForForm\n\n\ntype MergedProps = FormikProps<FormValues> & OpenFormProps<DatasetParamsBLO>;\n\nconst BLOFileParamsForm: React.SFC<MergedProps> = ({\n    values,\n    touched,\n    errors,\n    dirty,\n    isSubmitting,\n    handleChange,\n    handleBlur,\n    handleSubmit,\n    handleReset,\n    onCancel,\n}) => {\n    return (\n        <Form onSubmit={handleSubmit}>\n            <Form.Field>\n                <label htmlFor=\"id_name\">Name:</label>\n                <input type=\"text\" name=\"name\" id=\"id_name\" value={values.name}\n                    onChange={handleChange}\n                    onBlur={handleBlur} />\n                {errors.name && touched.name && errors.name}\n            </Form.Field>\n            <Form.Field>\n                <label htmlFor=\"id_tileshape\">Tileshape:</label>\n                <input type=\"text\" name=\"tileshape\" id=\"id_tileshape\" value={values.tileshape}\n                    onChange={handleChange} onBlur={handleBlur} />\n            </Form.Field>\n\n            <Button primary={true} type=\"submit\" disabled={isSubmitting}>Load Dataset</Button>\n            <Button type=\"button\" onClick={onCancel}>Cancel</Button>\n        </Form>\n    )\n}\n\nexport default withFormik<OpenFormProps<DatasetParamsBLO>, FormValues>({\n    mapPropsToValues: ({ initial }) => ({\n        name: getInitial(\"name\", \"\", initial),\n        tileshape: getInitial(\"tileshape\", \"1, 8, 128, 128\", initial).toString(),\n    }),\n    handleSubmit: (values, formikBag) => {\n        const { onSubmit, path } = formikBag.props;\n        onSubmit({\n            path,\n            type: DatasetTypes.BLO,\n            name: values.name,\n            tileshape: parseNumList(values.tileshape),\n        });\n    }\n})(BLOFileParamsForm);\n","import { ActionsUnion, createAction } from \"../helpers/actionHelpers\";\n\nexport enum ActionTypes {\n    DISMISS = \"ERROR_DISMISS\",\n}\n\nexport const Actions = {\n    dismiss: (id: string) => createAction(ActionTypes.DISMISS, { id }),\n}\n\nexport type Actions = ActionsUnion<typeof Actions>;","import * as React from \"react\";\nimport { Dropdown, DropdownProps } from \"semantic-ui-react\";\nimport { getEnumValues } from \"../../helpers\";\nimport { DatasetTypes } from \"../../messages\";\n\n\nconst datasetTypeKeys = getEnumValues(DatasetTypes);\nconst datasetTypeOptions = datasetTypeKeys.map(t => ({\n    // text: DatasetTypeMetadata[DatasetTypes[t as any]].short,\n    text: DatasetTypes[t],\n    value: DatasetTypes[t],\n}));\n\ninterface DatasetTypeSelectProps {\n    onClick: (e: React.SyntheticEvent, data: DropdownProps) => void,\n    currentType: DatasetTypes,\n}\n\nconst DatasetTypeSelect: React.SFC<DatasetTypeSelectProps> = ({ currentType, onClick }) => {\n    return (\n        <>\n            <Dropdown\n                inline={true}\n                options={datasetTypeOptions}\n                value={currentType}\n                onChange={onClick}\n            />\n        </>\n    );\n}\n\nexport default DatasetTypeSelect;","import { FormikProps, withFormik } from \"formik\";\nimport * as React from \"react\";\nimport { Button, Form } from \"semantic-ui-react\";\nimport { Omit } from \"../../helpers/types\";\nimport { DatasetParamsEMPAD, DatasetTypes } from \"../../messages\";\nimport { getInitial, parseNumList } from \"../helpers\";\nimport { OpenFormProps } from \"../types\";\n\n// some fields have different types in the form vs. in messages\ntype DatasetParamsEMPADForForm = Omit<DatasetParamsEMPAD,\n    \"path\"\n    | \"type\"\n    | \"scan_size\"\n> & {\n    scan_size: string,\n};\n\ntype FormValues = DatasetParamsEMPADForForm\n\ntype MergedProps = FormikProps<FormValues> & OpenFormProps<DatasetParamsEMPAD>;\n\nconst RawFileParamsForm: React.SFC<MergedProps> = ({\n    values,\n    touched,\n    errors,\n    dirty,\n    isSubmitting,\n    handleChange,\n    handleBlur,\n    handleSubmit,\n    handleReset,\n    onCancel,\n}) => {\n    return (\n        <Form onSubmit={handleSubmit}>\n            <Form.Field>\n                <label htmlFor=\"id_name\">Name:</label>\n                <input type=\"text\" name=\"name\" id=\"id_name\" value={values.name}\n                    onChange={handleChange}\n                    onBlur={handleBlur} />\n                {errors.name && touched.name && errors.name}\n            </Form.Field>\n            <Form.Field>\n                <label htmlFor=\"id_scan_size\">Scan Size:</label>\n                <input type=\"text\" name=\"scan_size\" id=\"id_scan_size\" value={values.scan_size}\n                    onChange={handleChange} onBlur={handleBlur} />\n            </Form.Field>\n            <Button primary={true} type=\"submit\" disabled={isSubmitting}>Load Dataset</Button>\n            <Button type=\"button\" onClick={onCancel}>Cancel</Button>\n        </Form>\n    )\n}\n\nexport default withFormik<OpenFormProps<DatasetParamsEMPAD>, FormValues>({\n    mapPropsToValues: ({ initial }) => ({\n        name: getInitial(\"name\", \"\", initial),\n        scan_size: getInitial(\"scan_size\", \"\", initial).toString(),\n    }),\n    handleSubmit: (values, formikBag) => {\n        const { onSubmit, path } = formikBag.props;\n        onSubmit({\n            path,\n            type: DatasetTypes.EMPAD,\n            name: values.name,\n            scan_size: parseNumList(values.scan_size),\n        });\n    }\n})(RawFileParamsForm);\n\n","import { DatasetParamsFRMS6 } from \"../../messages\";\n\nimport { FormikProps, withFormik } from \"formik\";\nimport * as React from \"react\";\nimport { Button, Form } from \"semantic-ui-react\";\nimport { Omit } from \"../../helpers/types\";\nimport { DatasetTypes } from \"../../messages\";\nimport { getInitial } from \"../helpers\";\nimport { OpenFormProps } from \"../types\";\n\n// some fields have different types in the form vs. in messages\ntype DatasetParamsFRMS6ForForm = Omit<DatasetParamsFRMS6,\n    \"path\" | \"type\">;\n\ntype FormValues = DatasetParamsFRMS6ForForm\n\n\ntype MergedProps = FormikProps<FormValues> & OpenFormProps<DatasetParamsFRMS6>;\nconst FRMS6ParamsForm: React.SFC<MergedProps> = ({\n    values,\n    touched,\n    errors,\n    dirty,\n    isSubmitting,\n    handleChange,\n    handleBlur,\n    handleSubmit,\n    handleReset,\n    onCancel,\n}) => {\n    return (\n        <Form onSubmit={handleSubmit}>\n            <Form.Field>\n                <label htmlFor=\"id_name\">Name:</label>\n                <input type=\"text\" name=\"name\" id=\"id_name\" value={values.name}\n                    onChange={handleChange}\n                    onBlur={handleBlur} />\n                {errors.name && touched.name && errors.name}\n            </Form.Field>\n\n            <Button primary={true} type=\"submit\" disabled={isSubmitting}>Load Dataset</Button>\n            <Button type=\"button\" onClick={onCancel}>Cancel</Button>\n        </Form>\n    )\n}\n\nexport default withFormik<OpenFormProps<DatasetParamsFRMS6>, FormValues>({\n    mapPropsToValues: ({ initial }) => ({\n        name: getInitial(\"name\", \"\", initial),\n    }),\n    handleSubmit: (values, formikBag) => {\n        const { onSubmit, path } = formikBag.props;\n        onSubmit({\n            path,\n            type: DatasetTypes.FRMS6,\n            name: values.name,\n        });\n    }\n})(FRMS6ParamsForm);\n","import { FormikProps, withFormik } from \"formik\";\nimport * as React from \"react\";\nimport { Button, Form } from \"semantic-ui-react\";\nimport { Omit } from \"../../helpers/types\";\nimport { DatasetParamsHDF5, DatasetTypes } from \"../../messages\";\nimport { getInitial } from \"../helpers\";\nimport { OpenFormProps } from \"../types\";\n\ntype DatasetParamsHDF5ForForm = Omit<DatasetParamsHDF5, \"path\" | \"type\" | \"tileshape\"> & { tileshape: string, };\n\ntype FormValues = DatasetParamsHDF5ForForm\n\ntype MergedProps = FormikProps<FormValues> & OpenFormProps<DatasetParamsHDF5>;\n\nconst HDF5ParamsForm: React.SFC<MergedProps> = ({\n    values,\n    touched,\n    errors,\n    dirty,\n    isSubmitting,\n    handleChange,\n    handleBlur,\n    handleSubmit,\n    handleReset,\n    onCancel,\n}) => {\n    return (\n        <Form onSubmit={handleSubmit}>\n            <Form.Field>\n                <label htmlFor=\"id_name\">Name:</label>\n                <input type=\"text\" name=\"name\" id=\"id_name\" value={values.name}\n                    onChange={handleChange}\n                    onBlur={handleBlur} />\n                {errors.name && touched.name && errors.name}\n            </Form.Field>\n            <Form.Field>\n                <label htmlFor=\"id_ds_path\">HDF5 Dataset Path:</label>\n                <input type=\"text\" name=\"ds_path\" id=\"id_ds_path\" value={values.ds_path}\n                    onChange={handleChange} onBlur={handleBlur} />\n            </Form.Field>\n            <Form.Field>\n                <label htmlFor=\"id_tileshape\">Tileshape:</label>\n                <input type=\"text\" name=\"tileshape\" id=\"id_tileshape\" value={values.tileshape}\n                    onChange={handleChange} onBlur={handleBlur} />\n            </Form.Field>\n            <Button primary={true} type=\"submit\" disabled={isSubmitting}>Load Dataset</Button>\n            <Button onClick={onCancel} >Cancel</Button>\n        </Form>\n    )\n}\n\nexport default withFormik<OpenFormProps<DatasetParamsHDF5>, FormValues>({\n    mapPropsToValues: ({ initial }) => ({\n        name: getInitial(\"name\", \"\", initial),\n        tileshape: getInitial(\"tileshape\", \"1, 8, 128, 128\", initial).toString(),\n        ds_path: getInitial(\"ds_path\", \"\", initial),\n    }),\n    handleSubmit: (values, formikBag) => {\n        const { onSubmit, path } = formikBag.props;\n        onSubmit({\n            path,\n            type: DatasetTypes.HDF5,\n            name: values.name,\n            ds_path: values.ds_path,\n            tileshape: values.tileshape.split(\",\").map(part => +part),\n        });\n    }\n})(HDF5ParamsForm);","import { FormikProps, withFormik } from \"formik\";\nimport * as React from \"react\";\nimport { Button, Form } from \"semantic-ui-react\";\nimport { Omit } from \"../../helpers/types\";\nimport { DatasetParamsHDFS, DatasetTypes } from \"../../messages\";\nimport { getInitial } from \"../helpers\";\nimport { OpenFormProps } from \"../types\";\n\ntype RawDatasetParamsHDFS = Omit<DatasetParamsHDFS, \"path\" | \"type\" | \"tileshape\"> & {\n    tileshape: string,\n};\n\ntype FormValues = RawDatasetParamsHDFS\n\ntype MergedProps = FormikProps<FormValues> & OpenFormProps<DatasetParamsHDFS>;\n\nconst HDFSParamsForm: React.SFC<MergedProps> = ({\n    values,\n    touched,\n    errors,\n    dirty,\n    isSubmitting,\n    handleChange,\n    handleBlur,\n    handleSubmit,\n    handleReset,\n    onCancel,\n}) => {\n    return (\n        <Form onSubmit={handleSubmit}>\n            <Form.Field>\n                <label htmlFor=\"id_name\">Name:</label>\n                <input type=\"text\" name=\"name\" id=\"id_name\" value={values.name}\n                    onChange={handleChange}\n                    onBlur={handleBlur} />\n                {errors.name && touched.name && errors.name}\n            </Form.Field>\n            <Form.Field>\n                <label htmlFor=\"id_tileshape\">Tileshape:</label>\n                <input type=\"text\" name=\"tileshape\" id=\"id_tileshape\" value={values.tileshape}\n                    onChange={handleChange} onBlur={handleBlur} />\n            </Form.Field>\n            <Button primary={true} type=\"submit\" disabled={isSubmitting}>Load Dataset</Button>\n            <Button type=\"button\" onClick={onCancel}>Cancel</Button>\n        </Form>\n    )\n}\n\nexport default withFormik<OpenFormProps<DatasetParamsHDFS>, FormValues>({\n    mapPropsToValues: ({ initial }) => ({\n        name: getInitial(\"name\", \"\", initial),\n        tileshape: getInitial(\"tileshape\", \"1, 8, 128, 128\", initial).toString(),\n    }),\n    handleSubmit: (values, formikBag) => {\n        const { onSubmit, path } = formikBag.props;\n        onSubmit({\n            path,\n            type: DatasetTypes.HDFS,\n            name: values.name,\n            tileshape: values.tileshape.split(\",\").map(part => +part),\n        });\n    }\n})(HDFSParamsForm);","import { FormikProps, withFormik } from \"formik\";\nimport * as React from \"react\";\nimport { Button, Form } from \"semantic-ui-react\";\nimport { Omit } from \"../../helpers/types\";\nimport { DatasetParamsK2IS, DatasetTypes } from \"../../messages\";\nimport { getInitial } from \"../helpers\";\nimport { OpenFormProps } from \"../types\";\n\n// some fields have different types in the form vs. in messages\ntype DatasetParamsK2ISForForm = Omit<DatasetParamsK2IS,\n    \"path\" | \"type\">;\n\ntype FormValues = DatasetParamsK2ISForForm\n\n\ntype MergedProps = FormikProps<FormValues> & OpenFormProps<DatasetParamsK2IS>;\n\nconst K2ISFileParamsForm: React.SFC<MergedProps> = ({\n    values,\n    touched,\n    errors,\n    dirty,\n    isSubmitting,\n    handleChange,\n    handleBlur,\n    handleSubmit,\n    handleReset,\n    onCancel,\n}) => {\n    return (\n        <Form onSubmit={handleSubmit}>\n            <Form.Field>\n                <label htmlFor=\"id_name\">Name:</label>\n                <input type=\"text\" name=\"name\" id=\"id_name\" value={values.name}\n                    onChange={handleChange}\n                    onBlur={handleBlur} />\n                {errors.name && touched.name && errors.name}\n            </Form.Field>\n\n            <Button primary={true} type=\"submit\" disabled={isSubmitting}>Load Dataset</Button>\n            <Button type=\"button\" onClick={onCancel}>Cancel</Button>\n        </Form>\n    )\n}\n\nexport default withFormik<OpenFormProps<DatasetParamsK2IS>, FormValues>({\n    mapPropsToValues: ({ initial }) => ({\n        name: getInitial(\"name\", \"\", initial),\n    }),\n    handleSubmit: (values, formikBag) => {\n        const { onSubmit, path } = formikBag.props;\n        onSubmit({\n            path,\n            type: DatasetTypes.K2IS,\n            name: values.name,\n        });\n    }\n})(K2ISFileParamsForm);\n\n","import { FormikProps, withFormik } from \"formik\";\nimport * as React from \"react\";\nimport { Button, Form } from \"semantic-ui-react\";\nimport { Omit } from \"../../helpers/types\";\nimport { DatasetParamsMIB, DatasetTypes } from \"../../messages\";\nimport { getInitial, parseNumList } from \"../helpers\";\nimport { OpenFormProps } from \"../types\";\n\n// some fields have different types in the form vs. in messages\ntype DatasetParamsMIBForForm = Omit<DatasetParamsMIB,\n    \"path\"\n    | \"type\"\n    | \"tileshape\"\n    | \"scan_size\"\n> & {\n    tileshape: string,\n    scan_size: string,\n};\n\ntype FormValues = DatasetParamsMIBForForm\n\ntype MergedProps = FormikProps<FormValues> & OpenFormProps<DatasetParamsMIB>;\n\nconst RawFileParamsForm: React.SFC<MergedProps> = ({\n    values,\n    touched,\n    errors,\n    dirty,\n    isSubmitting,\n    handleChange,\n    handleBlur,\n    handleSubmit,\n    handleReset,\n    onCancel,\n}) => {\n    return (\n        <Form onSubmit={handleSubmit}>\n            <Form.Field>\n                <label htmlFor=\"id_name\">Name:</label>\n                <input type=\"text\" name=\"name\" id=\"id_name\" value={values.name}\n                    onChange={handleChange}\n                    onBlur={handleBlur} />\n                {errors.name && touched.name && errors.name}\n            </Form.Field>\n            <Form.Field>\n                <label htmlFor=\"id_tileshape\">Tileshape:</label>\n                <input type=\"text\" name=\"tileshape\" id=\"id_tileshape\" value={values.tileshape}\n                    onChange={handleChange} onBlur={handleBlur} />\n            </Form.Field>\n            <Form.Field>\n                <label htmlFor=\"id_scan_size\">Scan Size:</label>\n                <input type=\"text\" name=\"scan_size\" id=\"id_scan_size\" value={values.scan_size}\n                    onChange={handleChange} onBlur={handleBlur} />\n            </Form.Field>\n            <Button primary={true} type=\"submit\" disabled={isSubmitting}>Load Dataset</Button>\n            <Button type=\"button\" onClick={onCancel}>Cancel</Button>\n        </Form>\n    )\n}\n\nexport default withFormik<OpenFormProps<DatasetParamsMIB>, FormValues>({\n    mapPropsToValues: ({ initial }) => ({\n        name: getInitial(\"name\", \"\", initial),\n        tileshape: getInitial(\"tileshape\", \"1, 8, 256, 256\", initial).toString(),\n        scan_size: getInitial(\"scan_size\", \"\", initial).toString(),\n    }),\n    handleSubmit: (values, formikBag) => {\n        const { onSubmit, path } = formikBag.props;\n        onSubmit({\n            path,\n            type: DatasetTypes.MIB,\n            name: values.name,\n            tileshape: parseNumList(values.tileshape),\n            scan_size: parseNumList(values.scan_size),\n        });\n    }\n})(RawFileParamsForm);\n","import { FormikProps, withFormik } from \"formik\";\nimport * as React from \"react\";\nimport { Button, Form } from \"semantic-ui-react\";\nimport { Omit } from \"../../helpers/types\";\nimport { DatasetParamsRaw, DatasetTypes } from \"../../messages\";\nimport { getInitial, parseNumList } from \"../helpers\";\nimport { OpenFormProps } from \"../types\";\n\n// some fields have different types in the form vs. in messages\ntype DatasetParamsRawForForm = Omit<DatasetParamsRaw,\n    \"type\"\n    | \"path\"\n    | \"tileshape\"\n    | \"scan_size\"\n    | \"detector_size\"> & {\n        tileshape: string,\n        scan_size: string\n        detector_size: string,\n    };\n\ntype FormValues = DatasetParamsRawForForm\n\ntype MergedProps = FormikProps<FormValues> & OpenFormProps<DatasetParamsRaw>;\n\nconst RawFileParamsForm: React.SFC<MergedProps> = ({\n    values,\n    touched,\n    errors,\n    dirty,\n    isSubmitting,\n    handleChange,\n    handleBlur,\n    handleSubmit,\n    handleReset,\n    onCancel,\n}) => {\n    return (\n        <Form onSubmit={handleSubmit}>\n            <Form.Field>\n                <label htmlFor=\"id_name\">Name:</label>\n                <input type=\"text\" name=\"name\" id=\"id_name\" value={values.name}\n                    onChange={handleChange}\n                    onBlur={handleBlur} />\n                {errors.name && touched.name && errors.name}\n            </Form.Field>\n            <Form.Field>\n                <label htmlFor=\"id_tileshape\">Tileshape:</label>\n                <input type=\"text\" name=\"tileshape\" id=\"id_tileshape\" value={values.tileshape}\n                    onChange={handleChange} onBlur={handleBlur} />\n            </Form.Field>\n            <Form.Field>\n                <label htmlFor=\"id_scan_size\">Scan Size:</label>\n                <input type=\"text\" name=\"scan_size\" id=\"id_scan_size\" value={values.scan_size}\n                    onChange={handleChange} onBlur={handleBlur} />\n            </Form.Field>\n            <Form.Field>\n                <label htmlFor=\"id_dtype\">Datatype (uint16, uint32, float32, float64, &gt;u2, ..., can be anything that is <a href=\"https://docs.scipy.org/doc/numpy-1.15.1/reference/arrays.dtypes.html\">understood by numpy as a dtype</a>):</label>\n                <input type=\"text\" name=\"dtype\" id=\"id_dtype\" value={values.dtype}\n                    onChange={handleChange} onBlur={handleBlur} />\n            </Form.Field>\n\n            <Form.Field>\n                <label htmlFor=\"id_detector_size\">Detector Size (as in the file):</label>\n                <input type=\"text\" name=\"detector_size\" id=\"id_detector_size\" value={values.detector_size}\n                    onChange={handleChange} onBlur={handleBlur} />\n            </Form.Field>\n            <Form.Field>\n                <label htmlFor=\"id_enable_direct\">Enable Direct I/O (for usage with fast SSDs and files much larger than RAM):</label>\n                <input type=\"checkbox\" name=\"enable_direct\" id=\"id_enable_direct\" checked={values.enable_direct}\n                    onChange={handleChange} onBlur={handleBlur} />\n            </Form.Field>\n            <Button primary={true} type=\"submit\" disabled={isSubmitting}>Load Dataset</Button>\n            <Button type=\"button\" onClick={onCancel}>Cancel</Button>\n        </Form>\n    )\n}\n\nexport default withFormik<OpenFormProps<DatasetParamsRaw>, FormValues>({\n    mapPropsToValues: ({ initial }) => ({\n        name: getInitial(\"name\", \"\", initial),\n        enable_direct: getInitial(\"enable_direct\", false, initial),\n        tileshape: getInitial(\"tileshape\", \"1, 8, 128, 128\", initial).toString(),\n        detector_size: getInitial(\"detector_size\", \"\", initial).toString(),\n        scan_size: getInitial(\"scan_size\", \"\", initial).toString(),\n        dtype: getInitial(\"dtype\", \"float32\", initial),\n    }),\n    handleSubmit: (values, formikBag) => {\n        const { onSubmit, path } = formikBag.props;\n        onSubmit({\n            path,\n            type: DatasetTypes.RAW,\n            name: values.name,\n            dtype: values.dtype,\n            enable_direct: values.enable_direct,\n            tileshape: parseNumList(values.tileshape),\n            scan_size: parseNumList(values.scan_size),\n            detector_size: parseNumList(values.detector_size),\n        });\n    }\n})(RawFileParamsForm);\n","import { DatasetParamsSER } from \"../../messages\";\n\nimport { FormikProps, withFormik } from \"formik\";\nimport * as React from \"react\";\nimport { Button, Form } from \"semantic-ui-react\";\nimport { Omit } from \"../../helpers/types\";\nimport { DatasetTypes } from \"../../messages\";\nimport { getInitial } from \"../helpers\";\nimport { OpenFormProps } from \"../types\";\n\n// some fields have different types in the form vs. in messages\ntype DatasetParamsSERForForm = Omit<DatasetParamsSER,\n    \"path\" | \"type\">;\n\ntype FormValues = DatasetParamsSERForForm\n\n\ntype MergedProps = FormikProps<FormValues> & OpenFormProps<DatasetParamsSER>;\nconst SERParamsForm: React.SFC<MergedProps> = ({\n    values,\n    touched,\n    errors,\n    dirty,\n    isSubmitting,\n    handleChange,\n    handleBlur,\n    handleSubmit,\n    handleReset,\n    onCancel,\n}) => {\n    return (\n        <Form onSubmit={handleSubmit}>\n            <Form.Field>\n                <label htmlFor=\"id_name\">Name:</label>\n                <input type=\"text\" name=\"name\" id=\"id_name\" value={values.name}\n                    onChange={handleChange}\n                    onBlur={handleBlur} />\n                {errors.name && touched.name && errors.name}\n            </Form.Field>\n\n            <Button primary={true} type=\"submit\" disabled={isSubmitting}>Load Dataset</Button>\n            <Button type=\"button\" onClick={onCancel}>Cancel</Button>\n        </Form>\n    )\n}\n\nexport default withFormik<OpenFormProps<DatasetParamsSER>, FormValues>({\n    mapPropsToValues: ({ initial }) => ({\n        name: getInitial(\"name\", \"\", initial),\n    }),\n    handleSubmit: (values, formikBag) => {\n        const { onSubmit, path } = formikBag.props;\n        onSubmit({\n            path,\n            type: DatasetTypes.SER,\n            name: values.name,\n        });\n    }\n})(SERParamsForm);","import * as React from \"react\";\nimport { connect } from 'react-redux';\nimport { Dispatch } from \"redux\";\nimport { DropdownProps, Header, Segment } from \"semantic-ui-react\";\nimport uuid from \"uuid/v4\";\nimport { assertNotReached } from \"../../helpers\";\nimport { DatasetFormParams, DatasetTypes } from '../../messages';\nimport { RootReducer } from \"../../store\";\nimport * as datasetActions from \"../actions\";\nimport BLOParamsForm from \"./BLOParamsForm\";\nimport DatasetTypeSelect from \"./DatasetTypeSelect\";\nimport EMPADParamsForm from \"./EMPADParamsForm\";\nimport FRMS6ParamsForm from \"./FRMS6ParamsForm\";\nimport HDF5ParamsForm from \"./HDF5ParamsForm\";\nimport HDFSParamsForm from './HDFSParamsForm';\nimport K2ISParamsForm from \"./K2ISParamsForm\";\nimport MIBParamsForm from \"./MIBParamsForm\";\nimport RawFileParamsForm from \"./RawFileParamsForm\";\nimport SERParamsForm from \"./SERParamsForm\";\n\nconst mapDispatchToProps = (dispatch: Dispatch) => {\n    return {\n        createDataset: (params: DatasetFormParams) => {\n            dispatch(datasetActions.Actions.create({\n                id: uuid(),\n                params,\n            }));\n        },\n        onCancel: () => dispatch(datasetActions.Actions.cancelOpen()),\n    };\n}\n\nconst mapStateToProps = (state: RootReducer) => {\n    return {\n        formVisible: state.openDataset.formVisible,\n        formPath: state.openDataset.formPath,\n        formInitial: state.openDataset.formInitialParams,\n    };\n}\n\n\ntype MergedProps = ReturnType<typeof mapDispatchToProps> & ReturnType<typeof mapStateToProps>;\n\ninterface DatasetOpenState {\n    datasetType: DatasetTypes\n}\n\n\nclass DatasetOpen extends React.Component<MergedProps, DatasetOpenState> {\n    public state = {\n        datasetType: DatasetTypes.RAW,\n    }\n\n    constructor(props: MergedProps) {\n        super(props);\n        if (props.formInitial !== undefined) {\n            this.state = {\n                datasetType: props.formInitial.type,\n            };\n        }\n    }\n\n    public setDatasetType = (e: React.SyntheticEvent, data: DropdownProps) => {\n        const type = data.value as DatasetTypes;\n        this.setState({\n            datasetType: type,\n        })\n    }\n\n    public render() {\n        const { formPath, formInitial, createDataset, onCancel } = this.props;\n        const { datasetType } = this.state;\n\n        const renderForm = (form: React.ReactNode) => {\n            return (\n                <Segment>\n                    Type: <DatasetTypeSelect onClick={this.setDatasetType} currentType={datasetType} />\n                    <Header as=\"h2\">Open: {formPath}</Header>\n                    {form}\n                </Segment>\n            );\n        }\n        switch (datasetType) {\n            case DatasetTypes.HDF5: {\n                const initial = formInitial && datasetType === formInitial.type ? formInitial : undefined;\n                return renderForm(<HDF5ParamsForm path={formPath} initial={initial} onSubmit={createDataset} onCancel={onCancel} />);\n            }\n            case DatasetTypes.HDFS: {\n                const initial = formInitial && datasetType === formInitial.type ? formInitial : undefined;\n                return renderForm(<HDFSParamsForm path={formPath} initial={initial} onSubmit={createDataset} onCancel={onCancel} />);\n            }\n            case DatasetTypes.RAW: {\n                const initial = formInitial && datasetType === formInitial.type ? formInitial : undefined;\n                return renderForm(<RawFileParamsForm path={formPath} initial={initial} onSubmit={createDataset} onCancel={onCancel} />);\n            }\n            case DatasetTypes.MIB: {\n                const initial = formInitial && datasetType === formInitial.type ? formInitial : undefined;\n                return renderForm(<MIBParamsForm path={formPath} initial={initial} onSubmit={createDataset} onCancel={onCancel} />);\n            }\n            case DatasetTypes.BLO: {\n                const initial = formInitial && datasetType === formInitial.type ? formInitial : undefined;\n                return renderForm(<BLOParamsForm path={formPath} initial={initial} onSubmit={createDataset} onCancel={onCancel} />);\n            }\n            case DatasetTypes.K2IS: {\n                const initial = formInitial && datasetType === formInitial.type ? formInitial : undefined;\n                return renderForm(<K2ISParamsForm path={formPath} initial={initial} onSubmit={createDataset} onCancel={onCancel} />);\n            }\n            case DatasetTypes.SER: {\n                const initial = formInitial && datasetType === formInitial.type ? formInitial : undefined;\n                return renderForm(<SERParamsForm path={formPath} initial={initial} onSubmit={createDataset} onCancel={onCancel} />);\n            }\n            case DatasetTypes.FRMS6: {\n                const initial = formInitial && datasetType === formInitial.type ? formInitial : undefined;\n                return renderForm(<FRMS6ParamsForm path={formPath} initial={initial} onSubmit={createDataset} onCancel={onCancel} />);\n            }\n            case DatasetTypes.EMPAD: {\n                const initial = formInitial && datasetType === formInitial.type ? formInitial : undefined;\n                return renderForm(<EMPADParamsForm path={formPath} initial={initial} onSubmit={createDataset} onCancel={onCancel} />)\n            }\n        }\n        return assertNotReached(\"unknown dataset type\");\n    }\n\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(DatasetOpen)","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Header, Icon, Message } from \"semantic-ui-react\";\nimport { RootReducer } from \"../../store\";\n\nconst mapStateToProps = (state: RootReducer) => {\n    return {\n        busy: state.openDataset.busy,\n        path: state.openDataset.busyPath,\n    };\n}\n\ntype MergedProps = ReturnType<typeof mapStateToProps>;\n\nconst DatasetOpenSpinner: React.SFC<MergedProps> = ({ busy, path }) => {\n    if (!busy) {\n        return null;\n    }\n    return (\n        <>\n            <Header as=\"h2\" dividing={true}>Loading...</Header>\n            <Message icon={true}>\n                <Icon name='cog' loading={true} />\n                <Message.Content>\n                    <Message.Header>Detecting parameters for {path}</Message.Header>\n                </Message.Content>\n            </Message>\n        </>\n    );\n}\n\nexport default connect(mapStateToProps)(DatasetOpenSpinner);","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport BrowserWrapper from \"../../browser/components/BrowserWrapper\";\nimport { RootReducer } from \"../../store\";\nimport { DatasetsState } from \"../types\";\nimport Dataset from \"./Dataset\";\nimport DatasetOpen from \"./DatasetOpen\";\nimport DatasetOpenSpinner from \"./DatasetOpenSpinner\";\n\ninterface DatasetListProps {\n    datasets: DatasetsState\n}\n\nconst mapStateToProps = (state: RootReducer) => {\n    return {\n        datasets: state.datasets,\n        formVisible: state.openDataset.formVisible,\n        formPath: state.openDataset.formPath,\n    };\n}\n\ntype MergedProps = DatasetListProps & ReturnType<typeof mapStateToProps>;\n\nclass DatasetList extends React.Component<MergedProps> {\n    public render() {\n        const { formVisible, datasets } = this.props;\n\n        return (\n            <>\n                {datasets.ids.map((dsId: string) => <Dataset dataset={datasets.byId[dsId]} key={dsId} />)}\n                <DatasetOpenSpinner />\n                {formVisible && <DatasetOpen />}\n                <BrowserWrapper />\n            </>\n        );\n    }\n}\n\nexport default connect(mapStateToProps)(DatasetList);","import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { Dispatch } from 'redux';\nimport { Message } from 'semantic-ui-react';\nimport * as errorActions from '../actions';\nimport { ErrorMessage } from '../reducers';\n\nconst mapDispatchToProps = (dispatch: Dispatch, ownProps: ErrorProps) => {\n    return {\n        dismiss: () => dispatch(errorActions.Actions.dismiss(ownProps.error.id)),\n    }\n}\n\ninterface ErrorProps {\n    error: ErrorMessage,\n}\n\ntype MergedProps = ErrorProps & ReturnType<typeof mapDispatchToProps>;\n\nconst ErrorComponent: React.SFC<MergedProps> = ({ dismiss, error }) => {\n    return (\n        <Message negative={true} onDismiss={dismiss}>{error.msg}</Message>\n    )\n}\n\nexport default connect(null, mapDispatchToProps)(ErrorComponent);","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Modal } from \"semantic-ui-react\";\nimport { RootReducer } from \"../../store\";\nimport Error from \"./Error\";\n\nconst mapStateToProps = (state: RootReducer) => {\n    return {\n        errors: state.errors,\n        clusterConnected: state.clusterConnection.status === \"connected\",\n        channelConnected: (state.channelStatus.status === \"connected\" ||\n            state.channelStatus.status === \"ready\"),\n    }\n}\n\ntype MergedProps = ReturnType<typeof mapStateToProps>;\n\nconst ErrorList: React.SFC<MergedProps> = ({ errors, clusterConnected, channelConnected }) => {\n    const numShown = 3;\n    const latestErrors = errors.ids.slice(Math.max(0, errors.ids.length - numShown));\n    const showModal = errors.ids.length > 0 && clusterConnected && channelConnected;\n    return (\n        <Modal open={showModal}>\n            {latestErrors.map(error => <Error error={errors.byId[error]} key={error} />)}\n        </Modal>\n    );\n}\n\nexport default connect(mapStateToProps)(ErrorList);","import * as React from 'react';\nimport 'semantic-ui-css/semantic.min.css';\nimport { Container, Icon, Modal, Popup } from 'semantic-ui-react';\nimport About from './About';\nimport ChannelStatus from './channel/components/ChannelStatus';\nimport DatasetList from './dataset/components/DatasetList';\nimport ErrorList from './errors/components/ErrorList';\nimport logo from './images/LiberTEM logo-medium.png';\n\nclass App extends React.Component {\n    public render() {\n        return (\n            <Container style={{ margin: \"5em 1em 5em 1em\" }}>\n                <div style={{ display: \"flex\" }}>\n                    <img src={logo} width=\"200\" height=\"46\" alt=\"LiberTEM\" style={{ marginBottom: \"20px\" }} />\n                    {' '}\n                    <Modal trigger={\n                        <Icon name=\"info circle\" link={true} style={{ alignSelf: \"flex-start\" }} />\n                    }>\n                        <Popup.Header>About LiberTEM</Popup.Header>\n                        <Popup.Content>\n                            <About />\n                        </Popup.Content>\n                    </Modal>\n                </div>\n                <ErrorList />\n                <ChannelStatus>\n                    <DatasetList />\n                </ChannelStatus>\n            </Container>\n        );\n    }\n}\n\nexport default App;\n","// tslint:disable:no-console\n// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the 'N+1' visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL!,\n      window.location.toString()\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker) {\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the old content will have been purged and\n                // the fresh content will have been added to the cache.\n                // It's the perfect time to display a 'New content is\n                // available; please refresh.' message in your web app.\n                console.log('New content is available; please refresh.');\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // 'Content is cached for offline use.' message.\n                console.log('Content is cached for offline use.');\n              }\n            }\n          };\n        }\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type')!.indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { ActionsUnion, createAction } from \"../helpers/actionHelpers\";\n\nexport enum ActionTypes {\n    CREATE = 'JOB_CREATE',\n}\n\nexport const Actions = {\n    create: (id: string, dataset: string, timestamp: number) => createAction(ActionTypes.CREATE, { id, dataset, timestamp }),\n}\n\nexport type Actions = ActionsUnion<typeof Actions>;\n\nexport type ActionParts = {\n    [K in keyof typeof Actions]: ReturnType<typeof Actions[K]>\n}","import { AnalysisDetails, CancelJobResponse, StartJobRequest, StartJobResponse } from \"../messages\";\n\nexport function startJob(jobId: string, datasetId: string, analysis: AnalysisDetails): Promise<StartJobResponse> {\n    const payload: StartJobRequest = {\n        job: {\n            dataset: datasetId,\n            analysis,\n        }\n    }\n    return fetch(`/api/jobs/${jobId}/`, {\n        body: JSON.stringify(payload),\n        credentials: \"same-origin\",\n        method: \"PUT\",\n    }).then(r => r.json());\n}\n\nexport function cancelJob(jobId: string): Promise<CancelJobResponse> {\n    return fetch(`/api/jobs/${jobId}/`, {\n        method: \"DELETE\",\n        credentials: \"same-origin\",\n    }).then(r => r.json());\n}","import { buffers } from 'redux-saga';\nimport { actionChannel, call, cancel, fork, put, select, take, takeEvery } from 'redux-saga/effects';\nimport uuid from 'uuid/v4';\nimport * as jobActions from '../job/actions';\nimport { cancelJob, startJob } from '../job/api';\nimport { JobState } from '../job/types';\nimport { DatasetState, DatasetStatus } from '../messages';\nimport { RootReducer } from '../store';\nimport * as analysisActions from './actions';\nimport { AnalysisState } from './types';\n\nfunction selectDataset(state: RootReducer, dataset: string) {\n    return state.datasets.byId[dataset];\n}\n\nfunction selectAnalysis(state: RootReducer, id: string) {\n    return state.analyses.byId[id];\n}\n\nfunction selectJob(state: RootReducer, id: string) {\n    return state.jobs.byId[id];\n}\n\n\nexport function* createAnalysisSaga(action: ReturnType<typeof analysisActions.Actions.create>) {\n    try {\n        const datasetState: DatasetState = yield select(selectDataset, action.payload.dataset)\n        if (datasetState.status !== DatasetStatus.OPEN) {\n            throw new Error(\"invalid dataset status\");\n        }\n        const analysis: AnalysisState = {\n            id: uuid(),\n            dataset: action.payload.dataset,\n            mainAnalysisType: action.payload.analysisType,\n            jobs: [],\n            jobHistory: [],\n        }\n\n        const sidecarTask = yield fork(analysisSidecar, analysis.id);\n\n        yield put(analysisActions.Actions.created(analysis));\n\n        while (true) {\n            const removeAction: ReturnType<typeof analysisActions.Actions.remove> = yield take(analysisActions.ActionTypes.REMOVE);\n            if (removeAction.payload.id === analysis.id) {\n                yield cancel(sidecarTask);\n            }\n        }\n    } catch (e) {\n        const timestamp = Date.now();\n        const id = uuid();\n        yield put(analysisActions.Actions.error(`Error creating analysis: ${e.toString()}`, timestamp, id));\n    }\n}\n\nexport function* cancelOldJob(analysis: AnalysisState, jobIndex: number) {\n    const jobId = analysis.jobs[jobIndex];\n    if (jobId === undefined) {\n        return;\n    } else {\n        const job: JobState = yield select(selectJob, jobId);\n        if (job.running !== \"DONE\") {\n            yield call(cancelJob, jobId);\n        }\n    }\n}\n\nexport function* analysisSidecar(analysisId: string) {\n    // channel for incoming actions:\n    // all actions that arrive while we block in `call` will be buffered here.\n    // because the buffer is sliding of size 1, we only keep the latest action!\n    const runOrParamsChannel = yield actionChannel(analysisActions.ActionTypes.RUN, buffers.sliding(1));\n\n    while (true) {\n        try {\n            const action: analysisActions.ActionParts[\"run\"] = yield take(runOrParamsChannel);\n\n            // ignore actions meant for other analyses\n            if (action.payload.id !== analysisId) {\n                continue;\n            }\n\n            // get the current state incl. configuration\n            const analysis: AnalysisState = yield select(selectAnalysis, analysisId);\n            const { jobIndex, parameters } = action.payload;\n\n            // prepare running the job:\n            const jobId = uuid();\n            yield put(jobActions.Actions.create(jobId, analysis.dataset, Date.now()));\n            yield put(analysisActions.Actions.prepareRun(analysis.id, jobIndex, jobId));\n\n            const oldJobId = analysis.jobs[jobIndex];\n            // tslint:disable-next-line:no-console\n            console.log(\"oldJobId:\", oldJobId);\n            if (oldJobId !== undefined) {\n                const job: JobState = yield select(selectJob, oldJobId);\n                // tslint:disable-next-line:no-console\n                console.log(\"maybe we should cancel? let's see...\", job);\n                if (job && job.running !== \"DONE\") {\n                    // wait until the job is cancelled:\n                    // tslint:disable-next-line:no-console\n                    console.log(\"canceling job\", oldJobId);\n                    yield call(cancelJob, oldJobId);\n                    // tslint:disable-next-line:no-console\n                    console.log(\"job cancelled\", oldJobId);\n                }\n            }\n\n            // FIXME: we have a race here, as the websocket msg FINISH_JOB may\n            // arrive before call(startJob, ...) returns. this causes the apply button\n            // to feel unresponsive (the action gets done, but only after we finish here...)\n            // best reproduced in \"Slow 3G\" network simulation mode in devtools\n\n            // wait until the job is started\n            yield call(startJob, jobId, analysis.dataset, parameters);\n            yield put(analysisActions.Actions.running(analysis.id, jobId, jobIndex));\n        } catch (e) {\n            const timestamp = Date.now();\n            const id = uuid();\n            yield put(analysisActions.Actions.error(`Error running analysis: ${e.toString()}`, timestamp, id));\n        }\n    }\n}\n\nexport function* doRemoveAnalysisSaga(action: ReturnType<typeof analysisActions.Actions.remove>) {\n    // const analysis: AnalysisState = yield select(selectAnalysis, action.payload.id)\n    try {\n        // TODO: cancel all jobs! loop over all of them...\n        // yield call(cancelOldJob, analysis, \"RESULT\");\n        // yield call(cancelOldJob, analysis, \"FRAME\");\n    } finally {\n        yield put(analysisActions.Actions.removed(action.payload.id));\n    }\n}\n\nexport function* analysisRootSaga() {\n    yield takeEvery(analysisActions.ActionTypes.CREATE, createAnalysisSaga);\n    yield takeEvery(analysisActions.ActionTypes.REMOVE, doRemoveAnalysisSaga);\n}","import * as _ from 'lodash';\nimport { MsgPartConfig } from \"../messages\";\nimport { ConfigParams, ConfigState, LocalConfig } from \"./reducers\";\n\nconst CONFIG_KEY = \"LiberTEM.config\";\n\nexport function joinPaths(config: ConfigState, ...parts: string[]) {\n    const removeSep = (part: string) => part.replace(new RegExp(`${_.escapeRegExp(config.separator)}$`), \"\")\n    parts = [removeSep(parts[0]), ...parts.slice(1)];\n    return parts.map(part => part.trim()).join(config.separator);\n}\n\nexport function mergeLocalStorage(serverConfig: MsgPartConfig): ConfigParams {\n    const localSettings = window.localStorage.getItem(CONFIG_KEY);\n    if (localSettings === null) {\n        return Object.assign({}, serverConfig, getDefaultLocalConfig(serverConfig));\n    }\n    const localSettingsParsed = JSON.parse(localSettings);\n    const defaultConfig = getDefaultLocalConfig(serverConfig);\n    const mergedConfig = Object.assign({}, defaultConfig, serverConfig, localSettingsParsed);\n    return mergedConfig;\n}\n\nexport function setLocalStorage(config: ConfigState): void {\n    const keys: Array<Partial<keyof ConfigState>> = [\"cwd\", \"lastOpened\", \"fileHistory\"];\n    const localSettings = keys.reduce((acc, item) => {\n        acc[item] = config[item];\n        return acc;\n    }, {} as ConfigState);\n    window.localStorage.setItem(CONFIG_KEY, JSON.stringify(localSettings));\n}\n\nexport function clearLocalStorage(): void {\n    window.localStorage.removeItem(CONFIG_KEY);\n}\n\nexport function getDefaultLocalConfig(config: MsgPartConfig): LocalConfig {\n    return {\n        lastOpened: {},\n        fileHistory: [],\n    };\n}\n\nexport function makeUnique<T>(inp: T[]): T[] {\n    return inp.reduce((acc: T[], curr: T) => {\n        if (acc.indexOf(curr) === -1) {\n            return [...acc, curr];\n        } else {\n            return acc;\n        }\n    }, [] as T[]);\n}","import { DirectoryListingResponse } from \"../messages\";\n\nexport function getDirectoryListing(path: string): Promise<DirectoryListingResponse> {\n    const url = `/api/browse/localfs/?path=${path}`;\n    return fetch(url, {\n        method: 'GET',\n        credentials: \"same-origin\",\n    }).then(r => r.json());\n}","import { ActionsUnion, createAction } from '../helpers/actionHelpers';\nimport { JobResultType } from '../job/types';\nimport { MsgPartInitialDataset, MsgPartJob } from '../messages';\n\n\nexport type PartialResultType = JobResultType;\n\nexport enum ActionTypes {\n    INITIAL_STATE = 'CHANNEL_INITIAL_STATE',\n    JOB_STARTED = 'CHANNEL_JOB_STARTED',\n    FINISH_JOB = 'CHANNEL_FINISH_JOB',\n    TASK_RESULT = 'CHANNEL_TASK_RESULT',\n    JOB_ERROR = 'CHANNEL_JOB_ERROR',\n    OPEN = \"CHANNEL_OPEN\",\n    CLOSE = \"CHANNEL_CLOSE\",\n    ERROR = \"CHANNEL_ERROR\",\n}\n\nexport const Actions = {\n    initialState: (jobs: MsgPartJob[], datasets: MsgPartInitialDataset[], timestamp: number) => createAction(ActionTypes.INITIAL_STATE, { jobs, datasets, timestamp }),\n    jobStarted: (job: string, dataset: string, timestamp: number) => createAction(ActionTypes.JOB_STARTED, { job, timestamp, dataset }),\n    finishJob: (job: string, results: JobResultType[], timestamp: number) => createAction(ActionTypes.FINISH_JOB, { job, results, timestamp }),\n    taskResult: (job: string, results: PartialResultType[], timestamp: number) => createAction(ActionTypes.TASK_RESULT, { job, results, timestamp }),\n    jobError: (job: string, msg: string, id: string, timestamp: number) => createAction(ActionTypes.JOB_ERROR, { job, msg, id, timestamp }),\n    open: (timestamp: number) => createAction(ActionTypes.OPEN, { timestamp }),\n    close: (timestamp: number) => createAction(ActionTypes.CLOSE, { timestamp }),\n    error: (msg: string, timestamp: number, id: string) => createAction(ActionTypes.ERROR, { msg, timestamp, id }),\n}\n\nexport type Actions = ActionsUnion<typeof Actions>;","import { call, fork, put, select, take } from \"redux-saga/effects\";\nimport uuid from 'uuid/v4';\nimport { joinPaths } from \"../config/helpers\";\nimport { ConfigState } from \"../config/reducers\";\nimport { DirectoryListingResponse } from \"../messages\";\nimport { RootReducer } from \"../store\";\nimport * as browserActions from './actions';\nimport { getDirectoryListing } from \"./api\";\nimport { DirectoryBrowserState } from \"./types\";\n\nexport function* directoryListingSaga() {\n    yield fork(fetchOnRequest);\n    yield fork(fetchDirectoryListOnOpen);\n}\n\nfunction* fetchOnRequest() {\n    while (true) {\n        const action: ReturnType<typeof browserActions.Actions.list> = yield take(browserActions.ActionTypes.LIST_DIRECTORY);\n\n        const { name, path } = action.payload;\n        const config: ConfigState = yield select((state: RootReducer) => state.config)\n        const newPath = name !== undefined ? joinPaths(config, path, name) : path;\n        yield fork(fetchDirectoryListing, newPath);\n    }\n}\n\nfunction* fetchDirectoryListing(path: string) {\n    try {\n        const result: DirectoryListingResponse = yield call(getDirectoryListing, path);\n        if (result.status === \"ok\") {\n            yield put(browserActions.Actions.dirListing(result.path, result.dirs, result.files, result.drives, result.places));\n        } else if (result.status === \"error\") {\n            const browserState: DirectoryBrowserState = yield select((state: RootReducer) => state.browser);\n            const timestamp = Date.now();\n            const id = uuid();\n            const alternative = result.alternative ? result.alternative : browserState.places.home.path;\n            yield put(browserActions.Actions.error(`Error browsing directory: ${result.msg}`, timestamp, id));\n            yield put(browserActions.Actions.list(alternative));\n        }\n    } catch (e) {\n        const browserState: DirectoryBrowserState = yield select((state: RootReducer) => state.browser);\n        const timestamp = Date.now();\n        const id = uuid();\n        yield put(browserActions.Actions.error(`Error browsing directory: ${e.toString()}`, timestamp, id));\n        yield put(browserActions.Actions.list(browserState.places.home.path));\n    }\n}\n\nfunction* fetchDirectoryListOnOpen() {\n    while (true) {\n        yield take(browserActions.ActionTypes.OPEN);\n        const config: ConfigState = yield select((state: RootReducer) => state.config)\n        yield put(browserActions.Actions.list(config.cwd));\n    }\n}","import { ActionCreatorsMapObject } from \"redux\";\nimport { FollowupPart, MsgPartInitialDataset, MsgPartJob } from \"../messages\";\n\nexport interface Message<T extends string> {\n    messageType: T\n}\n\nexport function createMessage<T extends string, O>(messageType: T, attribs: O) {\n    return Object.assign({ messageType }, attribs);\n}\n\nexport enum MessageTypes {\n    INITIAL_STATE = \"INITIAL_STATE\",\n    JOB_STARTED = \"JOB_STARTED\",\n    FINISH_JOB = \"FINISH_JOB\",\n    TASK_RESULT = \"TASK_RESULT\",\n    JOB_ERROR = \"JOB_ERROR\",\n    BINARY = \"BINARY\",\n    OPEN = \"OPEN\",\n    CLOSE = \"CLOSE\",\n    ERROR = \"ERROR\",\n    DELETE_DATASET = \"DELETE_DATASET\"\n}\n\nexport const Messages = {\n    initialState: (jobs: MsgPartJob[], datasets: MsgPartInitialDataset[]) => createMessage(MessageTypes.INITIAL_STATE, { jobs, datasets }),\n    startJob: (job: string, dataset: string) => createMessage(MessageTypes.JOB_STARTED, { job, dataset }),\n    finishJob: (job: string, followup: FollowupPart) => createMessage(MessageTypes.FINISH_JOB, { job, followup }),\n    taskResult: (job: string, followup: FollowupPart) => createMessage(MessageTypes.TASK_RESULT, { job, followup }),\n    jobError: (job: string, msg: string) => createMessage(MessageTypes.JOB_ERROR, { job, msg }),\n    binary: (objectURL: string) => createMessage(MessageTypes.BINARY, { objectURL }),\n    open: () => createMessage(MessageTypes.OPEN, {}),\n    close: () => createMessage(MessageTypes.CLOSE, {}),\n    error: (msg: string) => createMessage(MessageTypes.ERROR, { msg }),\n    deleteDataset: (dataset: string) => createMessage(MessageTypes.DELETE_DATASET, { dataset }),\n}\n\nexport type MessagesUnion<A extends ActionCreatorsMapObject> = ReturnType<A[keyof A]>\nexport type Messages = MessagesUnion<typeof Messages>;\n\n// types of messages sent by the server:\n/*\nexport type InitialStateMessage = ReturnType<typeof Messages.initialState>;\nexport type StartJobMessage = ReturnType<typeof Messages.startJob>;\nexport type FinishJobMessage = ReturnType<typeof Messages.finishJob>;\nexport type TaskResultMessage = ReturnType<typeof Messages.taskResult>;\n*/\n\nexport type BinaryMessage = ReturnType<typeof Messages.binary>;","import { Channel, delay, END, eventChannel } from \"redux-saga\";\nimport { call, fork, put, take } from \"redux-saga/effects\";\nimport uuid from 'uuid/v4';\nimport * as datasetActions from '../dataset/actions';\nimport * as channelActions from \"./actions\";\nimport * as channelMessages from './messages';\n\ntype SocketChannel = Channel<channelMessages.Messages>;\n\n\n/**\n * create typesafe messages from the websocket messages\n * \n * also creates some synthetic events like open, close, error\n */\nfunction createWebSocketChannel(/* addr */): SocketChannel {\n    return eventChannel(emit => {\n        function onMessage(msg: MessageEvent) {\n            if (msg.data instanceof Blob) {\n                // TODO: cleanup createObjectURL results somewhere\n                emit(channelMessages.Messages.binary(URL.createObjectURL(msg.data)));\n            } else {\n                const parsed = JSON.parse(msg.data) as channelMessages.Messages;\n                emit(parsed);\n            }\n        }\n\n        function onOpen() {\n            emit(channelMessages.Messages.open());\n        }\n\n        function onClose() {\n            emit(channelMessages.Messages.close());\n            emit(END);\n        }\n\n        function onError(err: Event) {\n            emit(channelMessages.Messages.error(\"Error in weboscket connection\"));\n        }\n\n        const ws = new WebSocket(`ws://${window.location.hostname}:${window.location.port}/api/events/`);\n        ws.addEventListener(\"message\", onMessage);\n        ws.addEventListener(\"open\", onOpen);\n        ws.addEventListener(\"close\", onClose);\n        ws.addEventListener(\"error\", onError);\n\n        // return cleanup function:\n        return () => {\n            ws.removeEventListener(\"message\", onMessage);\n            ws.removeEventListener(\"open\", onOpen);\n            ws.removeEventListener(\"close\", onClose);\n            ws.removeEventListener(\"error\", onError);\n            // TODO: close connection if still open\n            // (or is it guaranteed that if an error was thrown, the connection is closed?)\n        };\n    });\n}\n\n/**\n * handles the connection lifecycle for our websocket\n */\nexport function* webSocketSaga() {\n    while (true) {\n        const socketChannel = yield call(createWebSocketChannel);\n        yield fork(actionsFromChannel, socketChannel);\n        const action: channelActions.Actions = yield take([\n            channelActions.ActionTypes.OPEN,\n            channelActions.ActionTypes.CLOSE,\n        ]);\n        if (action.type === channelActions.ActionTypes.OPEN) {\n            yield take([\n                channelActions.ActionTypes.CLOSE,\n                channelActions.ActionTypes.ERROR,\n            ]);\n        }\n        yield delay(1000);\n    }\n}\n\n/**\n * translates the messages from the channel to redux actions, handles aggregation etc.\n */\nexport function* actionsFromChannel(socketChannel: SocketChannel) {\n    try {\n        while (true) {\n            const msg = yield take(socketChannel);\n            const timestamp = Date.now();\n            switch (msg.messageType) {\n                case channelMessages.MessageTypes.OPEN: {\n                    yield put(channelActions.Actions.open(timestamp));\n                    break;\n                }\n                case channelMessages.MessageTypes.CLOSE: {\n                    yield put(channelActions.Actions.close(timestamp));\n                    break;\n                }\n                case channelMessages.MessageTypes.ERROR: {\n                    const id = uuid();\n                    yield put(channelActions.Actions.error(msg.msg, timestamp, id));\n                    break;\n                }\n                case channelMessages.MessageTypes.INITIAL_STATE: {\n                    yield put(channelActions.Actions.initialState(msg.jobs, msg.datasets, timestamp));\n                    break;\n                }\n                case channelMessages.MessageTypes.JOB_STARTED: {\n                    yield put(channelActions.Actions.jobStarted(msg.job, msg.details.dataset, timestamp));\n                    break;\n                }\n                case channelMessages.MessageTypes.FINISH_JOB: {\n                    yield call(handleFinishJob, msg, socketChannel, timestamp);\n                    break;\n                }\n                case channelMessages.MessageTypes.TASK_RESULT: {\n                    yield call(handleTaskResult, msg, socketChannel, timestamp);\n                    break;\n                }\n                case channelMessages.MessageTypes.DELETE_DATASET: {\n                    yield put(datasetActions.Actions.deleted(msg.dataset));\n                    break;\n                }\n                case channelMessages.MessageTypes.JOB_ERROR: {\n                    const id = uuid();\n                    yield put(channelActions.Actions.jobError(msg.job, msg.msg, id, timestamp));\n                }\n            }\n        }\n    } finally {\n        // disconnected\n    }\n}\n\nexport function* handleBinaryParts(numParts: number, socketChannel: SocketChannel) {\n    const parts: channelMessages.BinaryMessage[] = [];\n    while (parts.length < numParts) {\n        const binMsg = yield take(socketChannel)\n        parts.push(binMsg);\n    }\n    return parts;\n}\n\nexport function* handleTaskResult(msg: ReturnType<typeof channelMessages.Messages.taskResult>, socketChannel: SocketChannel, timestamp: number) {\n    const parts: channelMessages.BinaryMessage[] = yield call(handleBinaryParts, msg.followup.numMessages, socketChannel);\n    const images = parts.map((part, idx) => ({ imageURL: part.objectURL, description: msg.followup.descriptions[idx] }));\n    yield put(channelActions.Actions.taskResult(msg.job, images, timestamp));\n}\n\nexport function* handleFinishJob(msg: ReturnType<typeof channelMessages.Messages.finishJob>, socketChannel: SocketChannel, timestamp: number) {\n    const parts: channelMessages.BinaryMessage[] = yield call(handleBinaryParts, msg.followup.numMessages, socketChannel);\n    const images = parts.map((part, idx) => ({ imageURL: part.objectURL, description: msg.followup.descriptions[idx] }));\n    yield put(channelActions.Actions.finishJob(msg.job, images, timestamp));\n}","import { ConnectRequest, ConnectRequestParams, ConnectResponse } from \"../messages\";\n\nexport function connectToCluster(params: ConnectRequestParams): Promise<ConnectResponse> {\n    const payload: ConnectRequest = {\n        connection: params\n    }\n    return fetch(`/api/config/connection/`, {\n        body: JSON.stringify(payload),\n        credentials: \"same-origin\",\n        method: \"PUT\",\n    }).then(r => r.json());\n}\n\nexport function checkClusterConnection(): Promise<ConnectResponse> {\n    return fetch(`/api/config/connection/`, {\n        method: 'GET',\n    }).then(r => r.json());\n}","import { ActionsUnion, createAction } from \"../helpers/actionHelpers\";\nimport { ConfigParams } from \"./reducers\";\n\nexport enum ActionTypes {\n    FETCHED = \"CONFIG_FETCHED\",\n    FETCH = \"CONFIG_FETCH\",\n    FETCH_FAILED = \"CONFIG_FETCH_FAILED\",\n}\n\nexport const Actions = {\n    fetch: () => createAction(ActionTypes.FETCH),\n    fetched: (config: ConfigParams) => createAction(ActionTypes.FETCHED, { config }),\n    fetchFailed: (msg: string, timestamp: number, id: string) => createAction(ActionTypes.FETCH_FAILED, { msg, timestamp, id }),\n}\n\nexport type Actions = ActionsUnion<typeof Actions>;","import { all, call, put, take, takeEvery } from \"redux-saga/effects\";\nimport * as channelActions from '../channel/actions';\nimport { ConnectResponse } from \"../messages\";\nimport * as clusterActions from './actions';\nimport { checkClusterConnection, connectToCluster } from \"./api\";\n\nfunction* connectSaga(action: ReturnType<typeof clusterActions.Actions.connect>) {\n    const conn: ConnectResponse = yield call(connectToCluster, action.payload.params);\n    yield call(putClusterStatus, conn);\n}\n\nfunction* putClusterStatus(conn: ConnectResponse) {\n    if (conn.status === \"ok\") {\n        yield put(clusterActions.Actions.connected(conn.connection.connection));\n    } else {\n        yield put(clusterActions.Actions.notConnected());\n    }\n}\n\n/**\n * when the channel is connected, check if cluster is connected and update status accordingly\n */\nfunction* trackClusterConnection() {\n    while (true) {\n        yield take(channelActions.ActionTypes.OPEN)\n        const conn: ConnectResponse = yield call(checkClusterConnection);\n        yield call(putClusterStatus, conn);\n    }\n}\n\nexport function* clusterConnectionSaga() {\n    yield takeEvery(clusterActions.ActionTypes.CONNECT, connectSaga);\n    yield all([\n        trackClusterConnection(),\n    ])\n}","import { GetConfigResponse } from \"../messages\";\n\nexport function getConfig(): Promise<GetConfigResponse> {\n    return fetch(`/api/config/`, {\n        method: \"GET\",\n        credentials: \"same-origin\",\n    }).then(r => r.json());\n}","import { call, fork, put, select, take, takeEvery } from 'redux-saga/effects';\nimport uuid from 'uuid/v4';\nimport * as browserActions from '../browser/actions';\nimport * as channelActions from '../channel/actions';\nimport * as datasetActions from '../dataset/actions';\nimport { GetConfigResponse } from '../messages';\nimport { RootReducer } from '../store';\nimport * as configActions from './actions';\nimport { getConfig } from './api';\nimport { clearLocalStorage, getDefaultLocalConfig, mergeLocalStorage, setLocalStorage } from './helpers';\nimport { ConfigState } from './reducers';\n\nfunction* getConfigOnReconnect() {\n    yield takeEvery(channelActions.ActionTypes.OPEN, getConfigSaga);\n}\n\n/**\n * get config from server and try to merge in the localStorage config\n */\nfunction* getConfigSaga() {\n    yield put(configActions.Actions.fetch());\n    const configResponse: GetConfigResponse = yield call(getConfig);\n    try {\n        const mergedConfig = mergeLocalStorage(configResponse.config);\n        yield put(configActions.Actions.fetched(mergedConfig));\n    } catch (e) {\n        try {\n            clearLocalStorage();\n            // tslint:disable-next-line:no-empty\n        } catch (e) { }\n        const defaultConfig = Object.assign({}, configResponse.config, getDefaultLocalConfig(configResponse.config));\n        yield put(configActions.Actions.fetched(defaultConfig));\n    }\n}\n\n/**\n * update localStorage config on opening files or using the file browser\n */\nfunction* updateLocalStorageConfig() {\n    while (true) {\n        yield take([\n            datasetActions.ActionTypes.CREATE,\n            browserActions.ActionTypes.DIRECTORY_LISTING\n        ]);\n        const config: ConfigState = yield select((state: RootReducer) => state.config);\n        setLocalStorage(config);\n    }\n}\n\nexport function* firstConfigFetch() {\n    try {\n        yield call(getConfigSaga);\n    } catch (e) {\n        const timestamp = Date.now();\n        const id = uuid();\n        yield put(configActions.Actions.fetchFailed(`failed to fetch config: ${e.toString()}`, timestamp, id));\n    }\n}\n\nexport function* configRootSaga() {\n    yield fork(firstConfigFetch);\n    yield fork(getConfigOnReconnect);\n    yield fork(updateLocalStorageConfig);\n}","import { DeleteDatasetResponse, DetectDatasetResponse, OpenDatasetRequest, OpenDatasetResponse } from \"../messages\";\n\nexport function openDataset(id: string, dataset: OpenDatasetRequest): Promise<OpenDatasetResponse> {\n    return fetch(`/api/datasets/${id}/`, {\n        body: JSON.stringify(dataset),\n        credentials: \"same-origin\",\n        method: \"PUT\",\n    }).then(r => r.json());\n}\n\nexport function deleteDataset(id: string): Promise<DeleteDatasetResponse> {\n    return fetch(`/api/datasets/${id}/`, {\n        credentials: \"same-origin\",\n        method: \"DELETE\",\n    }).then(r => r.json());\n}\n\n\nexport function detectDataset(path: string): Promise<DetectDatasetResponse> {\n    return fetch(`/api/datasets/detect/?path=${path}`, {\n        credentials: \"same-origin\",\n        method: \"GET\",\n    }).then(r => r.json());\n}","import { call, put, select, takeEvery } from 'redux-saga/effects';\nimport uuid from 'uuid/v4';\nimport * as browserActions from '../browser/actions';\nimport { joinPaths } from '../config/helpers';\nimport { ConfigState } from '../config/reducers';\nimport { DetectDatasetResponse, OpenDatasetResponse } from '../messages';\nimport { RootReducer } from '../store';\nimport * as datasetActions from \"./actions\";\nimport { deleteDataset, detectDataset, openDataset } from './api';\n\n\nexport function* createDatasetSaga(action: ReturnType<typeof datasetActions.Actions.create>) {\n    try {\n        const resp: OpenDatasetResponse = yield call(openDataset, action.payload.dataset.id, { dataset: action.payload.dataset });\n        if (resp.status === \"ok\") {\n            yield put(datasetActions.Actions.created(resp.details));\n        } else if (resp.status === \"error\") {\n            const timestamp = Date.now();\n            const id = uuid();\n            yield put(datasetActions.Actions.error(resp.dataset, resp.msg, timestamp, id));\n        }\n    } catch (e) {\n        const timestamp = Date.now();\n        const id = uuid();\n        yield put(datasetActions.Actions.error(action.payload.dataset.id, `Error loading dataset: ${e.toString()}`, timestamp, id));\n    }\n}\n\nexport function* deleteDatasetSaga(action: ReturnType<typeof datasetActions.Actions.delete>) {\n    try {\n        yield call(deleteDataset, action.payload.dataset);\n    } catch (e) {\n        const timestamp = Date.now();\n        const id = uuid();\n        yield put(datasetActions.Actions.error(action.payload.dataset, `Error closing dataset: ${e.toString()}`, timestamp, id));\n    }\n}\n\nexport function* doOpenDataset(fullPath: string) {\n    const config: ConfigState = yield select((state: RootReducer) => state.config);\n    let prefillParams = config.lastOpened[fullPath];\n    if (!prefillParams) {\n        try {\n            yield put(datasetActions.Actions.detect(fullPath));\n            const detectResult: DetectDatasetResponse = yield call(detectDataset, fullPath);\n            if (detectResult.status === \"ok\") {\n                prefillParams = detectResult.datasetParams;\n                yield put(datasetActions.Actions.detected(fullPath, detectResult.datasetParams));\n            } else {\n                yield put(datasetActions.Actions.detectFailed(fullPath));\n            }\n        } catch (e) {\n            yield put(datasetActions.Actions.detectFailed(fullPath));\n        }\n    }\n    yield put(datasetActions.Actions.open(fullPath, prefillParams));\n}\n\nexport function* openDatasetSagaFullPath(action: ReturnType<typeof browserActions.Actions.selectFullPath>) {\n    const fullPath = action.payload.path;\n    yield call(doOpenDataset, fullPath);\n}\n\nexport function* openDatasetSaga(action: ReturnType<typeof browserActions.Actions.select>) {\n    const config: ConfigState = yield select((state: RootReducer) => state.config);\n    const fullPath = joinPaths(config, action.payload.path, action.payload.name);\n    yield call(doOpenDataset, fullPath);\n}\n\nexport function* datasetRootSaga() {\n    yield takeEvery(datasetActions.ActionTypes.CREATE, createDatasetSaga);\n    yield takeEvery(datasetActions.ActionTypes.DELETE, deleteDatasetSaga);\n    yield takeEvery(browserActions.ActionTypes.SELECT, openDatasetSaga);\n    yield takeEvery(browserActions.ActionTypes.SELECT_FULL_PATH, openDatasetSagaFullPath);\n}","import { all } from 'redux-saga/effects';\nimport { analysisRootSaga } from './analysis/sagas';\nimport { directoryListingSaga } from './browser/sagas';\nimport { webSocketSaga } from './channel/sagas';\nimport { clusterConnectionSaga } from './cluster/sagas';\nimport { configRootSaga } from './config/sagas';\nimport { datasetRootSaga } from './dataset/sagas';\n\nexport function* rootSaga() {\n    yield all([\n        configRootSaga(),\n        webSocketSaga(),\n        analysisRootSaga(),\n        datasetRootSaga(),\n        clusterConnectionSaga(),\n        directoryListingSaga(),\n    ]);\n}","import { AllActions } from \"../actions\";\nimport * as datasetActions from \"../dataset/actions\";\nimport { ById, filterWithPred, insertById, updateById } from \"../helpers/reducerHelpers\";\nimport * as analysisActions from \"./actions\";\nimport { AnalysisState, JobList } from \"./types\";\n\nexport type AnalysisReducerState = ById<AnalysisState>;\n\nconst initialAnalysisState: AnalysisReducerState = {\n    byId: {},\n    ids: [],\n}\n\nexport function analysisReducer(state = initialAnalysisState, action: AllActions): AnalysisReducerState {\n    switch (action.type) {\n        case analysisActions.ActionTypes.CREATED: {\n            return insertById(state, action.payload.analysis.id, action.payload.analysis);\n        }\n        case analysisActions.ActionTypes.PREPARE_RUN: {\n            const { jobIndex, id } = action.payload;\n            const analysis = state.byId[id];\n            const oldJob = analysis.jobs[jobIndex];\n            const jobHistory = [...analysis.jobHistory];\n            if (oldJob !== undefined) {\n                // TODO: length restriction?\n                const hist = jobHistory[jobIndex] ? jobHistory[jobIndex] : [];\n                jobHistory[jobIndex] = [oldJob, ...hist];\n            }\n            const newJobs: JobList = [...analysis.jobs];\n            newJobs[jobIndex] = action.payload.job;\n            return updateById(state, action.payload.id, { jobs: newJobs, jobHistory })\n        }\n        case analysisActions.ActionTypes.REMOVED: {\n            return filterWithPred(state, (r: AnalysisState) => r.id !== action.payload.id);\n        }\n        case datasetActions.ActionTypes.DELETE: {\n            return filterWithPred(state, (r: AnalysisState) => r.dataset !== action.payload.dataset);\n        }\n    }\n    return state;\n}","import { AllActions } from \"../actions\";\nimport * as configActions from '../config/actions';\nimport { DirectoryListingDetails, FSPlace } from \"../messages\";\nimport * as browserActions from './actions';\nimport { DirectoryBrowserState } from \"./types\";\n\nconst initialBrowserState: DirectoryBrowserState = {\n    isOpen: false,\n    isLoading: true,\n    path: \"/\",\n    drives: [],\n    places: {},\n    files: [] as DirectoryListingDetails[],\n    dirs: [] as DirectoryListingDetails[],\n}\n\nexport function directoryBrowserReducer(state: DirectoryBrowserState = initialBrowserState, action: AllActions): DirectoryBrowserState {\n    switch (action.type) {\n        case configActions.ActionTypes.FETCHED: {\n            return Object.assign({}, state, {\n                path: action.payload.config.cwd,\n            })\n            break;\n        }\n        case browserActions.ActionTypes.OPEN: {\n            return Object.assign({}, state, {\n                isOpen: true,\n            })\n            break;\n        }\n        case browserActions.ActionTypes.CANCEL: {\n            return Object.assign({}, state, {\n                isOpen: false,\n            })\n            break;\n        }\n        case browserActions.ActionTypes.LIST_DIRECTORY: {\n            return Object.assign({}, state, {\n                isLoading: true,\n            })\n            break;\n        }\n        case browserActions.ActionTypes.DIRECTORY_LISTING: {\n            const places = action.payload.places.reduce((acc, place: FSPlace) => {\n                return Object.assign({}, acc, {\n                    [place.key]: place,\n                })\n            }, {});\n            return Object.assign({}, state, {\n                isLoading: false,\n                path: action.payload.path,\n                files: action.payload.files,\n                dirs: action.payload.dirs,\n                drives: action.payload.drives,\n                places,\n            })\n            break;\n        }\n        case browserActions.ActionTypes.SELECT_FULL_PATH:\n        case browserActions.ActionTypes.SELECT: {\n            return Object.assign({}, state, {\n                isLoading: false,\n                isOpen: false,\n            });\n        }\n    }\n    return state;\n}","import { AllActions } from \"../actions\";\nimport * as channelActions from './actions';\n\nexport interface ChannelStatusReducer {\n    status: ChannelStatusCodes,\n}\n\nexport enum ChannelStatusCodes {\n    CONNECTING = \"connecting\",\n    CONNECTED = \"connected\",\n    READY = \"ready\",\n    WAITING = \"waiting\",\n}\n\nconst initialChannelState: ChannelStatusReducer = {\n    status: ChannelStatusCodes.WAITING,\n}\n\nexport function channelStatusReducer(state = initialChannelState, action: AllActions): ChannelStatusReducer {\n    switch (action.type) {\n        case channelActions.ActionTypes.OPEN: {\n            return { status: ChannelStatusCodes.CONNECTED };\n        }\n        case channelActions.ActionTypes.INITIAL_STATE: {\n            return { status: ChannelStatusCodes.READY };\n        }\n        case channelActions.ActionTypes.CLOSE: {\n            return { status: ChannelStatusCodes.WAITING };\n        }\n    }\n    return state;\n}","import { AllActions } from \"../actions\";\nimport { ConnectRequestParams } from \"../messages\";\nimport * as clusterActions from './actions';\n\nexport type ClusterConnectionState = {\n    status: \"connected\",\n    params: ConnectRequestParams,\n} | {\n    status: \"disconnected\",\n} | {\n    status: \"unknown\",\n}\n\nconst initialClusterConnectionState: ClusterConnectionState = {\n    status: \"unknown\"\n}\n\nexport function clusterConnectionReducer(state = initialClusterConnectionState, action: AllActions): ClusterConnectionState {\n    switch (action.type) {\n        case clusterActions.ActionTypes.NOT_CONNECTED: {\n            return {\n                status: \"disconnected\"\n            };\n        }\n        case clusterActions.ActionTypes.CONNECTED: {\n            return {\n                status: \"connected\",\n                params: action.payload.params,\n            }\n        }\n    }\n    return state;\n}","import { AllActions } from \"../actions\";\nimport * as browserActions from '../browser/actions';\nimport * as datasetActions from '../dataset/actions';\nimport { DatasetFormParams, MsgPartConfig } from \"../messages\";\nimport * as configActions from './actions';\nimport { makeUnique } from \"./helpers\";\n\nexport interface LocalConfig {\n    fileHistory: string[],\n    lastOpened: {\n        [path: string]: DatasetFormParams\n    }\n}\n\nexport interface ConfigMeta {\n    haveConfig: boolean,\n}\n\nexport type ConfigParams = MsgPartConfig & LocalConfig;\nexport type ConfigState = ConfigParams & ConfigMeta;\n\nconst initialConfigState: ConfigState = {\n    version: \"\",\n    revision: \"\",\n    localCores: 0,\n    cwd: \"/\",\n    separator: \"/\",\n    lastOpened: {},\n    fileHistory: [],\n    haveConfig: false,\n}\n\nexport function configReducer(state = initialConfigState, action: AllActions): ConfigState {\n    switch (action.type) {\n        case configActions.ActionTypes.FETCHED: {\n            return Object.assign({}, action.payload.config, { haveConfig: true });\n        }\n        case browserActions.ActionTypes.DIRECTORY_LISTING: {\n            return Object.assign({}, state, {\n                cwd: action.payload.path,\n            });\n        }\n        case datasetActions.ActionTypes.CREATE: {\n            const newLastOpened = Object.assign({}, state.lastOpened, { [action.payload.dataset.params.path]: action.payload.dataset.params });\n            const newFileHistory = makeUnique([\n                action.payload.dataset.params.path, ...state.fileHistory\n            ]).slice(0, 11);\n            return Object.assign({}, state, {\n                lastOpened: newLastOpened,\n                fileHistory: newFileHistory,\n            });\n        }\n    }\n    return state;\n}","import { AllActions } from \"../actions\";\nimport * as channelActions from '../channel/actions';\nimport { constructById, filterWithPred, insertById, updateById } from \"../helpers/reducerHelpers\";\nimport { Dataset, DatasetState, DatasetStatus } from \"../messages\";\nimport * as datasetActions from './actions';\nimport { DatasetsState, OpenDatasetState } from \"./types\";\n\nconst initialDatasetState: DatasetsState = {\n    byId: {},\n    ids: [],\n};\n\nexport function datasetReducer(state = initialDatasetState, action: AllActions): DatasetsState {\n    switch (action.type) {\n        case channelActions.ActionTypes.INITIAL_STATE: {\n            const datasets = action.payload.datasets.map(ds => Object.assign({}, ds, { status: DatasetStatus.OPEN }));\n            return {\n                byId: constructById(datasets, ds => ds.id),\n                ids: datasets.map(ds => ds.id),\n            }\n        }\n        case datasetActions.ActionTypes.CREATE: {\n            const ds: Dataset = {\n                ...action.payload.dataset,\n                status: DatasetStatus.OPENING\n            };\n            return insertById(state, action.payload.dataset.id, ds);\n        }\n        case datasetActions.ActionTypes.CREATED: {\n            const ds = Object.assign({}, action.payload.dataset, { status: DatasetStatus.OPEN });\n            return updateById(state, action.payload.dataset.id, ds);\n        }\n        case datasetActions.ActionTypes.ERROR: {\n            return filterWithPred(state, (r: DatasetState) => r.id !== action.payload.dataset);\n        }\n        case datasetActions.ActionTypes.DELETE: {\n            return updateById(state, action.payload.dataset, { status: DatasetStatus.DELETING });\n        }\n        case datasetActions.ActionTypes.DELETED: {\n            return filterWithPred(state, (r: DatasetState) => r.id !== action.payload.dataset);\n        }\n    }\n    return state;\n}\n\nconst initialOpenDatasetState: OpenDatasetState = {\n    busy: false,\n    busyPath: \"\",\n    formVisible: false,\n    formPath: \"/\",\n    formInitialParams: undefined,\n}\n\nexport function openDatasetReducer(state = initialOpenDatasetState, action: AllActions): OpenDatasetState {\n    switch (action.type) {\n        case datasetActions.ActionTypes.OPEN: {\n            return {\n                ...state,\n                formVisible: true,\n                formPath: action.payload.path,\n                formInitialParams: action.payload.initialParams,\n            };\n        }\n        case datasetActions.ActionTypes.CANCEL_OPEN: {\n            return {\n                ...state,\n                formVisible: false,\n            }\n        }\n        case datasetActions.ActionTypes.CREATE: {\n            return {\n                ...state,\n                formVisible: false,\n            }\n        }\n        case datasetActions.ActionTypes.DETECT: {\n            return {\n                ...state,\n                busyPath: action.payload.path,\n                busy: true,\n            }\n        }\n        case datasetActions.ActionTypes.DETECTED:\n        case datasetActions.ActionTypes.DETECT_FAILED: {\n            return {\n                ...state,\n                busyPath: \"\",\n                busy: false,\n            }\n        }\n    }\n    return state;\n}","import { AllActions } from \"../actions\";\nimport * as analysisActions from '../analysis/actions';\nimport * as browserActions from '../browser/actions';\nimport * as channelActions from '../channel/actions';\nimport * as datasetActions from '../dataset/actions';\nimport { ById, filterWithPred, insertById } from \"../helpers/reducerHelpers\";\nimport * as errorActions from './actions';\n\nexport interface ErrorMessage {\n    id: string,\n    msg: string,\n    timestamp: number,\n}\n\nexport type ErrorState = ById<ErrorMessage>;\n\nconst initialErrorState: ErrorState = {\n    byId: {},\n    ids: [],\n};\n\nexport function errorReducer(state = initialErrorState, action: AllActions): ErrorState {\n    switch (action.type) {\n        case browserActions.ActionTypes.ERROR:\n        case datasetActions.ActionTypes.ERROR:\n        case channelActions.ActionTypes.ERROR:\n        case analysisActions.ActionTypes.ERROR:\n        case channelActions.ActionTypes.JOB_ERROR: {\n            return insertById(state, action.payload.id, {\n                id: action.payload.id,\n                msg: action.payload.msg,\n                timestamp: action.payload.timestamp,\n            });\n        }\n        case channelActions.ActionTypes.OPEN: {\n            return initialErrorState;\n        }\n        case errorActions.ActionTypes.DISMISS: {\n            return filterWithPred(state, (r: ErrorMessage) => r.id !== action.payload.id);\n        }\n    }\n    return state;\n}","import { AllActions } from \"../actions\";\nimport * as channelActions from '../channel/actions';\nimport { ById, insertById, updateById } from \"../helpers/reducerHelpers\";\nimport * as jobActions from './actions';\nimport { JobRunning, JobState, JobStatus } from \"./types\";\n\nexport type JobReducerState = ById<JobState>;\n\nconst initialJobState: JobReducerState = {\n    byId: {},\n    ids: [],\n};\n\nexport function jobReducer(state = initialJobState, action: AllActions): JobReducerState {\n    switch (action.type) {\n        case jobActions.ActionTypes.CREATE: {\n            const createResult = insertById(\n                state,\n                action.payload.id,\n                {\n                    id: action.payload.id,\n                    dataset: action.payload.dataset,\n                    running: JobRunning.CREATING,\n                    status: JobStatus.CREATING,\n                    results: [],\n                    startTimestamp: action.payload.timestamp,\n                }\n            )\n            return createResult;\n        }\n        case channelActions.ActionTypes.JOB_STARTED: {\n            return updateById(\n                state,\n                action.payload.job,\n                {\n                    running: JobRunning.RUNNING,\n                    status: JobStatus.IN_PROGRESS,\n                    startTimestamp: action.payload.timestamp,\n                }\n            )\n        }\n        case channelActions.ActionTypes.TASK_RESULT: {\n            return updateById(\n                state,\n                action.payload.job,\n                {\n                    results: action.payload.results,\n                }\n            );\n        }\n        case channelActions.ActionTypes.FINISH_JOB: {\n            const { job, timestamp, results } = action.payload;\n            return updateById(\n                state,\n                job,\n                {\n                    running: JobRunning.DONE,\n                    status: JobStatus.SUCCESS,\n                    results,\n                    endTimestamp: timestamp,\n                }\n            );\n        }\n        case channelActions.ActionTypes.JOB_ERROR: {\n            const { job, timestamp } = action.payload;\n            return updateById(\n                state,\n                job,\n                {\n                    running: JobRunning.DONE,\n                    status: JobStatus.ERROR,\n                    endTimestamp: timestamp,\n                }\n            )\n        }\n    }\n    return state;\n}","import { combineReducers } from \"redux\";\nimport { analysisReducer } from \"./analysis/reducers\";\nimport { directoryBrowserReducer } from './browser/reducers';\nimport { channelStatusReducer } from \"./channel/reducers\";\nimport { clusterConnectionReducer } from \"./cluster/reducers\";\nimport { configReducer } from \"./config/reducers\";\nimport { datasetReducer, openDatasetReducer } from \"./dataset/reducers\";\nimport { errorReducer } from \"./errors/reducers\";\nimport { jobReducer } from \"./job/reducers\";\n\nexport const rootReducer = combineReducers({\n    analyses: analysisReducer,\n    channelStatus: channelStatusReducer,\n    clusterConnection: clusterConnectionReducer,\n    datasets: datasetReducer,\n    openDataset: openDatasetReducer,\n    jobs: jobReducer,\n    errors: errorReducer,\n    config: configReducer,\n    browser: directoryBrowserReducer,\n})\n\nexport type RootReducer = ReturnType<typeof rootReducer>;","// tslint:disable:ordered-imports\nimport \"core-js/fn/symbol/iterator.js\";\nimport \"core-js/es6/symbol.js\";\nimport 'react-app-polyfill/ie11';\n// tslint:enable:ordered-imports\n\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { applyMiddleware, compose, createStore } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\nimport { rootSaga } from './sagas';\nimport { rootReducer } from './store';\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst composeEnhancers = (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(rootReducer, composeEnhancers(\n    applyMiddleware(\n        sagaMiddleware,\n    )\n));\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root') as HTMLElement\n);\nregisterServiceWorker();\n\nsagaMiddleware.run(rootSaga);"],"sourceRoot":""}