{"version":3,"sources":["job/components/ResultImage.module.css","images/LiberTEM logo-medium.png","cluster/actions.ts","About.tsx","helpers/actionHelpers.ts","helpers/index.ts","messages.ts","browser/actions.ts","cluster/components/LocalConnectionForm.tsx","cluster/components/TCPConnectionForm.tsx","cluster/components/ClusterConnectionForm.tsx","channel/components/ChannelConnecting.tsx","channel/components/ChannelStatus.tsx","browser/components/FileBrowserEntry.tsx","browser/components/FileBrowserHeader.tsx","browser/components/FileEntry.tsx","browser/components/FolderEntry.tsx","browser/components/PathDropDownItem.tsx","browser/components/PathInput.tsx","browser/components/RecentFiles.tsx","browser/components/PathBar.tsx","browser/components/FileBrowser.tsx","job/types.ts","browser/components/BrowserWrapper.tsx","widgets/BusySpinner.tsx","widgets/BusyWrapper.tsx","widgets/HandleParent.tsx","job/components/ResultImage.tsx","job/components/Result.tsx","job/components/Selectors.tsx","job/components/ResultList.tsx","widgets/constraints.ts","widgets/styles.ts","widgets/Disk.tsx","widgets/kbdHandler.ts","widgets/DraggableHandle.tsx","analysis/actions.ts","analysis/components/DefaultFrameView.tsx","analysis/components/AnalysisLayoutTwoCol.tsx","analysis/components/FramePicker.tsx","analysis/components/ModeSelector.tsx","widgets/Rect.tsx","analysis/components/RectROI.tsx","analysis/components/RoiPicker.tsx","analysis/components/DiskROI.tsx","analysis/components/Toolbar.tsx","analysis/helpers.ts","analysis/components/CenterOfMassAnalysis.tsx","helpers/svg.ts","widgets/Ring.tsx","analysis/components/AnalysisLayoutTwoRes.tsx","analysis/components/Clustering.tsx","analysis/components/DiskMaskAnalysis.tsx","analysis/components/FEM.tsx","analysis/components/AnalysisLayoutThreeCol.tsx","analysis/components/FFTFramePicker.tsx","analysis/components/FFTSumFrames.tsx","analysis/components/FFTFrameView.tsx","analysis/components/FFTAnalysis.tsx","analysis/components/PointSelectionAnalysis.tsx","analysis/components/RadialFourierAnalysis.tsx","analysis/components/RingMaskAnalysis.tsx","analysis/types.ts","analysis/components/Analysis.tsx","analysis/components/AnalysisList.tsx","helpers/reducerHelpers.ts","analysis/components/AnalysisSelect.tsx","dataset/actions.ts","dataset/components/AddAnalysis.tsx","dataset/components/DatasetParams.tsx","dataset/components/DatasetInfo.tsx","dataset/components/DatasetToolbar.tsx","dataset/components/Dataset.tsx","dataset/helpers.ts","dataset/components/BLOParamsForm.tsx","errors/actions.ts","dataset/components/DatasetTypeSelect.tsx","dataset/components/EMPADParamsForm.tsx","dataset/components/FRMS6ParamsForm.tsx","dataset/components/HDF5ParamsForm.tsx","dataset/components/HDFSParamsForm.tsx","dataset/components/K2ISParamsForm.tsx","dataset/components/MIBParamsForm.tsx","dataset/components/RawFileParamsForm.tsx","dataset/components/SERParamsForm.tsx","dataset/components/DatasetOpen.tsx","dataset/components/DatasetOpenSpinner.tsx","dataset/components/DatasetList.tsx","errors/components/Error.tsx","errors/components/ErrorList.tsx","App.tsx","registerServiceWorker.ts","job/actions.ts","job/api.ts","analysis/sagas.ts","config/helpers.ts","browser/api.ts","channel/actions.ts","browser/sagas.ts","channel/messages.ts","channel/sagas.ts","cluster/api.ts","config/actions.ts","cluster/sagas.ts","config/api.ts","config/sagas.ts","dataset/api.ts","dataset/sagas.ts","sagas.ts","analysis/reducers.ts","browser/reducers.ts","channel/reducers.ts","cluster/reducers.ts","config/reducers.ts","dataset/reducers.ts","errors/reducers.ts","job/reducers.ts","store.ts","index.tsx"],"names":["module","exports","default","fallback","__webpack_require__","p","ActionTypes","connect","state","version","config","revision","_ref","react","Header","as","slice","List","Item","Icon","name","Content","href","src","alt","createAction","type","payload","meta","undefined","Actions","notConnected","NOT_CONNECTED","params","CONNECT","connected","CONNECTED","defaultDebounce","fn","delay","arguments","length","_","maxWait","getEnumValues","e","Object","keys","ClusterTypes","DatasetTypes","DatasetStatus","AnalysisTypes","ClusterTypeMetadata","_ClusterTypeMetadata","defineProperty","LOCAL","label","TCP","helpText","withFormik","mapPropsToValues","ownProps","numWorkers","localCores","handleSubmit","values","formikBag","onSubmit","props","objectSpread","touched","errors","isSubmitting","dirty","handleChange","handleBlur","handleReset","Form","Field","htmlFor","value","onChange","onBlur","Button","primary","disabled","address","mapDispatchToProps","connectToCluster","clusterActions","clusterTypeOptions","map","t","text","ClusterConnectionForm","clusterType","setType","_this","setState","data","this","components_LocalConnectionForm","components_TCPConnectionForm","Dropdown","inline","options","Segment","renderForm","React","ChannelConnecting","msg","Message","icon","loading","messages","waiting","connecting","clusterMessages","channelStatus","clusterConnection","haveConfig","children","status","components_ChannelConnecting","components_ClusterConnectionForm","list","path","LIST_DIRECTORY","dirListing","dirs","files","drives","places","DIRECTORY_LISTING","open","OPEN","cancel","CANCEL","select","SELECT","selectFullPath","SELECT_FULL_PATH","error","timestamp","id","ERROR","detectParams","DETECT_PARAMS","paramsDetected","PARAMS_DETECTED","TimeStamp","ts","date","Date","fmtDate","toLocaleDateString","fmtTime","toLocaleTimeString","title","concat","style","display","whiteSpace","width","marginRight","FileSize","_ref2","fmtSize","bytes","si","thresh","Math","abs","size","unit","units","u","toFixed","humanFileSize","textAlign","Cell","_ref3","overflow","textOverflow","FileBrowserEntry","onClick","_this$props","details","myStyle","cursor","tsStyles","paddingRight","flexGrow","FileBrowserEntry_Cell","FileBrowserEntry_FileSize","owner","FileBrowserEntry_TimeStamp","ctime","mtime","FileBrowserHeader","alignRight","paddingBottom","FileEntry","components_FileBrowserEntry","dispatch","browserActions","window","setTimeout","toString","objectWithoutProperties","newProps","initialPath","enableReinitialize","Input","autoComplete","lastOpened","fileHistory","separator","recentFiles","filter","item","floating","Menu","content","option","idx","key","refresh","currentPath","handleInputChange","goUp","driveOptions","placeOptions","components_RecentFiles","components_PathDropDownItem","components_PathInput","listRef","scrollToTop","current","scrollToItem","sortByKey","array","getKey","sort","a","b","x","y","JobRunning","JobStatus","browser","isLoading","getSortKey","toLowerCase","dirEntries","dir","components_FolderEntry","fileEntries","f","components_FileEntry","entries","index_esm","overflowY","ref","height","itemCount","itemSize","index","Group","components_PathBar","components_FileBrowserHeader","isOpen","components_FileBrowser","labelPosition","BusySpinner","margin","padding","position","bottom","right","color","opacity","BusyWrapper","busy","widgets_BusySpinner","HandleParent","_React$Component","_getPrototypeOf2","classCallCheck","_len","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","currentHandle","handleDragStart","h","handleDrop","handleMouseMove","externalMouseMove","handleMouseLeave","externalLeave","handleMouseUp","externalMouseUp","inherits","createClass","onMouseMove","onMouseLeave","onMouseUp","onKeyDown","onKeyboardEvent","outline","tabIndex","fill","renderHandles","_this2","_this$props2","handles","i","elem","ResultImage","job","result","results","className","styles","viewBox","xlinkHref","imageURL","ResultWrapper","styled","svg","_templateObject","Result","extraHandles","toConsumableArray","widgets_HandleParent","extraWidgets","running","DONE","widgets_BusyWrapper","components_ResultImage","Selectors","div","Selectors_templateObject","ResultList","selectedChannel","selectChannel","getJob","currentJob","analysis","jobsById","jobIndex","history","jobHistory","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","tmpJob","err","return","selectors","dataset","subtitle","currentResult","border","components_Result","dt","endTimestamp","startTimestamp","components_Selectors","ResultList_ResultImageSelector","selectedImg","ResultImageSelector","availableImages","description","analyses","byId","jobId","jobs","ds","datasets","inRectConstraint","max","min","cbToRadius","cx","cy","cb","dx","dy","sqrt","dist","keepOnCY","riConstraint","outerPos","otherX","roConstraints","innerPos","defaultMaskStyles","imageWidth","fillOpacity","strokeOpacity","stroke","strokeWidth","Disk","imageHeight","r","handleKeyEvent","update","delta","shiftKey","preventDefault","StyledCircle","circle","DraggableHandle_templateObject","Cross","_templateObject2","FocusGroup","g","_templateObject3","Handle","scale","withCross","focusRef","transform","crossSpec","cross","d","assign","relativeCoords","parent","ownerSVGElement","Error","inWidthAttr","getAttribute","inWidth","getBoundingClientRect","getScalingFactor","parentPos","pageX","left","pageXOffset","pageY","top","pageYOffset","DraggableHandle","posRef","dragging","drag","move","stopDrag","applyConstraint","constraint","startDrag","parentOnDragStart","assertThisInitialized","focus","onDragMove","constrained","parentOnDrop","_this$state","handleKeyDown","newCoords","visibility","DraggableHandle_Handle","onMouseDown","_this$state$drag","renderCommon","renderDragging","DefaultModes","DefaultRois","create","analysisType","CREATE","created","CREATED","prepareRun","PREPARE_RUN","run","parameters","RUN","RUNNING","remove","REMOVE","removed","REMOVED","AnalysisLayoutTwoCol","toolbar","attached","Grid","columns","Row","Column","useFramePicker","enabled","scanWidth","scanHeight","analysisId","setCx","setCy","useDispatch","useEffect","analysisActions","PICK_FRAME","onPickChange","pickX","pickY","newX","round","newY","coords","onDragStart","onDrop","react_default","createElement","widgets_DraggableHandle","ModeSelector","modes","currentMode","onModeChange","Rect","ymin","xmin","useRectROI","minLength","_useState","useState","_useState2","slicedToArray","setx","_useState3","_useState4","sety","_useState5","_useState6","setwidth","_useState7","_useState8","setheight","handleCornerChange","newx","newy","handleShapeChange","smthHandle","rectRoiParameters","roi","shape","rectRoiHandles","rectRoiWidgets","widgets_Rect","useRoiPicker","roiParameters","handle","analysisDetails","clearTimeout","JSON","stringify","useDefaultFrameView","widgets","availableModes","SUM","SD","PICK","availableRois","ALL","DISK","RECT","frameMode","setMode","setRoi","frameModeSelector","components_ModeSelector","roiSelector","_React$useState","_React$useState2","_React$useState3","_React$useState4","_useFramePicker","pickCoords","pickHandles","_useRectROI","_useDiskROI","setR","handleCenterChange","newCx","newCy","handleRChange","newR","rHandle","diskRoiParameters","diskRoiHandles","diskRoiWidgets","widgets_Disk","useDiskROI","SD_FRAMES","SUM_FRAMES","frameViewTitle","jobIdxsToInclude","filteredJobs","indexOf","reduce","prevValue","getAnalysisStatus","busyIdxs","handleRemove","onApply","applyIconProps","CenterOfMassAnalysis","_shape","frameViewWidgets","_useDefaultFrameView","resultHandles","resultWidgets","components_Toolbar","CENTER_OF_MASS","components_AnalysisLayoutTwoCol","components_ResultList","DraggableHandle_DraggableHandle","getPathArc","center","start","end","radius","degree","points","push","getLocationFromAngle","clockWise","join","getCirclePath","radian","PI","cos","sin","Ring","ri","pathSpec","ro","fillRule","AnalysisLayoutTwoRes","mid","clustparams","title1","title2","title3","ClustAnalysis","setRi","setRo","riHandle","roHandle","setDelta","min_dist","setMin_dist","_React$useState5","_React$useState6","n_peaks","setPeak","_React$useState7","_React$useState8","n_clust","setClust","handleRIChange","handleROChange","widgets_Ring","SUM_SIG","CLUST","_React$useState9","_React$useState10","paramsVisible","setParamsVisible","Accordion","Title","active","event","step","target","valueAsNumber","components_AnalysisLayoutTwoRes","DiskMaskAnalysis","APPLY_DISK_MASK","FEMAnalysis","FEM","AnalysisLayoutThreeCol","useFFTFramePicker","real_rad","real_centerx","real_centery","PICK_FFT_FRAME","useFFTSumFrames","FFTSUM_FRAMES","useFFTFrameView","FFTAnalysis","rad_in","rad_out","frameViewWidgetsfft","check","setCheck","_useState9","_useState10","frameViewWidgetsreal","_useFFTFrameView","APPLY_FFT_MASK","components_AnalysisLayoutThreeCol","checked","PointSelectionAnalysis","APPLY_POINT_SELECTOR","RadialFourierAnalysis","nBins","_useState11","maxOrder","RADIAL_FOURIER","n_bins","max_order","RingMaskAnalysis","APPLY_RING_MASK","AnalysisMetadata","_AnalysisMetadata","desc","component","AnalysisDispatcherComponent","useSelector","AnalysisComponent","mainAnalysisType","AnalysisList","ids","Analysis","updateById","partialRecord","newObj","newById","insertById","record","filterWithPred","pred","acc","getMetadata","analysisTypeOptions","AnalysisSelect","labeled","button","handleAddAnalysis","components_AnalysisSelect","renderParams","Table","DatasetParams","HeaderCell","Body","DiagElem","DatasetInfo_DiagElems","diagnostics","renderValue","DiagElems","DatasetInfo_DiagElem","DatasetInfo","components_DatasetParams","initialParams","cancelOpen","CANCEL_OPEN","delete","DELETE","deleted","DELETED","detect","DETECT","detected","DETECTED","detectFailed","DETECT_FAILED","handleRemoveDataset","datasetActions","DatasetContainer","_msg","OPENING","DELETING","dividing","marginTop","marginBottom","horizontal","Modal","trigger","link","Popup","components_DatasetInfo","flexShrink","components_DatasetToolbar","components_AnalysisList","components_AddAnalysis","parseNumList","nums","split","part","getInitial","otherwise","initial","tileshape","_formikBag$props","BLO","onCancel","datasetTypeOptions","DatasetTypeSelect","currentType","scan_size","EMPAD","FRMS6","ds_path","HDF5","HDFS","K2IS","MIB","enable_direct","detector_size","dtype","RAW","SER","DatasetOpen","datasetType","setDatasetType","formInitial","formPath","createDataset","form","components_DatasetTypeSelect","components_HDF5ParamsForm","components_HDFSParamsForm","components_RawFileParamsForm","MIBParamsForm","BLOParamsForm","K2ISParamsForm","components_SERParamsForm","components_FRMS6ParamsForm","EMPADParamsForm","message","assertNotReached","formVisible","openDataset","formInitialParams","uuid","busyPath","DatasetList","dsId","Dataset","components_DatasetOpenSpinner","components_DatasetOpen","components_BrowserWrapper","DISMISS","dismiss","errorActions","negative","onDismiss","clusterConnected","channelConnected","latestErrors","showModal","components_Error","App","Container","logo","alignSelf","src_About","components_ErrorList","components_ChannelStatus","components_DatasetList","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","startJob","datasetId","fetch","body","credentials","method","json","cancelJob","createAnalysisSaga","analysisSidecar","doRemoveAnalysisSaga","analysisRootSaga","selectDataset","selectAnalysis","selectJob","action","sidecarTask","regenerator_default","wrap","_context","prev","sent","fork","put","take","t0","now","stop","_marked","runOrParamsChannel","_action$payload","oldJobId","_context3","actionChannel","buffers","sliding","abrupt","jobActions","_marked3","_context4","finish","_marked4","_context5","takeEvery","_marked5","CONFIG_KEY","joinPaths","parts","replace","RegExp","trim","mergeLocalStorage","serverConfig","localSettings","localStorage","getItem","localSettingsParsed","parse","defaultConfig","setLocalStorage","configItem","setItem","getDirectoryListing","url","encodeURIComponent","directoryListingSaga","fetchOnRequest","fetchDirectoryListing","fetchDirectoryListOnOpen","sagas_marked","newPath","_context2","sagas_marked2","browserState","alternative","_browserState","_timestamp","_id","home","sagas_marked3","cwd","sagas_marked4","MessageTypes","initialState","INITIAL_STATE","jobStarted","JOB_STARTED","finishJob","FINISH_JOB","taskResult","TASK_RESULT","jobError","JOB_ERROR","close","CLOSE","cancelled","CANCELLED","createMessage","messageType","attribs","Messages","followup","binary","objectURL","BINARY","deleteDataset","DELETE_DATASET","CANCEL_JOB_DONE","webSocketSaga","actionsFromChannel","handleBinaryParts","handleTaskResult","handleFinishJob","createWebSocketChannel","eventChannel","emit","onMessage","Blob","channelMessages","URL","createObjectURL","parsed","onOpen","onClose","END","onError","ws","WebSocket","port","addEventListener","removeEventListener","socketChannel","channelActions","channel_sagas_marked","channel_sagas_marked2","numParts","binMsg","channel_sagas_marked3","images","numMessages","descriptions","channel_sagas_marked4","sagas_marked5","connection","checkClusterConnection","connectSaga","putClusterStatus","trackClusterConnection","clusterConnectionSaga","conn","cluster_sagas_marked","cluster_sagas_marked2","cluster_sagas_marked3","all","cluster_sagas_marked4","FETCH","fetched","FETCHED","fetchFailed","FETCH_FAILED","getConfig","getConfigOnReconnect","getConfigSaga","updateLocalStorageConfig","firstConfigFetch","configRootSaga","config_sagas_marked","configResponse","mergedConfig","configActions","removeItem","config_sagas_marked2","config_sagas_marked3","config_sagas_marked4","config_sagas_marked5","detectDataset","createDatasetSaga","deleteDatasetSaga","doOpenDataset","openDatasetSagaFullPath","openDatasetSaga","datasetRootSaga","resp","dataset_sagas_marked","dataset_sagas_marked2","fullPath","prefillParams","detectResult","datasetParams","dataset_sagas_marked3","dataset_sagas_marked4","dataset_sagas_marked5","_context6","_marked6","rootSaga","src_sagas_marked","initialAnalysisState","ChannelStatusCodes","initialBrowserState","initialChannelState","WAITING","initialClusterConnectionState","initialConfigState","initialDatasetState","initialOpenDatasetState","initialErrorState","initialJobState","rootReducer","combineReducers","oldJob","hist","newJobs","READY","items","CREATING","IN_PROGRESS","SUCCESS","_action$payload2","inp","newLastOpened","newFileHistory","curr","place","sagaMiddleware","createSagaMiddleware","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","ReactDOM","es","src_App","document","getElementById","process","origin","response","headers","get","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.71d6682d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"default\":\"ResultImage_default__L-KI4\",\"fallback\":\"ResultImage_fallback__1fx_T\"};","module.exports = __webpack_public_path__ + \"static/media/LiberTEM logo-medium.7999e0dc.png\";","import { ActionsUnion, createAction } from '../helpers/actionHelpers';\nimport { ConnectRequestParams } from '../messages';\n\nexport enum ActionTypes {\n    NOT_CONNECTED = 'CLUSTER_NOT_CONNECTED',\n    CONNECT = 'CLUSTER_CONNECT',\n    CONNECTED = 'CLUSTER_CONNECTED',\n}\n\nexport const Actions = {\n    notConnected: () => createAction(ActionTypes.NOT_CONNECTED),\n    connect: (params: ConnectRequestParams) => createAction(ActionTypes.CONNECT, { params }),\n    connected: (params: ConnectRequestParams) => createAction(ActionTypes.CONNECTED, { params }),\n}\n\nexport type Actions = ActionsUnion<typeof Actions>;\n","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Header, List } from \"semantic-ui-react\";\nimport { RootReducer } from \"./store\";\n\nconst mapStateToProps = (state: RootReducer) => {\n    return {\n        version: state.config.version,\n        revision: state.config.revision,\n    }\n}\n\ntype MergedProps = ReturnType<typeof mapStateToProps>;\n\nconst About: React.SFC<MergedProps> = ({ version, revision }) => {\n    return (\n        <>\n            <Header as=\"h3\">This is LiberTEM version {version} (revision {revision.slice(0, 8)})</Header>\n            <List>\n                <List.Item>\n                    <List.Icon name=\"github\" />\n                    <List.Content>\n                        Find us on <a href=\"https://github.com/LiberTEM/LiberTEM\">GitHub</a>\n                    </List.Content>\n                </List.Item>\n                <List.Item>\n                    <List.Icon name=\"bug\" />\n                    <List.Content>\n                        Found a bug? Got a feature request? Please <a href=\"https://github.com/LiberTEM/LiberTEM/issues/new\">open an issue!</a>\n                    </List.Content>\n                </List.Item>\n                <List.Item>\n                    <List.Icon name=\"legal\" />\n                    <List.Content>\n                        LiberTEM is licensed under the <a href=\"https://github.com/LiberTEM/LiberTEM/blob/master/LICENSE\">GNU General Public License v3.0</a>\n                    </List.Content>\n                </List.Item>\n                <List.Item>\n                    <List.Icon name=\"book\" />\n                    <List.Content>\n                        Read <a href=\"https://libertem.github.io/LiberTEM/\">the documentation</a>\n                    </List.Content>\n                </List.Item>\n                <List.Item>\n                    <List.Icon name=\"user\" />\n                    <List.Content>\n                        Read <a href=\"https://libertem.github.io/LiberTEM/acknowledgments.html\">the acknowledgments</a>\n                    </List.Content>\n                </List.Item>\n                <List.Item>\n                    <List.Icon name=\"gitter\" />\n                    <List.Content>\n                        Join our <a href=\"https://gitter.im/LiberTEM/Lobby\">chat on gitter!</a>\n                    </List.Content>\n                </List.Item>\n                <List.Item>\n                    <List.Icon name=\"linkify\" />\n                    <List.Content>\n                    <a href=\"https://doi.org/10.5281/zenodo.1478763\"><img src=\"https://zenodo.org/badge/DOI/10.5281/zenodo.1478763.svg\" alt=\"DOI\"/></a>\n                    </List.Content>\n                </List.Item>\n            </List>\n        </>\n    );\n}\n\nexport default connect(mapStateToProps)(About);","import { ActionCreatorsMapObject } from \"redux\";\n\nexport interface Action<T extends string> {\n    type: T\n}\n\nexport interface ActionWithPayload<T extends string, P> extends Action<T> {\n    payload: P\n}\n\nexport interface ActionWithMeta<T extends string, P, M> extends ActionWithPayload<T, P> {\n    meta: M\n}\n\nexport function createAction<T extends string>(type: T): Action<T>\nexport function createAction<T extends string, P, M>(type: T, payload?: P): ActionWithPayload<T, P>\nexport function createAction<T extends string, P, M>(type: T, payload?: P, meta?: M): ActionWithMeta<T, P, M>\nexport function createAction<T extends string, P, M>(type: T, payload?: P, meta?: M) {\n    if (meta === undefined && payload === undefined) {\n        return { type };\n    } else if (meta === undefined) {\n        return { type, payload };\n    } else {\n        return { type, payload, meta }\n    }\n}\n\nexport type ActionsUnion<A extends ActionCreatorsMapObject> = ReturnType<A[keyof A]>","import * as _ from \"lodash\";\n\nexport function assertNotReached(message: string): never {\n    throw new Error(message);\n}\n\nexport function defaultDebounce<T extends (...args: any[]) => any>(fn: T, delay: number = 50) {\n    return _.debounce(fn, delay, { maxWait: delay });\n}\n\nexport function getEnumValues<E>(e: E): Array<keyof E> {\n    return Object.keys(e) as Array<keyof E>;\n}","\n/* \n * Common\n */\n\nexport interface FollowupPart {\n    numMessages: number,\n    descriptions: Array<{ title: string, desc: string }>,\n}\n\nexport interface MsgPartConfig {\n    version: string,\n    revision: string,\n    localCores: number,\n    cwd: string,\n    separator: string,\n}\n\nexport interface GetConfigResponse {\n    status: \"ok\",\n    config: MsgPartConfig,\n}\n\n/*\n * Connection\n */\n\nexport enum ClusterTypes {\n    LOCAL = \"LOCAL\",\n    TCP = \"TCP\",\n}\n\nexport const ClusterTypeMetadata: { [s: string]: { [s: string]: string } } = {\n    [ClusterTypes.LOCAL]: {\n        label: \"Create local cluster\",\n    },\n    [ClusterTypes.TCP]: {\n        label: \"Connect to cluster\",\n        helpText: \"can be either local or remote, connection via TCP\",\n    }\n}\n\nexport interface ConnectRequestLocalCluster {\n    type: ClusterTypes.LOCAL,\n    numWorkers?: number,\n}\n\nexport interface ConnectRequestTCP {\n    type: ClusterTypes.TCP,\n    address: string,\n}\n\nexport type ConnectRequestParams = ConnectRequestLocalCluster | ConnectRequestTCP\n\nexport interface ConnectRequest {\n    connection: ConnectRequestParams\n}\n\nexport type ConnectResponse = {\n    status: \"ok\",\n    connection: ConnectRequest,\n} | {\n    status: \"disconnected\",\n    connection: {},\n}\n\n/*\n * Dataset\n */\n\nexport enum DatasetTypes {\n    HDF5 = \"HDF5\",\n    HDFS = \"HDFS\",\n    RAW = \"RAW\",\n    MIB = \"MIB\",\n    BLO = \"BLO\",\n    K2IS = \"K2IS\",\n    SER = \"SER\",\n    FRMS6 = \"FRMS6\",\n    EMPAD = \"EMPAD\",\n}\n\nexport interface DatasetParamsCommon {\n    name: string,\n}\n\nexport type DatasetParamsHDFS = {\n    type: DatasetTypes.HDFS,\n    path: string,\n    tileshape: number[],\n} & DatasetParamsCommon;\n\nexport type DatasetParamsHDF5 = {\n    type: DatasetTypes.HDF5,\n    path: string,\n    ds_path: string,\n    tileshape: number[],\n} & DatasetParamsCommon\n\nexport type DatasetParamsRaw = {\n    type: DatasetTypes.RAW,\n    path: string,\n    dtype: string,\n    detector_size: number[],\n    enable_direct: boolean,\n    scan_size: number[],\n    tileshape: number[],\n} & DatasetParamsCommon\n\nexport type DatasetParamsMIB = {\n    type: DatasetTypes.MIB,\n    path: string,\n    scan_size: number[],\n    tileshape: number[],\n} & DatasetParamsCommon\n\nexport type DatasetParamsBLO = {\n    type: DatasetTypes.BLO,\n    path: string,\n    tileshape: number[],\n} & DatasetParamsCommon\n\nexport type DatasetParamsK2IS = {\n    type: DatasetTypes.K2IS,\n    path: string,\n} & DatasetParamsCommon\n\nexport type DatasetParamsSER = {\n    type: DatasetTypes.SER,\n    path: string,\n} & DatasetParamsCommon\n\nexport type DatasetParamsFRMS6 = {\n    type: DatasetTypes.FRMS6,\n    path: string,\n} & DatasetParamsCommon\n\nexport type DatasetParamsEMPAD = {\n    type: DatasetTypes.EMPAD,\n    path: string,\n    scan_size: number[],\n} & DatasetParamsCommon\n\nexport type DatasetFormParams = DatasetParamsHDF5 | DatasetParamsHDFS | DatasetParamsRaw | DatasetParamsMIB | DatasetParamsBLO | DatasetParamsK2IS | DatasetParamsSER | DatasetParamsFRMS6 | DatasetParamsEMPAD\n\nexport interface DatasetCreateParams {\n    id: string,\n    params: DatasetFormParams,\n}\n\nexport enum DatasetStatus {\n    OPEN = \"OPEN\",\n    OPENING = \"OPENING\",\n    DELETING = \"DELETING\",\n}\n\nexport interface DiagElemMsg {\n    name: string,\n    value: string | DiagElemMsg[],\n}\n\ninterface DatasetCommon {\n    id: string,\n    params: DatasetFormParams,\n}\n\nexport type DatasetOpening = DatasetCommon & {\n    status: DatasetStatus.OPENING,\n}\n\nexport type DatasetDeleting = DatasetCommon & {\n    status: DatasetStatus.DELETING,\n}\n\nexport type DatasetOpen = DatasetCommon & {\n    status: DatasetStatus.OPEN,\n    params: {\n        shape: number[],\n    }\n    diagnostics: DiagElemMsg[],\n}\n\nexport type Dataset = DatasetOpening | DatasetOpen | DatasetDeleting;\n\nexport interface OpenDatasetRequest {\n    dataset: DatasetCreateParams\n}\n\nexport interface OpenDatasetResponseOk {\n    status: \"ok\",\n    dataset: string,  // TODO: uuid type?\n    details: Dataset,\n}\n\nexport interface OpenDatasetResponseError {\n    status: \"error\",\n    dataset: string,\n    msg: string,\n}\n\nexport type OpenDatasetResponse = OpenDatasetResponseOk | OpenDatasetResponseError\n\nexport interface DeleteDatasetResponse {\n    status: \"ok\",\n    dataset: string,\n}\n\nexport interface DetectDatasetSuccessResponse {\n    status: \"ok\",\n    datasetParams: DatasetFormParams,\n}\n\nexport interface DetectDatasetErrorResponse {\n    status: \"error\",\n    path: string,\n    msg: string,\n}\n\nexport type DetectDatasetResponse = DetectDatasetSuccessResponse | DetectDatasetErrorResponse;\n\nexport type MsgPartInitialDataset = DatasetOpen\n\n// type alias to add client-side state to datasets\nexport type DatasetState = Dataset & {}\n\n/*\n * Job\n */\nexport interface MsgPartJob {\n    id: string,\n    dataset: string,\n}\n\nexport interface MaskDefRing {\n    shape: \"ring\",\n    cx: number,\n    cy: number,\n    ri: number,\n    ro: number\n}\n\n\nexport interface MaskDefDisk {\n    shape: \"disk\",\n    cx: number,\n    cy: number,\n    r: number,\n}\n\nexport interface PointDef {\n    shape: \"point\",\n    cx: number,\n    cy: number,\n}\n\n// TODO: shape doesn't really make sense here, needs to be restructured\nexport interface CenterOfMassParams {\n    shape: \"com\",\n    cx: number,\n    cy: number,\n    r: number,\n}\n\nexport interface PickFrameParams {\n    x: number,\n    y: number,\n}\n\nexport interface FFTSumFramesParams {\n    real_rad: number | null ,\n    real_centerx: number | null,\n    real_centery: number | null,\n}\n\nexport interface PickFFTFrameParams {\n    x: number,\n    y: number,\n    real_rad: number | null ,\n    real_centerx: number | null,\n    real_centery: number | null,\n}\nexport interface RadialFourierParams {\n    shape: \"radial_fourier\",\n    cx: number,\n    cy: number,\n    ri: number,\n    ro: number,\n    n_bins: number,\n    max_order: number\n}\n\nexport interface FFTParams{\n    rad_in:number,\n    rad_out:number,\n    real_rad: number | null ,\n    real_centerx: number | null,\n    real_centery: number | null,\n}\n\n\nexport interface FrameParams {\n    roi: {\n        shape: \"rect\",\n        x: number,\n        y: number,\n        width: number,\n        height: number,\n    }|{\n        shape: \"disk\",\n        cx: number,\n        cy: number,\n        r: number,\n    }|\n    {}\n}\n\nexport interface ClustParams {\n    roi: {\n        shape: \"rect\",\n        x: number,\n        y: number,\n        width: number,\n        height: number,\n    }|{}\n    cx: number,\n    cy: number,\n    ri: number,\n    ro: number,\n    delta: number,\n    n_peaks: number,\n    n_clust: number,\n    min_dist: number,\n}\n\nexport enum AnalysisTypes {\n    APPLY_RING_MASK = \"APPLY_RING_MASK\",\n    APPLY_DISK_MASK = \"APPLY_DISK_MASK\",\n    APPLY_POINT_SELECTOR = \"APPLY_POINT_SELECTOR\",\n    CENTER_OF_MASS = \"CENTER_OF_MASS\",\n    SUM_FRAMES = \"SUM_FRAMES\",\n    SD_FRAMES = \"SD_FRAMES\",\n    PICK_FRAME = \"PICK_FRAME\",\n    PICK_FFT_FRAME = \"PICK_FFT_FRAME\",\n    APPLY_FFT_MASK = \"APPLY_FFT_MASK\",\n    FFTSUM_FRAMES = \"FFTSUM_FRAMES\",\n    RADIAL_FOURIER = \"RADIAL_FOURIER\",\n    FEM = \"FEM\",\n    CLUST = \"CLUST\",\n    SUM_SIG = \"SUM_SIG\",\n}\n\nexport interface RingMaskDetails {\n    type: AnalysisTypes.APPLY_RING_MASK,\n    parameters: MaskDefRing,\n    \n}\n\nexport interface FFTDetails {\n    type: AnalysisTypes.APPLY_FFT_MASK,\n    parameters: FFTParams,\n}\n\nexport interface FEMDetails {\n    type: AnalysisTypes.FEM,\n    parameters: MaskDefRing,\n}\n\nexport interface DiskMaskDetails {\n    type: AnalysisTypes.APPLY_DISK_MASK,\n    parameters: MaskDefDisk,\n}\n\nexport interface PointDefDetails {\n    type: AnalysisTypes.APPLY_POINT_SELECTOR,\n    parameters: PointDef,\n}\n\nexport interface CenterOfMassDetails {\n    type: AnalysisTypes.CENTER_OF_MASS,\n    parameters: CenterOfMassParams,\n}\n\nexport interface SumFramesDetails {\n    type: AnalysisTypes.SUM_FRAMES,\n    parameters: FrameParams\n}\n\nexport interface SDFramesDetails {\n    type: AnalysisTypes.SD_FRAMES,\n    parameters: FrameParams\n}\n\nexport interface SumSigDetails {\n    type: AnalysisTypes.SUM_SIG,\n    parameters: {}\n}\n\nexport interface FFTSumFramesDetails {\n    type: AnalysisTypes.FFTSUM_FRAMES,\n    parameters: FFTSumFramesParams,\n}\n\nexport interface PickFrameDetails {\n    type: AnalysisTypes.PICK_FRAME,\n    parameters: PickFrameParams,\n}\n\nexport interface PickFFTFrameDetails {\n    type: AnalysisTypes.PICK_FFT_FRAME,\n    parameters: PickFFTFrameParams,\n}\n\nexport interface RadialFourierDetails {\n    type: AnalysisTypes.RADIAL_FOURIER,\n    parameters: RadialFourierParams,\n}\n\nexport interface RadialFourierDetails {\n    type: AnalysisTypes.RADIAL_FOURIER,\n    parameters: RadialFourierParams,\n}\n\nexport interface ClustDetails {\n    type: AnalysisTypes.CLUST,\n    parameters: ClustParams,\n}\n\nexport type AnalysisParameters = MaskDefRing | MaskDefDisk | CenterOfMassParams | PointDef | PickFrameParams | RadialFourierParams| FFTParams | PickFFTFrameParams | FFTSumFramesParams | ClustParams;\nexport type AnalysisDetails = RingMaskDetails | DiskMaskDetails | CenterOfMassDetails | PointDefDetails | SumFramesDetails | SDFramesDetails | PickFrameDetails | RadialFourierDetails | FEMDetails | FFTDetails | FFTSumFramesDetails | PickFFTFrameDetails | SumSigDetails | ClustDetails;\n\nexport interface StartJobRequest {\n    job: {\n        dataset: string,\n        analysis: AnalysisDetails,\n    }\n}\n\nexport interface StartJobResponse {\n    status: \"ok\",\n    job: string,\n    details: MsgPartJob,\n}\n\nexport interface CancelJobResponse {\n    status: \"ok\",\n    job: string,\n}\n\n/*\n * fs browser \n */\n\n// some named place, i.e. \"Documents\", \"Home\", ...\nexport interface FSPlace {\n    title: string,\n    path: string,\n    key: string,\n}\n\nexport interface DirectoryListingDetails {\n    name: string,\n    size: number,\n    ctime: number,\n    mtime: number,\n    owner: string,\n}\n\nexport interface DirectoryListingResponseOK {\n    status: \"ok\",\n    path: string,\n    files: DirectoryListingDetails[],\n    dirs: DirectoryListingDetails[],\n    drives: string[],\n    places: FSPlace[],\n}\n\nexport interface DirectoryListingResponseError {\n    status: \"error\",\n    path: string,\n    code: string,\n    msg: string,\n    alternative?: string,\n}\n\nexport type DirectoryListingResponse = DirectoryListingResponseOK | DirectoryListingResponseError;\n","import { ActionsUnion, createAction } from \"../helpers/actionHelpers\";\nimport { DatasetFormParams, DirectoryListingDetails, FSPlace } from \"../messages\";\n\nexport enum ActionTypes {\n    LIST_DIRECTORY = 'BROWSER_LIST_DIRECTORY',\n    LIST_FULL_PATH = 'BROWSER_LIST_DIRECTORY_FULL',\n    DIRECTORY_LISTING = 'BROWSER_DIRECTORY_LISTING',\n    DETECT_PARAMS = 'BROWSER_DETECT_PARAMS',\n    PARAMS_DETECTED = 'BROWSER_PARAMS_DETECTED',\n    ERROR = 'BROWSER_ERROR',\n    OPEN = 'BROWSER_OPEN',\n    CANCEL = 'BROWSER_CANCEL',\n    SELECT = 'BROWSER_SELECT',\n    SELECT_FULL_PATH = 'BROWSER_SELECT_FULL_PATH',\n}\n\nexport const Actions = {\n    list: (path: string, name?: string) => createAction(ActionTypes.LIST_DIRECTORY, { path, name }),\n    dirListing: (path: string, dirs: DirectoryListingDetails[], files: DirectoryListingDetails[], drives: string[], places: FSPlace[]) => createAction(ActionTypes.DIRECTORY_LISTING, { path, dirs, files, drives, places }),\n    open: () => createAction(ActionTypes.OPEN),\n    cancel: () => createAction(ActionTypes.CANCEL),\n    select: (path: string, name: string) => createAction(ActionTypes.SELECT, { path, name }),\n    selectFullPath: (path: string) => createAction(ActionTypes.SELECT_FULL_PATH, { path }),\n    error: (msg: string, timestamp: number, id: string) => createAction(ActionTypes.ERROR, { msg, timestamp, id }),\n    detectParams: (path: string) => createAction(ActionTypes.DETECT_PARAMS, { path }),\n    paramsDetected: (path: string, params: DatasetFormParams) => createAction(ActionTypes.PARAMS_DETECTED, { path, params }),\n}\n\nexport type Actions = ActionsUnion<typeof Actions>;","import { FormikProps, withFormik } from \"formik\";\nimport * as React from \"react\";\nimport { Button, Form } from \"semantic-ui-react\";\nimport { ConfigState } from \"../../config/reducers\";\nimport { Omit } from \"../../helpers/types\";\nimport { ClusterTypes, ConnectRequestLocalCluster } from \"../../messages\";\n\ntype FormValues = Omit<ConnectRequestLocalCluster, \"type\">;\n\ninterface FormProps {\n    onSubmit: (params: ConnectRequestLocalCluster) => void,\n    config: ConfigState,\n}\n\ntype MergedProps = FormikProps<FormValues> & FormProps;\n\nconst LocalConnectionForm: React.SFC<MergedProps> = ({\n    values,\n    touched,\n    errors,\n    dirty,\n    isSubmitting,\n    handleChange,\n    handleBlur,\n    handleSubmit,\n    handleReset,\n}) => {\n    return (\n        <Form onSubmit={handleSubmit}>\n            <Form.Field>\n                <label htmlFor=\"numWorkers\">Number of Workers:</label>\n                <input type=\"number\" name=\"numWorkers\" value={values.numWorkers}\n                    onChange={handleChange}\n                    onBlur={handleBlur} />\n                {errors.numWorkers && touched.numWorkers && errors.numWorkers}\n            </Form.Field>\n            <Button primary={true} type=\"submit\" disabled={isSubmitting}>Connect</Button>\n        </Form>\n    )\n}\n\nexport default withFormik<FormProps, FormValues>({\n    mapPropsToValues: (ownProps: FormProps) => ({\n        numWorkers: ownProps.config.localCores,\n    }),\n    handleSubmit: (values, formikBag) => {\n        const { onSubmit } = formikBag.props;\n        onSubmit({\n            type: ClusterTypes.LOCAL,\n            ...values,\n        });\n    }\n})(LocalConnectionForm);\n","\nimport { FormikProps, withFormik } from \"formik\";\nimport * as React from \"react\";\nimport { Button, Form } from \"semantic-ui-react\";\nimport { Omit } from \"../../helpers/types\";\nimport { ClusterTypes, ConnectRequestTCP } from \"../../messages\";\n\ntype FormValues = Omit<ConnectRequestTCP, \"type\">;\n\ninterface FormProps {\n    onSubmit: (params: ConnectRequestTCP) => void,\n}\n\ntype MergedProps = FormikProps<FormValues> & FormProps;\n\nconst TCPConnectionForm: React.SFC<MergedProps> = ({\n    values,\n    touched,\n    errors,\n    dirty,\n    isSubmitting,\n    handleChange,\n    handleBlur,\n    handleSubmit,\n    handleReset,\n}) => {\n    return (\n        <Form onSubmit={handleSubmit}>\n            <Form.Field>\n                <label htmlFor=\"address\">Scheduler URI</label>\n                <input type=\"text\" name=\"address\" value={values.address}\n                    onChange={handleChange}\n                    onBlur={handleBlur} />\n                {errors.address && touched.address && errors.address}\n            </Form.Field>\n            <Button primary={true} type=\"submit\" disabled={isSubmitting}>Connect</Button>\n        </Form>\n    )\n}\n\nexport default withFormik<FormProps, FormValues>({\n    mapPropsToValues: () => ({\n        address: \"tcp://localhost:8786\",\n    }),\n    handleSubmit: (values, formikBag) => {\n        const { onSubmit } = formikBag.props;\n        onSubmit({\n            type: ClusterTypes.TCP,\n            ...values\n        });\n    }\n})(TCPConnectionForm);\n","\nimport * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Dropdown, DropdownProps, Segment } from \"semantic-ui-react\";\nimport * as clusterActions from \"../../cluster/actions\";\nimport { getEnumValues } from \"../../helpers\";\nimport { ClusterTypeMetadata, ClusterTypes, ConnectRequestParams } from \"../../messages\";\nimport { RootReducer } from \"../../store\";\nimport LocalConnectionForm from \"./LocalConnectionForm\";\nimport TCPConnectionForm from \"./TCPConnectionForm\";\n\n\nconst mapDispatchToProps = {\n    connectToCluster: clusterActions.Actions.connect,\n};\n\nconst mapStateToProps = (state: RootReducer) => {\n    return {\n        config: state.config,\n    }\n}\n\ntype MergedProps = DispatchProps<typeof mapDispatchToProps> & ReturnType<typeof mapStateToProps>;\n\nconst clusterTypeKeys = getEnumValues(ClusterTypes);\nconst clusterTypeOptions = clusterTypeKeys.map(t => ({\n    text: ClusterTypeMetadata[ClusterTypes[t]].label,\n    value: ClusterTypes[t],\n}));\n\ninterface ConnectionParamsState {\n    clusterType: ClusterTypes\n}\n\nclass ClusterConnectionForm extends React.Component<MergedProps, ConnectionParamsState> {\n    public state = {\n        clusterType: ClusterTypes.LOCAL,\n    }\n\n    public setType = (type: ClusterTypes) => {\n        this.setState({\n            clusterType: type,\n        });\n    }\n\n    public handleChange = (e: React.SyntheticEvent, data: DropdownProps) => {\n        const value = data.value as ClusterTypes;\n        this.setType(value);\n    }\n\n    public handleSubmit = (params: ConnectRequestParams) => {\n        this.props.connectToCluster(params);\n    }\n\n    public renderForm() {\n        const { clusterType } = this.state;\n        const { config } = this.props;\n\n        switch (clusterType) {\n            case ClusterTypes.LOCAL: {\n                return <LocalConnectionForm config={config} onSubmit={this.handleSubmit} />\n            }\n            case ClusterTypes.TCP: {\n                return <TCPConnectionForm onSubmit={this.handleSubmit} />\n            }\n        }\n    }\n\n    public render() {\n        return (\n            <>\n                <div>\n                    <Dropdown\n                        inline={true}\n                        options={clusterTypeOptions}\n                        value={this.state.clusterType}\n                        onChange={this.handleChange}\n                    />\n                </div>\n                <Segment>\n                    {this.renderForm()}\n                </Segment>\n            </>\n        )\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ClusterConnectionForm);","import * as React from 'react';\nimport { Icon, Message } from 'semantic-ui-react';\n\ninterface ChannelConnectingProps {\n    msg: string,\n}\n\nconst ChannelConnecting: React.SFC<ChannelConnectingProps> = ({ msg }) => (\n    <Message icon={true}>\n        <Icon name='cog' loading={true} />\n        <Message.Content>\n            <Message.Header>Connecting to LiberTEM</Message.Header>\n            {msg}\n        </Message.Content>\n    </Message>\n)\n\nexport default ChannelConnecting;","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport ClusterConnectionForm from \"../../cluster/components/ClusterConnectionForm\";\nimport { RootReducer } from \"../../store\";\nimport ChannelConnecting from \"./ChannelConnecting\";\n\nconst mapStateToProps = (state: RootReducer) => {\n    return {\n        channelStatus: state.channelStatus,\n        clusterConnection: state.clusterConnection,\n        haveConfig: state.config.haveConfig,\n    }\n}\n\n\ntype MergedProps = ReturnType<typeof mapStateToProps>;\n\nconst messages = {\n    waiting: \"Waiting...\",\n    connecting: \"Connecting...\",\n}\n\nconst clusterMessages = {\n    connected: \"Connected, waiting for initial state...\",\n    unknown: \"Connected, fetching cluster status...\",\n}\n\nconst ChannelStatus: React.SFC<MergedProps> = ({ haveConfig, children, channelStatus, clusterConnection }) => {\n    switch (channelStatus.status) {\n        case \"waiting\":\n        case \"connecting\": {\n            return <ChannelConnecting msg={messages[channelStatus.status]} />;\n        }\n        case \"connected\": {\n            if (!haveConfig) {\n                return <ChannelConnecting msg=\"waiting for configuration...\" />;\n            }\n            if (clusterConnection.status === \"disconnected\") {\n                return <ClusterConnectionForm />\n            } else if (clusterConnection.status === \"connected\") {\n                return <ChannelConnecting msg={clusterMessages.connected} />;\n            } else if (clusterConnection.status === \"unknown\") {\n                return <ChannelConnecting msg={clusterMessages.unknown} />;\n            }\n        }\n    }\n    return <>{children}</>;\n}\n\nexport default connect(mapStateToProps)(ChannelStatus);","import * as React from \"react\";\nimport { Icon, SemanticICONS } from \"semantic-ui-react\";\nimport { DirectoryListingDetails } from \"../../messages\";\n\n\ninterface FileBrowserEntryProps {\n    style: object,\n    details: DirectoryListingDetails,\n    onClick?: () => void,\n    icon?: SemanticICONS,\n}\n\ninterface TimeStampProps {\n    ts: number,\n}\n\nexport const TimeStamp: React.SFC<TimeStampProps> = ({ ts }) => {\n    const date = new Date(ts * 1000);\n    const fmtDate = date.toLocaleDateString();\n    const fmtTime = date.toLocaleTimeString();\n    const title = `${fmtDate} ${fmtTime}`;\n    return (\n        <div style={{ display: \"flex\", whiteSpace: \"nowrap\" }} title={title}>\n            <div style={{ width: \"50%\", marginRight: \"10px\" }}>{fmtDate}</div>\n            <div style={{ width: \"45%\" }}>{fmtTime}</div>\n        </div>\n    )\n}\n\n// adapted from https://stackoverflow.com/a/14919494/540644\nfunction humanFileSize(bytes: number, si: boolean = false) {\n    const thresh = si ? 1000 : 1024;\n    if (Math.abs(bytes) < thresh) {\n        return {\n            size: bytes,\n            unit: 'B',\n        }\n    }\n    const units = si\n        ? ['kB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB']\n        : ['KiB', 'MiB', 'GiB', 'TiB', 'PiB', 'EiB', 'ZiB', 'YiB'];\n    let u = -1;\n    do {\n        bytes /= thresh;\n        ++u;\n    } while (Math.abs(bytes) >= thresh && u < units.length - 1);\n\n    return {\n        size: bytes.toFixed(1),\n        unit: units[u],\n    }\n}\n\ninterface FileSizeProps {\n    size: number,\n    si?: boolean,\n}\n\nexport const FileSize: React.SFC<FileSizeProps> = ({ size, si }) => {\n    const fmtSize = humanFileSize(size, si)\n    return (\n        <div style={{ textAlign: \"right\" }}>\n            {fmtSize.size} {fmtSize.unit}\n        </div>\n    );\n}\n\nexport const Cell: React.SFC<{ title?: string }> = ({ children, title }) => {\n    const styles: React.CSSProperties = {\n        whiteSpace: \"nowrap\",\n        overflow: \"hidden\",\n        textOverflow: \"ellipsis\",\n        marginRight: \"10px\",\n    }\n    return (\n        <div style={styles} title={title}>{children}</div>\n    );\n}\n\n\nclass FileBrowserEntry extends React.Component<FileBrowserEntryProps> {\n    public onClick = (e: React.MouseEvent) => {\n        const { onClick } = this.props;\n        if (onClick) {\n            onClick();\n        }\n    }\n\n    public render() {\n        const { details, style, icon } = this.props;\n        const myStyle: React.CSSProperties = {\n            cursor: \"pointer\",\n            ...style,\n        };\n\n        const tsStyles: React.CSSProperties = {\n            textAlign: \"right\",\n        };\n\n        return (\n            <div onClick={this.onClick} style={myStyle}>\n                <div style={{ display: \"flex\", paddingRight: \"10px\" }}>\n                    <div style={{ width: \"20%\", flexGrow: 1 }}>\n                        <Cell title={details.name}>\n                            {icon && <Icon name={icon} />}\n                            {details.name}\n                        </Cell>\n                    </div>\n                    <div style={{ width: \"10%\" }}><Cell><FileSize size={details.size} si={false} /></Cell></div>\n                    <div style={{ width: \"10%\" }}><Cell>{details.owner}</Cell></div>\n                    <div style={{ width: \"18%\", ...tsStyles }}>\n                        <Cell><TimeStamp ts={details.ctime} /></Cell>\n                    </div>\n                    <div style={{ width: \"18%\", ...tsStyles }}>\n                        <Cell><TimeStamp ts={details.mtime} /></Cell>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default FileBrowserEntry;","import * as React from \"react\";\nimport { Cell } from \"./FileBrowserEntry\";\n\nconst FileBrowserHeader: React.SFC = () => {\n    const alignRight: React.CSSProperties = {\n        textAlign: \"right\",\n    };\n\n    // ugly hack: padding-right to compensate for scrollbar size\n    return (\n        <div style={{ paddingRight: \"20px\", paddingBottom: \"10px\" }}>\n            <div style={{ display: \"flex\" }}>\n                <div style={{ width: \"20%\", flexGrow: 1 }}>\n                    <Cell>Name</Cell>\n                </div>\n                <div style={{ width: \"10%\", ...alignRight }}>\n                    <Cell>Size</Cell>\n                </div>\n                <div style={{ width: \"10%\" }}>\n                    <Cell>Owner</Cell>\n                </div>\n                <div style={{ width: \"18%\", ...alignRight }}>\n                    <Cell>Created</Cell>\n                </div>\n                <div style={{ width: \"18%\", ...alignRight }}>\n                    <Cell>Modified</Cell>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default FileBrowserHeader;","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { DirectoryListingDetails } from \"../../messages\";\nimport * as browserActions from '../actions';\nimport FileBrowserEntry from \"./FileBrowserEntry\";\n\ninterface FileEntryProps {\n    path: string,\n    style: object,\n    details: DirectoryListingDetails,\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch, ownProps: FileEntryProps) => {\n    return {\n        select: () => dispatch(browserActions.Actions.select(ownProps.path, ownProps.details.name)),\n    };\n}\n\ntype MergedProps = FileEntryProps & ReturnType<typeof mapDispatchToProps>;\n\nclass FileEntry extends React.Component<MergedProps> {\n    public render() {\n        const { details, style, select } = this.props;\n\n        return (\n            <FileBrowserEntry onClick={select} style={style} details={details}\n                icon=\"file outline\" />\n        )\n    }\n}\n\nexport default connect(null, mapDispatchToProps)(FileEntry);","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { DirectoryListingDetails } from \"../../messages\";\nimport * as browserActions from '../actions';\nimport FileBrowserEntry from \"./FileBrowserEntry\";\n\nconst mapDispatchToProps = (dispatch: Dispatch, ownProps: FolderEntryProps) => {\n    return {\n        list: () => {\n            dispatch(browserActions.Actions.list(ownProps.path, ownProps.details.name));\n            window.setTimeout(() => ownProps.onChange(), 0);\n        },\n    };\n}\n\ninterface FolderEntryProps {\n    path: string,\n    style: object,\n    details: DirectoryListingDetails,\n    onChange: () => void,\n}\n\ntype MergedProps = FolderEntryProps & ReturnType<typeof mapDispatchToProps>;\n\nconst FolderEntry: React.SFC<MergedProps> = ({ list, details, style, onChange }) => {\n    return (\n        <FileBrowserEntry onClick={list} style={style} details={details} icon=\"folder\" />\n    )\n}\n\nexport default connect(null, mapDispatchToProps)(FolderEntry);\n","import * as React from 'react';\nimport { connect } from \"react-redux\";\nimport { Dispatch } from 'redux';\nimport { Dropdown, DropdownItemProps } from \"semantic-ui-react\";\nimport * as browserActions from '../actions';\n\nconst mapDispatchToProps = (dispatch: Dispatch, ownProps: DropdownItemProps) => {\n    return {\n        list: () => {\n            if (ownProps.value !== undefined) {\n                dispatch(browserActions.Actions.list(ownProps.value.toString()));\n                window.setTimeout(() => ownProps.onChange(), 0);\n            }\n        },\n    };\n}\n\ntype MergedProps = ReturnType<typeof mapDispatchToProps> & DropdownItemProps & {\n    onChange: () => void,\n};\n\nconst PathDropDownItem: React.SFC<MergedProps> = ({ list, ...props }) => {\n    const newProps = {\n        onClick: list,\n        ...props,\n    }\n    return <Dropdown.Item {...newProps} />;\n}\n\nexport default connect(null, mapDispatchToProps)(PathDropDownItem);","import { FormikProps, withFormik } from \"formik\";\nimport * as React from \"react\";\nimport { Form, Input } from \"semantic-ui-react\";\n\ninterface FormValues {\n    path: string,\n}\n\ninterface PathInputProps {\n    onChange: (path: string) => void,\n    initialPath: string,\n}\n\ntype MergedProps = FormikProps<FormValues> & PathInputProps;\n\nconst PathInput: React.SFC<MergedProps> = ({\n    values,\n    touched,\n    errors,\n    dirty,\n    isSubmitting,\n    handleChange,\n    handleBlur,\n    handleSubmit,\n    handleReset,\n}) => {\n    return (\n        <Form onSubmit={handleSubmit} style={{ flexGrow: 1 }}>\n            <Form.Field>\n                <Input autoComplete=\"off\" onBlur={handleBlur} onChange={handleChange} value={values.path} name=\"path\" />\n            </Form.Field>\n        </Form>\n    )\n}\n\nexport default withFormik<PathInputProps, FormValues>({\n    mapPropsToValues: ({ initialPath }) => ({\n        path: initialPath,\n    }),\n    handleSubmit: (values, formikBag) => {\n        const { onChange } = formikBag.props;\n        onChange(values.path);\n    },\n    enableReinitialize: true,\n})(PathInput);","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { Dropdown, DropdownItemProps } from \"semantic-ui-react\";\nimport { DatasetTypes } from \"../../messages\";\nimport { RootReducer } from \"../../store\";\nimport * as browserActions from '../actions';\n\n\ntype DropdownOptions = Array<{\n    text: string,\n    value: {\n        type: DatasetTypes,\n        path: string,\n    },\n}>;\n\nconst mapStateToProps = (state: RootReducer) => {\n    return {\n        lastOpened: state.config.lastOpened,\n        fileHistory: state.config.fileHistory,\n        separator: state.config.separator,\n    };\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch) => {\n    return {\n        select: (path: string) => dispatch(browserActions.Actions.selectFullPath(path)),\n    };\n}\n\ntype MergedProps = ReturnType<typeof mapStateToProps> & ReturnType<typeof mapDispatchToProps>;\n\nconst RecentFiles: React.SFC<MergedProps> = ({ lastOpened, fileHistory, select }) => {\n\n    const recentFiles: DropdownOptions = fileHistory.filter((path: string) => lastOpened[path]).map((path: string) => {\n        const item = lastOpened[path];\n        return {\n            text: item.path,\n            value: {\n                type: item.type,\n                path: item.path,\n            },\n        };\n    });\n\n    const onClick = (e: React.MouseEvent<HTMLDivElement>, data: DropdownItemProps) => data.value && select(data.value.toString())\n\n    return (\n        <Dropdown item={true} text=\"Recent\" floating={true}>\n            <Dropdown.Menu>\n                <Dropdown.Header content=\"recent datasets\" />\n                {recentFiles.map((option, idx) => (\n                    <Dropdown.Item key={idx} value={option.value.path} content={option.text} onClick={onClick} />\n                ))}\n            </Dropdown.Menu>\n        </Dropdown>\n    );\n}\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(RecentFiles);","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { Dropdown, Menu } from \"semantic-ui-react\";\nimport * as browserActions from '../actions';\nimport { FSPlaces } from \"../types\";\nimport PathDropDownItem from \"./PathDropDownItem\";\nimport PathInput from \"./PathInput\";\nimport RecentFiles from \"./RecentFiles\";\n\nconst mapDispatchToProps = (dispatch: Dispatch, ownProps: PathBarProps) => {\n    return {\n        refresh: () => {\n            dispatch(browserActions.Actions.list(ownProps.currentPath));\n            window.setTimeout(() => ownProps.onChange(), 0);\n        },\n        handleInputChange: (path: string) => {\n            dispatch(browserActions.Actions.list(path));\n            window.setTimeout(() => ownProps.onChange(), 0);\n        },\n        goUp: () => {\n            dispatch(browserActions.Actions.list(ownProps.currentPath, '..'));\n            window.setTimeout(() => ownProps.onChange(), 0);\n        },\n    };\n}\n\ninterface PathBarProps {\n    currentPath: string,\n    onChange: () => void,\n    drives: string[],\n    places: FSPlaces,\n}\n\ntype MergedProps = ReturnType<typeof mapDispatchToProps> & PathBarProps;\n\nconst PathBar: React.SFC<MergedProps> = ({ currentPath, drives, places, onChange, refresh, goUp, handleInputChange }) => {\n    const driveOptions = drives.map((path) => ({ key: path, text: path }));\n    const placeOptions = Object.keys(places).map((key) => ({ key: places[key].path, text: places[key].title }))\n    return (\n        <Menu>\n            <RecentFiles />\n            <Dropdown text=\"Go to...\" floating={true} item={true}>\n                <Dropdown.Menu>\n                    <Dropdown.Header content=\"Drives\" />\n                    {driveOptions.map((option) => {\n                        return <PathDropDownItem key={option.key} value={option.key} content={option.text} onChange={onChange} />\n                    })}\n                    <Dropdown.Header content=\"Places\" />\n                    {placeOptions.map((option) => {\n                        return <PathDropDownItem key={option.key} value={option.key} content={option.text} onChange={onChange} />\n                    })}\n                </Dropdown.Menu>\n            </Dropdown>\n            <Menu.Item icon=\"arrow up\" onClick={goUp} />\n            <Menu.Item style={{ flexGrow: 1 }}>\n                <PathInput onChange={handleInputChange} initialPath={currentPath} />\n            </Menu.Item>\n            <Menu.Item icon=\"refresh\" onClick={refresh} />\n        </Menu>\n    );\n}\n\n\nexport default connect(null, mapDispatchToProps)(PathBar);","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { FixedSizeList as List } from \"react-window\";\nimport { Dispatch } from \"redux\";\nimport { Button, Header, Segment } from \"semantic-ui-react\";\nimport { DirectoryListingDetails } from \"../../messages\";\nimport { RootReducer } from \"../../store\";\nimport * as browserActions from '../actions';\nimport FileBrowserHeader from \"./FileBrowserHeader\";\nimport FileEntry from \"./FileEntry\";\nimport FolderEntry from \"./FolderEntry\";\nimport PathBar from \"./PathBar\";\n\nconst mapStateToProps = (state: RootReducer) => {\n    const { browser } = state;\n    return {\n        files: browser.files,\n        dirs: browser.dirs,\n        path: browser.path,\n        drives: browser.drives,\n        places: browser.places,\n        isLoading: browser.isLoading,\n    };\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch) => {\n    return {\n        cancel: () => dispatch(browserActions.Actions.cancel()),\n    };\n}\n\ntype MergedProps = ReturnType<typeof mapStateToProps> & ReturnType<typeof mapDispatchToProps>;\n\ninterface EntryFnArgs {\n    index: number,\n    style: object\n}\ntype EntryFn = (arg: EntryFnArgs) => void\n\nconst listRef = React.createRef<List>();\n\nconst scrollToTop = () => {\n    if (listRef.current === null) {\n        return;\n    }\n    listRef.current.scrollToItem(0);\n}\n\nfunction sortByKey<T extends object>(array: T[], getKey: (item: T) => any) {\n    return array.sort((a, b) => {\n        const x = getKey(a);\n        const y = getKey(b);\n        return ((x < y) ? -1 : ((x > y) ? 1 : 0));\n    });\n}\n\nconst FileBrowser: React.SFC<MergedProps> = ({ files, dirs, path, drives, places, cancel, isLoading }) => {\n    const getSortKey = (item: DirectoryListingDetails) => item.name.toLowerCase();\n    const dirEntries = sortByKey(dirs, getSortKey).map((dir) => (style: object) => <FolderEntry style={style} onChange={scrollToTop} path={path} details={dir} />);\n    const fileEntries = sortByKey(files, getSortKey).map((f) => ((style: object) => <FileEntry style={style} path={path} details={f} />));\n    const entries = dirEntries.concat(fileEntries);\n\n    const cellFn: EntryFn = ({ index, style }) => {\n        return entries[index](style)\n    }\n\n    let list = (\n        <List style={{ overflowY: \"scroll\" }} ref={listRef} height={300} width=\"100%\" itemCount={entries.length} itemSize={35}>\n            {cellFn}\n        </List>\n    );\n\n    if (isLoading) {\n        // FIXME: hardcoded height\n        list = (\n            <Segment loading={true} style={{ height: \"300px\" }} />\n        )\n    }\n\n    return (\n        <Segment.Group>\n            <Segment>\n                <Header as=\"h2\">Open dataset</Header>\n            </Segment>\n            <Segment>\n                <PathBar currentPath={path} drives={drives} places={places} onChange={scrollToTop} />\n            </Segment>\n            <Segment>\n                <FileBrowserHeader />\n                {list}\n            </Segment>\n            <Segment>\n                <Button onClick={cancel}>Cancel</Button>\n            </Segment>\n        </Segment.Group>\n    );\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(FileBrowser);","\nexport interface JobResultType {\n    imageURL: string,\n    description: { title: string, desc: string },\n}\n\nexport enum JobRunning {\n    CREATING = 'CREATING',\n    RUNNING = 'RUNNING',\n    DONE = 'DONE',\n}\n\nexport enum JobStatus {\n    CREATING = 'CREATING',\n    IN_PROGRESS = 'IN_PROGRESS',\n    CANCELLED = 'CANCELLED',\n    SUCCESS = 'SUCCESS',\n    ERROR = 'ERROR',\n}\n\nexport interface JobStateCommon {\n    id: string,\n    dataset: string,\n    status: JobStatus,\n    startTimestamp: number,\n    results: JobResultType[],\n}\n\nexport type JobStateStart = JobStateCommon & {\n    running: JobRunning.CREATING | JobRunning.RUNNING,\n}\n\nexport type JobStateDone = JobStateCommon & {\n    running: JobRunning.DONE,\n    endTimestamp: number,\n}\n\nexport type JobState = JobStateStart | JobStateDone;","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Button, Icon } from \"semantic-ui-react\";\nimport { RootReducer } from \"../../store\";\nimport * as browserActions from '../actions';\nimport FileBrowser from \"./FileBrowser\";\n\nexport const mapStateToProps = (state: RootReducer) => {\n    return {\n        isOpen: state.browser.isOpen,\n    }\n}\n\nexport const mapDispatchToProps = {\n    open: browserActions.Actions.open,\n}\n\ntype MergedProps = ReturnType<typeof mapStateToProps> & DispatchProps<typeof mapDispatchToProps>;\n\nconst BrowserWrapper: React.SFC<MergedProps> = ({ isOpen, open }) => {\n    if (!isOpen) {\n        return (\n            <Button icon={true} labelPosition=\"left\" onClick={open}>\n                <Icon name='add' />\n                Browse\n            </Button>\n        );\n    }\n    return (\n        <FileBrowser />\n    );\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(BrowserWrapper)","import * as React from \"react\";\nimport { Icon } from \"semantic-ui-react\";\n\nconst BusySpinner: React.SFC = () => {\n    const styles: React.CSSProperties = {\n        margin: 0,\n        padding: 0,\n        position: \"absolute\",\n        bottom: \"10px\",\n        right: \"10px\",\n        color: \"white\",\n        opacity: 0.7,\n        filter: \"drop-shadow(0 0 3px #000)\",\n    };\n    return (\n        <Icon name=\"cog\" loading={true} style={styles} />\n    )\n}\n\nexport default BusySpinner;","import * as React from \"react\";\nimport BusySpinner from \"./BusySpinner\";\n\ninterface BusyWrapperProps {\n    busy: boolean,\n}\n\nconst BusyWrapper: React.SFC<BusyWrapperProps> = ({ children, busy }) => {\n    const styles: React.CSSProperties = {\n        position: \"relative\",\n    };\n    return (\n        <div style={styles}>\n            {children}\n            {busy && <BusySpinner />}\n        </div>\n    )\n}\n\nexport default BusyWrapper;","import * as React from \"react\";\nimport { DraggableHandle } from \"./DraggableHandle\";\nimport { HandleRenderFunction } from \"./types\";\n\nexport interface HandleParentProps {\n    width: number,\n    height: number,\n    onKeyboardEvent?: React.KeyboardEventHandler<SVGElement>,\n    handles: HandleRenderFunction[],\n}\n\nexport class HandleParent extends React.Component<HandleParentProps> {\n    public currentHandle: DraggableHandle | undefined;\n\n    public handleDragStart = (h: DraggableHandle): void => {\n        this.currentHandle = h;\n    }\n\n    public handleDrop = (): void => {\n        this.currentHandle = undefined;\n    }\n\n    public handleMouseMove = (e: React.MouseEvent<SVGElement>): void => {\n        if (this.currentHandle) {\n            return this.currentHandle.externalMouseMove(e);\n        }\n    }\n\n    public handleMouseLeave = (e: React.MouseEvent<SVGElement>): void => {\n        if (this.currentHandle) {\n            this.currentHandle.externalLeave(e);\n        }\n    }\n\n    public handleMouseUp = (e: React.MouseEvent<SVGElement>): void => {\n        if (this.currentHandle) {\n            this.currentHandle.externalMouseUp(e);\n        }\n    }\n\n    public render() {\n        const { width, height } = this.props;\n        const styles = {\n            outline: \"1px dashed black\"\n        }\n        return (\n            <g\n                onMouseMove={this.handleMouseMove}\n                onMouseLeave={this.handleMouseLeave}\n                onMouseUp={this.handleMouseUp}\n                onKeyDown={this.props.onKeyboardEvent}\n                style={styles}\n                tabIndex={0}\n            >\n                <rect style={{ fill: \"transparent\" }}\n                    x={0} y={0} width={width} height={height}\n                />\n                {this.renderHandles()}\n            </g>\n        );\n    }\n\n    public renderHandles() {\n        const { handles, onKeyboardEvent } = this.props;\n        // we need to inform the handle when there are move/up/leave events\n        // on this parent element, for which we need to know the current handle.\n        // so we pass the handle a dragstart/drop function and kindly ask it\n        // to call us if it starts to be dragged or is dropped.\n        return handles.map((h, i) => {\n            const elem = h(this.handleDragStart, this.handleDrop, onKeyboardEvent);\n            if (React.isValidElement(elem)) {\n                return React.cloneElement(elem, { key: i });\n            }\n        });\n    }\n}\n\nexport default HandleParent;","import * as React from \"react\";\nimport { JobState } from \"../types\";\nimport styles from \"./ResultImage.module.css\";\n\ninterface ResultImageProps {\n    job: JobState,\n    idx: number,\n    width: number,\n    height: number,\n}\n\nconst ResultImage: React.SFC<ResultImageProps> = ({ job, idx, width, height }) => {\n    const result = job.results[idx];\n    if (result === undefined) {\n        return (\n            <svg className={styles.fallback} width={width} height={height} viewBox={`0 0 ${width} ${height}`} key={-1} />\n        )\n    }\n    return (\n        <image className={styles.default} xlinkHref={result.imageURL} width={width} height={height} />\n    );\n}\n\nexport default ResultImage;","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport styled from 'styled-components';\nimport { AnalysisState } from \"../../analysis/types\";\nimport { DatasetState } from \"../../messages\";\nimport BusyWrapper from \"../../widgets/BusyWrapper\";\nimport HandleParent from \"../../widgets/HandleParent\";\nimport { HandleRenderFunction } from \"../../widgets/types\";\nimport { JobRunning, JobState } from \"../types\";\nimport ResultImage from \"./ResultImage\";\n\ninterface ResultProps {\n    width: number,\n    height: number,\n    job: JobState,\n    dataset: DatasetState,\n    analysis: AnalysisState,\n    extraHandles?: HandleRenderFunction,\n    extraWidgets?: React.ReactElement<SVGElement>,\n    idx: number,\n    jobIndex: number,\n}\n\nconst ResultWrapper = styled.svg`\n    display: block;\n    border: 1px solid black;\n    width: 100%;\n    height: auto;\n`;\n\ntype MergedProps = ResultProps;\n\nclass Result extends React.Component<MergedProps> {\n    public renderHandles() {\n        const { width, height, extraHandles } = this.props;\n        let handles: HandleRenderFunction[] = [];\n        if (extraHandles) {\n            handles = [...handles, extraHandles];\n        }\n\n        return (\n            <HandleParent width={width} height={height} handles={handles} />\n        )\n    }\n\n    public render() {\n        const { job, idx, width, height, extraWidgets } = this.props;\n        const busy = job.running !== JobRunning.DONE;\n\n        return (\n            <BusyWrapper busy={busy}>\n                <ResultWrapper width={width} height={height} viewBox={`0 0 ${width} ${height}`}>\n                    <ResultImage job={job} idx={idx} width={width} height={height} />\n                    {extraWidgets}\n                    {this.renderHandles()}\n                </ResultWrapper>\n            </BusyWrapper>\n        );\n    }\n};\n\nexport default connect(null, null)(Result);","import styled from 'styled-components';\n\n\nconst Selectors = styled.div`\n    display: flex;\n    & > * {\n        margin-right: 10px;\n    }\n`;\n\n\n\nexport default Selectors;","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Dropdown, DropdownProps } from \"semantic-ui-react\";\nimport { RootReducer } from \"../../store\";\nimport { HandleRenderFunction } from \"../../widgets/types\";\nimport { JobRunning, JobState } from \"../types\";\nimport Result from \"./Result\";\nimport Selectors from \"./Selectors\";\n\ninterface ResultListProps {\n    width: number,\n    height: number,\n    selectors?: React.ReactElement<any>,\n    extraHandles?: HandleRenderFunction,\n    extraWidgets?: React.ReactElement<SVGElement>,\n    subtitle?: React.ReactNode,\n}\n\ninterface ExternalResultListProps {\n    analysis: string,\n    jobIndex: number,\n}\n\nconst mapStateToProps = (state: RootReducer, ownProps: ExternalResultListProps) => {\n    const analysis = state.analyses.byId[ownProps.analysis];\n    const jobId = analysis.jobs[ownProps.jobIndex];\n    const job = jobId ? state.jobs.byId[jobId] : undefined;\n    const ds = job ? state.datasets.byId[job.dataset] : undefined;\n\n    return {\n        currentJob: job,\n        jobsById: state.jobs.byId,\n        analysis,\n        dataset: ds,\n        jobIndex: ownProps.jobIndex,\n    };\n};\n\ntype MergedProps = ResultListProps & ReturnType<typeof mapStateToProps>;\n\ninterface ResultListState {\n    selectedChannel: number,\n}\n\nclass ResultList extends React.Component<MergedProps, ResultListState> {\n    public state: ResultListState = { selectedChannel: 0 };\n\n    public selectChannel = (e: React.SyntheticEvent, data: DropdownProps) => {\n        const value = data.value as number;\n        this.setState({ selectedChannel: value });\n    }\n\n    public getJob = () => {\n        const { currentJob, analysis, jobsById, jobIndex } = this.props;\n        if (!currentJob) {\n            return;\n        }\n        if (currentJob.results.length > 0) {\n            return currentJob;\n        }\n        const history = analysis.jobHistory[jobIndex];\n\n        if (history === undefined) {\n            return;\n        }\n        for (const tmpJobId of history) {\n            const tmpJob = jobsById[tmpJobId];\n            if (tmpJob.results.length > 0) {\n                return tmpJob;\n            }\n        }\n        return;\n    }\n\n    public render() {\n        const {\n            selectors, analysis, dataset, children, width, height, jobIndex,\n            extraHandles, extraWidgets, subtitle,\n        } = this.props;\n        let msg;\n        let currentResult = (\n            // placeholder:\n            <svg style={{ display: \"block\", border: \"1px solid black\", width: \"100%\", height: \"auto\" }} width={width} height={height} viewBox={`0 0 ${width} ${height}`} key={-1} />\n        );\n        const job = this.getJob();\n        if (!job || !dataset) {\n            msg = <>&nbsp;</>;\n        } else {\n            currentResult = (\n                <Result analysis={analysis} job={job} dataset={dataset}\n                    extraHandles={extraHandles}\n                    extraWidgets={extraWidgets}\n                    width={width} height={height}\n                    jobIndex={jobIndex}\n                    idx={this.state.selectedChannel}\n                />\n            );\n            if (job.running === JobRunning.DONE) {\n                const dt = (job.endTimestamp - job.startTimestamp) / 1000;\n                msg = <>Analysis done in {dt.toFixed(3)}s</>;\n            } else {\n                msg = <>Analysis running...</>;\n            }\n        }\n        return (\n            <div>\n                {currentResult}\n                {children}\n                <Selectors>\n                    <ResultImageSelector job={job} handleChange={this.selectChannel} selectedImg={this.state.selectedChannel} />\n                    {selectors}\n                </Selectors>\n                <p>{subtitle} {msg}</p>\n            </div>\n        );\n    }\n}\n\ninterface ImageSelectorProps {\n    job?: JobState,\n    handleChange: (e: React.SyntheticEvent, data: DropdownProps) => void,\n    selectedImg: number,\n}\n\nconst ResultImageSelector: React.SFC<ImageSelectorProps> = ({ job, handleChange, selectedImg }) => {\n    if (!job) {\n        return null;\n    }\n    const availableImages = job.results.map((result, idx) => ({ text: result.description.title, value: idx }));\n    return (\n        <>\n            <div>\n                Channel:{' '}\n                <Dropdown\n                    inline={true}\n                    options={availableImages}\n                    value={selectedImg}\n                    onChange={handleChange}\n                />\n            </div>\n        </>\n    )\n}\n\n\nexport default connect(mapStateToProps)(ResultList);\n","export const inRectConstraint = (width: number, height: number) => (p: Point2D) => {\n    return {\n        x: Math.max(0, Math.min(width - 1, p.x)),\n        y: Math.max(0, Math.min(height - 1, p.y)),\n    }\n}\n\nexport const dist = (cx: number, cy: number, x: number, y: number) => {\n    const dx = cx - x;\n    const dy = cy - y;\n    return Math.sqrt(dx * dx + dy * dy);\n}\n\nexport const cbToRadius = (cx: number, cy: number, cb: ((r: number) => void) | undefined) => (x: number, y: number) => cb && cb(dist(cx, cy, x, y))\n\nexport const keepOnCY = (cy: number) => (p: Point2D) => {\n    return {\n        x: p.x,\n        y: cy,\n    }\n}\n\nexport const keepXLargerThan = (otherX: number) => (p: Point2D) => {\n    return {\n        x: otherX > p.x ? otherX : p.x,\n        y: p.y,\n    }\n}\n\nexport const keepXSmallerThan = (otherX: number) => (p: Point2D) => {\n    return {\n        x: otherX < p.x ? otherX : p.x,\n        y: p.y,\n    }\n}\n\nexport const riConstraint = (outerPos: number, cy: number) => (p: Point2D) => {\n    return keepXLargerThan(outerPos)(\n        keepOnCY(cy)(p)\n    );\n}\n\nexport const roConstraints = (innerPos: number, cy: number) => (p: Point2D) => {\n    return keepXSmallerThan(innerPos)(\n        keepOnCY(cy)(p)\n    );\n}","import { CSSProperties } from \"react\";\n\nexport const defaultMaskStyles = (imageWidth: number): CSSProperties => ({\n    fillOpacity: 0.3,\n    fill: \"red\",\n    strokeOpacity: 0.7,\n    stroke: \"red\",\n    strokeWidth: imageWidth / 128 / 3,\n});","import * as React from \"react\";\nimport { defaultMaskStyles } from \"./styles\";\n\nexport interface DiskProps {\n    imageWidth: number,\n    imageHeight: number,\n    cx: number,\n    cy: number,\n    r: number,\n}\n\nconst Disk: React.SFC<DiskProps> = ({ imageWidth, imageHeight, cx, cy, r }) => {\n    return (\n        <circle cx={cx + .5} cy={cy + .5} r={r} style={{ ...defaultMaskStyles(imageWidth) }} />\n    );\n}\n\nexport default Disk;","export type ModifyCoords = ((x: number, y: number) => ({ x: number, y: number }));\n\n/**\n * Call this function whenever a keyboard event happens. The keyboard event is then translated\n * to a coordinate transformation, which is passed to the update callback. The update callback is\n * only called if relevant keys were pressed (example: arrow keys).\n * \n * @param e keyboard event\n * @param update a callback to handle coordinate updates\n */\nexport const handleKeyEvent = (e: React.KeyboardEvent<SVGElement>, update: (fn: ModifyCoords) => void) => {\n    let delta = 1;\n    if (e.shiftKey) {\n        delta = 10;\n    }\n    switch (e.key) {\n        case \"ArrowUp\":\n            update((x: number, y: number) => ({ x, y: y - delta }));\n            break;\n        case \"ArrowDown\":\n            update((x: number, y: number) => ({ x, y: y + delta }));\n            break;\n        case \"ArrowLeft\":\n            update((x: number, y: number) => ({ x: x - delta, y }));\n            break;\n        case \"ArrowRight\":\n            update((x: number, y: number) => ({ x: x + delta, y }));\n            break;\n        default:\n            return;\n    }\n    e.preventDefault();\n}\n","import * as React from \"react\";\nimport styled from 'styled-components';\nimport { handleKeyEvent, ModifyCoords } from \"./kbdHandler\";\n\nexport type HandleProps = {\n    x: number,\n    y: number,\n    scale: number,\n    withCross?: boolean,\n    focusRef: React.RefObject<SVGGElement>,\n} & React.SVGProps<SVGGElement>;\n\nconst StyledCircle = styled.circle`\n    stroke: red;\n    stroke-width: 1;\n    fill: transparent;\n    g:focus > & {\n        stroke: lightgreen;\n    }\n`;\n\nconst Cross = styled.path`\n    stroke: red;\n    stroke-width: 1;\n    fill: transparent;\n    g:focus > & {\n        stroke: lightgreen;\n    }\n`;\n\nconst FocusGroup = styled.g`\n    &:focus { outline: none; }\n`;\n\nconst Handle: React.SFC<HandleProps> = ({ scale, x, y, withCross, focusRef, ...args }) => {\n    const r = 3;\n    // scaleMatrix is needed to set the origin of the scale\n    const scaleMatrix = `matrix(${scale}, 0, 0, ${scale}, ${x - scale * x}, ${y - scale * y})`;\n    const style: React.CSSProperties = { transform: scaleMatrix };\n    const crossSpec = `\n        M${x - r / 2} ${y} L ${x + r / 2} ${y}\n        M${x} ${y - r / 2} L ${x} ${y + r / 2}\n    `;\n    const cross = withCross ? <Cross d={crossSpec} style={style} /> : null;\n    return (\n        <FocusGroup {...args} ref={focusRef}>\n            <StyledCircle cx={x} cy={y} r={r} style={style} />\n            {cross}\n        </FocusGroup>\n    )\n}\n\nexport interface DraggableHandleProps {\n    x: number,\n    y: number,\n    withCross?: boolean,\n    imageWidth?: number,\n    onDragMove?: (x: number, y: number) => void,\n    parentOnDragStart: (h: DraggableHandle) => void,\n    parentOnDrop: (x: number, y: number) => void,\n    onKeyboardEvent?: (e: React.KeyboardEvent<SVGElement>) => void,\n    constraint?: (p: Point2D) => Point2D,\n}\n\nexport function getScalingFactor(elem: SVGElement): number {\n    const svg = elem.ownerSVGElement;\n    if (svg === null) {\n        throw new Error(\"no owner SVG element?\");\n    }\n    const inWidthAttr = svg.getAttribute(\"width\");\n    if (inWidthAttr === null) {\n        throw new Error(\"no width on SVG element?\");\n    }\n    const inWidth = +inWidthAttr;\n    const svgMeasurements = svg.getBoundingClientRect();\n    return svgMeasurements.width / inWidth;\n}\n\nfunction relativeCoords(e: React.MouseEvent, parent: SVGElement) {\n    const f = getScalingFactor(parent);\n    const parentPos = parent.getBoundingClientRect();\n    const res = {\n        x: (e.pageX - (parentPos.left + window.pageXOffset)) / f,\n        y: (e.pageY - (parentPos.top + window.pageYOffset)) / f,\n    }\n    return res;\n}\n\n/**\n * stateful draggable handle, to be used as part of <svg/>\n */\nexport class DraggableHandle extends React.Component<DraggableHandleProps> {\n    public posRef: React.RefObject<SVGRectElement>;\n    public focusRef: React.RefObject<SVGGElement>;\n\n    public state = {\n        dragging: false,\n        drag: { x: 0, y: 0 },\n    }\n\n    constructor(props: DraggableHandleProps) {\n        super(props);\n        this.posRef = React.createRef<SVGRectElement>();\n        this.focusRef = React.createRef<SVGGElement>();\n    }\n\n    // mousemove event from outside (delegated from surrounding element)\n    public externalMouseMove = (e: React.MouseEvent<SVGElement>): void => {\n        this.move(e);\n    }\n\n    // mouseleave event from outside (delegated from surrounding element)\n    public externalLeave = (e: React.MouseEvent<SVGElement>): void => {\n        this.stopDrag(e);\n    }\n\n    // mouseup event from outside (delegated from surrounding element)\n    public externalMouseUp = (e: React.MouseEvent<SVGElement>): void => {\n        this.stopDrag(e);\n    }\n\n    public applyConstraint = (p: Point2D) => {\n        const { constraint } = this.props;\n        if (constraint) {\n            return constraint(p);\n        } else {\n            return p;\n        }\n    }\n\n    public startDrag = (e: React.MouseEvent<SVGElement>): void => {\n        e.preventDefault();\n        const { parentOnDragStart } = this.props;\n        if (this.posRef.current) {\n            this.setState({\n                dragging: true,\n                drag: this.applyConstraint(relativeCoords(e, this.posRef.current)),\n            });\n            if (parentOnDragStart) {\n                parentOnDragStart(this);\n            }\n            if (this.focusRef.current && this.focusRef.current.focus) {\n                this.focusRef.current.focus();\n            }\n        } else {\n            throw new Error(\"startDrag without posRef\");\n        }\n    }\n\n    public move = (e: React.MouseEvent<SVGElement>): void => {\n        const { onDragMove } = this.props;\n        if (!this.state.dragging) {\n            return;\n        }\n        if (this.posRef.current) {\n            this.setState({\n                drag: this.applyConstraint(relativeCoords(e, this.posRef.current)),\n            }, () => {\n                if (onDragMove) {\n                    const constrained = this.applyConstraint(this.state.drag)\n                    onDragMove(constrained.x, constrained.y);\n                }\n            })\n        } else {\n            throw new Error(\"move without posRef\");\n        }\n    }\n\n    public stopDrag = (e: React.MouseEvent<SVGElement>): void => {\n        const { parentOnDrop } = this.props;\n        const { dragging, drag } = this.state;\n        if (!dragging) {\n            return;\n        }\n        this.setState({\n            dragging: false,\n        })\n        if (parentOnDrop) {\n            parentOnDrop(drag.x, drag.y);\n        }\n    }\n\n    public handleKeyDown = (e: React.KeyboardEvent<SVGElement>) => {\n        const update = (fn: ModifyCoords) => {\n            const { x, y, onDragMove } = this.props;\n            const newCoords = fn(x, y);\n            const constrained = this.applyConstraint(newCoords);\n            if (onDragMove) {\n                onDragMove(constrained.x, constrained.y);\n            }\n        }\n        handleKeyEvent(e, update);\n    }\n\n    public renderCommon(x: number, y: number) {\n        const { imageWidth } = this.props;\n        const scale = imageWidth === undefined ? 1 : imageWidth / 128;\n        // empty zero-size <rect> as relative position reference\n        return (\n            <g>\n                <rect\n                    style={{ visibility: \"hidden\" }}\n                    ref={this.posRef}\n                    x={0} y={0} width={0} height={0}\n                />\n                <Handle scale={scale} x={x + .5} y={y + .5} withCross={this.props.withCross}\n                    focusRef={this.focusRef}\n                    onMouseUp={this.stopDrag}\n                    onMouseMove={this.move}\n                    onMouseDown={this.startDrag}\n                    onKeyDown={this.handleKeyDown}\n                    tabIndex={0}\n                />\n            </g>\n        );\n    }\n\n    public renderDragging() {\n        const { x, y } = this.state.drag;\n        return this.renderCommon(x, y);\n    }\n\n    public render() {\n        const { x, y } = this.props;\n        // either render from state (when dragging) or from props\n        if (this.state.dragging) {\n            return this.renderDragging();\n        } else {\n            return this.renderCommon(x, y);\n        }\n    }\n}\n\nexport default DraggableHandle;","import { ActionsUnion, createAction } from \"../helpers/actionHelpers\";\nimport { AnalysisDetails, AnalysisTypes } from \"../messages\";\nimport { AnalysisState } from \"./types\";\n\n\nexport enum ActionTypes {\n    CREATE = 'ANALYSIS_CREATE',\n    CREATED = 'ANALYSIS_CREATED',\n    PREPARE_RUN = 'ANALYSIS_PREPARE_RUN',\n    RUN = 'ANALYSIS_RUN',\n    RUNNING = 'ANALYSIS_RUNNING',\n    REMOVE = 'ANALYSIS_REMOVE',\n    REMOVED = 'ANALYSIS_REMOVED',\n    ERROR = 'ANALYSIS_ERROR',\n}\n\nexport const Actions = {\n    create: (dataset: string, analysisType: AnalysisTypes) => createAction(ActionTypes.CREATE, { dataset, analysisType }),\n    created: (analysis: AnalysisState) => createAction(ActionTypes.CREATED, { analysis }),\n    prepareRun: (id: string, jobIndex: number, job: string) => createAction(ActionTypes.PREPARE_RUN, { id, jobIndex, job }),\n    run: (id: string, jobIndex: number, parameters: AnalysisDetails) => createAction(ActionTypes.RUN, { id, jobIndex, parameters }),\n    running: (id: string, job: string, jobIndex: number) => createAction(ActionTypes.RUNNING, { id, job, jobIndex }),\n    remove: (id: string) => createAction(ActionTypes.REMOVE, { id }),\n    removed: (id: string) => createAction(ActionTypes.REMOVED, { id }),\n    error: (msg: string, timestamp: number, id: string) => createAction(ActionTypes.ERROR, { msg, timestamp, id }),\n}\n\nexport type Actions = ActionsUnion<typeof Actions>;\n\nexport type ActionParts = {\n    [K in keyof typeof Actions]: ReturnType<typeof Actions[K]>\n}","import * as React from \"react\";\nimport { useState } from \"react\";\nimport { AnalysisTypes } from \"../../messages\";\nimport { HandleRenderFunction } from \"../../widgets/types\";\nimport { useDiskROI } from \"./DiskROI\";\nimport useFramePicker from \"./FramePicker\";\nimport ModeSelector from \"./ModeSelector\";\nimport { useRectROI } from \"./RectROI\";\nimport { useRoiPicker } from \"./RoiPicker\";\n\n\nexport enum DefaultModes {\n    SUM = \"SUM\",\n    SD = \"SD\",\n    PICK = \"PICK\",\n}\n\nexport enum DefaultRois {\n\n    ALL = \"ALL\",\n    DISK = \"DISK\",\n    RECT = \"RECT\",\n\n}\n\nconst useDefaultFrameView = ({\n    scanWidth, scanHeight, analysisId,\n}: {\n    scanWidth: number, scanHeight: number, analysisId: string,\n}) => {\n    const availableModes = [\n        {\n            text: \"Average\",\n            value: DefaultModes.SUM,\n        },\n        {\n            text: \"Standard Deviation\",\n            value: DefaultModes.SD,\n        },\n        {\n            text: \"Pick\",\n            value: DefaultModes.PICK,\n        },\n    ]\n\n    const availableRois = [\n        {\n            text: \"All\",\n            value: DefaultRois.ALL,\n        },\n        {\n            text: \"Disk\",\n            value: DefaultRois.DISK,\n        },\n        {\n            text: \"Rect\",\n            value: DefaultRois.RECT,\n        },\n    ]\n\n    const [frameMode, setMode] = useState(DefaultModes.SUM);\n    const [roi, setRoi] = useState(DefaultRois.ALL)\n\n    const frameModeSelector = <ModeSelector modes={availableModes} currentMode={frameMode} onModeChange={setMode} label=\"Mode\"/>\n\n    const roiSelector = <ModeSelector modes={availableRois} currentMode={roi} onModeChange={setRoi} label=\"ROI\"/>\n\n    const [cx, setCx] = React.useState(Math.round(scanWidth / 2));\n    const [cy, setCy] = React.useState(Math.round(scanHeight / 2));\n\n\n    const { coords: pickCoords, handles: pickHandles } = useFramePicker({\n        enabled: frameMode === DefaultModes.PICK,\n        scanWidth, scanHeight,\n        jobIndex: 0,\n        analysisId,\n        cx, cy, setCx, setCy\n    });\n\n\n    const { rectRoiHandles, rectRoiWidgets, rectRoiParameters }  = useRectROI({ scanHeight, scanWidth })\n    const { diskRoiHandles, diskRoiWidgets, diskRoiParameters}  = useDiskROI({ scanHeight, scanWidth })\n\n    const nullHandles: HandleRenderFunction = (onDragStart, onDrop) => null\n    let handles = nullHandles;\n\n\n\n    let widgets;\n    let params = {roi:{}};\n    switch (roi) {\n        case DefaultRois.DISK:\n            handles = diskRoiHandles;\n            widgets = diskRoiWidgets;\n            params = diskRoiParameters;\n            break;\n        case DefaultRois.RECT:\n            handles = rectRoiHandles;\n            widgets = rectRoiWidgets;\n            params = rectRoiParameters;\n            break;\n    }\n\n    switch (frameMode) {\n        case DefaultModes.PICK:\n            handles = pickHandles;\n            widgets = undefined;\n            break;\n    }   \n\n    useRoiPicker({\n        enabled: frameMode === DefaultModes.SD,\n        scanWidth, scanHeight,\n        jobIndex: 0,\n        analysisId,\n        roiParameters: params,\n        analysis: AnalysisTypes.SD_FRAMES\n    })\n\n    \n\n    useRoiPicker({\n        enabled: frameMode === DefaultModes.SUM,\n        scanWidth, scanHeight,\n        jobIndex: 0,\n        analysisId,\n        roiParameters: params,\n        analysis: AnalysisTypes.SUM_FRAMES,\n    })\n\n\n    const frameViewTitle = (\n        frameMode !== DefaultModes.PICK ? null : <>Pick: x={pickCoords.cx}, y={pickCoords.cy} &emsp;</>\n    )\n\n    return {\n        frameViewTitle,\n        frameModeSelector: (<>{frameModeSelector} {roiSelector}</>),\n        roiSelector,\n        handles,\n        widgets,\n    }\n}\n\nexport default useDefaultFrameView;","import * as React from \"react\";\nimport { Grid, Header, Icon, Segment } from \"semantic-ui-react\";\n\ninterface AnalysisLayoutTwoColProps {\n    title: string,\n    subtitle: React.ReactNode,\n    left: React.ReactNode,\n    right: React.ReactNode,\n    toolbar?: React.ReactNode,\n}\n\ntype MergedProps = AnalysisLayoutTwoColProps;\n\nconst AnalysisLayoutTwoCol: React.SFC<MergedProps> = ({\n    title, subtitle,\n    left, right,\n    toolbar,\n}) => {\n\n    return (\n        <>\n            <Header as='h3' attached=\"top\">\n                <Icon name=\"cog\" />\n                <Header.Content>{title}</Header.Content>\n            </Header>\n            <Segment attached={true}>\n                <Grid columns={2}>\n                    <Grid.Row>\n                        <Grid.Column>\n                            {left}\n                            <p>{subtitle}</p>\n                        </Grid.Column>\n                        <Grid.Column>\n                            {right}\n                        </Grid.Column>\n                    </Grid.Row>\n                </Grid>\n            </Segment>\n            {toolbar}\n        </>\n    )\n}\n\nexport default AnalysisLayoutTwoCol","import React from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { AnalysisParameters, AnalysisTypes } from \"../../messages\";\nimport { inRectConstraint } from \"../../widgets/constraints\";\nimport DraggableHandle from \"../../widgets/DraggableHandle\";\nimport { HandleRenderFunction } from \"../../widgets/types\";\nimport * as analysisActions from \"../actions\";\n\nconst useFramePicker = ({\n    enabled, scanWidth, scanHeight, jobIndex, analysisId, cx, cy, setCx, setCy\n}: {\n    enabled: boolean, scanWidth: number, scanHeight: number,\n    jobIndex: number, analysisId: string,\n    cx: number, cy: number, setCx: (newCx: number) => void, setCy: (newCy: number) => void,\n}) => {\n\n    const dispatch = useDispatch();\n\n    React.useEffect(() => {\n        if (enabled) {\n            const params: AnalysisParameters = {\n                x: cx,\n                y: cy,\n            };\n\n            dispatch(analysisActions.Actions.run(analysisId, jobIndex, {\n                type: AnalysisTypes.PICK_FRAME,\n                parameters: params,\n            }))\n        }\n    }, [analysisId, cx, cy, enabled, jobIndex]);\n\n    const onPickChange = (pickX: number, pickY: number) => {\n        const newX = Math.round(pickX);\n        const newY = Math.round(pickY);\n        if (cx === newX && cy === newY) {\n            return;\n        }\n        setCx(newX);\n        setCy(newY);\n    }\n\n    const renderPickHandle: HandleRenderFunction = (onDragStart, onDrop) => (\n        <DraggableHandle x={cx} y={cy} withCross={true}\n            imageWidth={scanWidth}\n            onDragMove={onPickChange}\n            parentOnDragStart={onDragStart}\n            parentOnDrop={onDrop}\n            constraint={inRectConstraint(scanWidth, scanHeight)} />\n    )\n\n    return { coords: { cx, cy }, handles: renderPickHandle };\n}\n\nexport default useFramePicker;","import * as React from \"react\";\nimport { Dropdown, DropdownProps } from \"semantic-ui-react\";\n\n\ntype ModeOptions = Array<{\n    text: string;\n    value: any;\n}>;\n\ninterface ModeSelectorProps {\n    modes: ModeOptions,\n    currentMode: any,\n    onModeChange: (mode: any) => void,\n    label: string,\n}\n\nconst ModeSelector: React.FunctionComponent<ModeSelectorProps> = ({\n    modes, currentMode, onModeChange, label\n}) => {\n\n    const onChange = (e: React.SyntheticEvent, data: DropdownProps) => {\n        onModeChange(data.value)\n    }\n\n    return (\n        <>\n            <div>\n                {label}:{' '}\n                <Dropdown\n                    inline={true}\n                    options={modes}\n                    value={currentMode}\n                    onChange={onChange}\n                />\n            </div>\n        </>\n    )\n}\n\nexport default ModeSelector;","import * as React from \"react\";\nimport { defaultMaskStyles } from \"./styles\";\n\nexport interface RectProps {\n    imageWidth: number,\n    imageHeight: number,\n    x: number,\n    y: number,\n    width: number,\n    height: number,\n}\n\nconst Rect: React.SFC<RectProps> = ({ imageWidth, imageHeight, x, y, width, height }) => {\n    let ymin: number;\n    let xmin: number;\n    if (height*width > 0) {\n    ymin = Math.min(y, y+height);\n    xmin = Math.min(x, x+width);}\n    else if (height > 0 && width < 0) \n    {ymin = y;\n    xmin = x+width;}\n    else \n    {ymin = y+height;\n    xmin = x;}\n    return (\n        <rect x={xmin + .5} y={ymin + .5} width={Math.abs(width)} height={Math.abs(height)} style={{ ...defaultMaskStyles(imageWidth) }} />\n    );\n}\n\nexport default Rect;\n\n","import * as React from \"react\";\nimport { useState } from \"react\";\n\nimport { FrameParams } from \"../../messages\";\nimport DraggableHandle from \"../../widgets/DraggableHandle\";\nimport Rect from \"../../widgets/Rect\";\nimport { HandleRenderFunction } from \"../../widgets/types\";\n\n\nconst useRectROI = ({ scanWidth, scanHeight}: {\n    scanWidth: number;\n    scanHeight: number; \n}) => {\n    const minLength = Math.min(scanWidth, scanHeight);\n    const [x, setx] = useState(scanWidth / 2);\n    const [y, sety] = useState(scanHeight / 2);\n    const [width, setwidth] = useState(minLength / 8);\n    const [height, setheight] = useState(minLength / 8);\n\n\n    const rectRoiParameters: FrameParams = {\n        roi: {\n            shape: \"rect\",\n            x,\n            y,\n            width,\n            height,\n        },\n    }\n\n\n    const handleCornerChange = (newx: number, newy: number) => {\n        setx(newx);\n        sety(newy);\n    };\n\n    const handleShapeChange = (newx: number, newy: number) => {\n        setwidth(newx-x);\n        setheight(newy-y);\n    };\n\n    const smthHandle = {\n        x: x + width ,\n        y: y + height,\n    }\n\n    const rectRoiHandles: HandleRenderFunction = (handleDragStart, handleDrop) => (<>\n        <DraggableHandle x={x} y={y}\n            imageWidth={scanWidth}\n            onDragMove={handleCornerChange}\n            parentOnDragStart={handleDragStart}\n            parentOnDrop={handleDrop}/>\n        <DraggableHandle x={smthHandle.x} y={smthHandle.y}\n            imageWidth={scanWidth}\n            onDragMove={handleShapeChange}\n            parentOnDragStart={handleDragStart}\n            parentOnDrop={handleDrop}/>\n    </>);\n\n    const rectRoiWidgets = (\n        <Rect x={x} y={y} width={width} height={height}\n            imageWidth={scanWidth} imageHeight={scanHeight}\n        />\n    );\n\n    return {\n        rectRoiParameters,\n        rectRoiHandles,\n        rectRoiWidgets,\n    };\n};\n\nexport { useRectROI };\n\n","import * as React from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { AnalysisDetails, AnalysisTypes, FrameParams } from \"../../messages\";\nimport * as analysisActions from \"../actions\";\n\n\nconst useRoiPicker = ({ analysisId, enabled, jobIndex, roiParameters, analysis}: {\n    scanWidth: number;\n    scanHeight: number;\n    enabled: boolean;\n    jobIndex: number,\n    analysisId: string;\n    roiParameters: FrameParams;\n    analysis: AnalysisTypes.SD_FRAMES|AnalysisTypes.SUM_FRAMES\n}) => {\n    const dispatch = useDispatch();\n\n    React.useEffect(() => {\n        const handle = setTimeout(() => {\n            if (enabled) {\n                // work around typescript bug in 3.2.X\n                // explicit cast should be removed when upgrading ts\n                const analysisDetails = {\n                    type: analysis,\n                    parameters: roiParameters,\n                } as AnalysisDetails\n                dispatch(analysisActions.Actions.run(analysisId, jobIndex, analysisDetails))\n            }\n        }, 100);\n\n        return () => clearTimeout(handle);\n    }, [analysis, analysisId, enabled, jobIndex, JSON.stringify(roiParameters)]);\n\n    return {\n    };\n};\n\nexport { useRoiPicker };\n\n","import * as React from \"react\";\nimport { useState } from \"react\";\n\nimport { FrameParams } from \"../../messages\";\nimport { cbToRadius, inRectConstraint, keepOnCY } from \"../../widgets/constraints\";\nimport Disk from \"../../widgets/Disk\";\nimport DraggableHandle from \"../../widgets/DraggableHandle\";\nimport { HandleRenderFunction } from \"../../widgets/types\";\n\nconst useDiskROI = ({ scanWidth, scanHeight}: {\n    scanWidth: number;\n    scanHeight: number;\n}) => {\n    const minLength = Math.min(scanWidth, scanHeight);\n    const [cx, setCx] = useState(scanWidth / 2);\n    const [cy, setCy] = useState(scanHeight / 2);\n    const [r, setR] = useState(minLength / 8);\n\n\n    const diskRoiParameters: FrameParams = {\n        roi: {\n            shape: \"disk\",\n            cx,\n            cy,\n            r,\n        },\n    }\n\n\n    const handleCenterChange = (newCx: number, newCy: number) => {\n        setCx(newCx);\n        setCy(newCy);\n    };\n\n    const handleRChange = (newR: number) => {\n        setR(newR);\n    };\n\n    const rHandle = {\n        x: cx - r,\n        y: cy,\n    }\n\n    const diskRoiHandles: HandleRenderFunction = (handleDragStart, handleDrop) => (<>\n        <DraggableHandle x={cx} y={cy}\n            imageWidth={scanWidth}\n            onDragMove={handleCenterChange}\n            parentOnDragStart={handleDragStart}\n            parentOnDrop={handleDrop}\n            constraint={inRectConstraint(scanWidth, scanHeight)} />\n        <DraggableHandle x={rHandle.x} y={rHandle.y}\n            imageWidth={scanWidth}\n            onDragMove={cbToRadius(cx, cy, handleRChange)}\n            parentOnDragStart={handleDragStart}\n            parentOnDrop={handleDrop}\n            constraint={keepOnCY(cy)} />\n    </>);\n\n    const diskRoiWidgets = (\n        <Disk cx={cx} cy={cy} r={r}\n            imageWidth={scanWidth} imageHeight={scanHeight}\n        />\n    );\n\n    return {\n        diskRoiParameters,\n        diskRoiHandles,\n        diskRoiWidgets,\n    };\n};\n\nexport { useDiskROI };\n\n","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { Button, Icon, IconProps, Segment } from \"semantic-ui-react\";\nimport { RootReducer } from \"../../store\";\nimport * as analysisActions from \"../actions\";\nimport { getAnalysisStatus } from \"../helpers\";\nimport { AnalysisState } from \"../types\";\n\ninterface ToolbarProps {\n    analysis: AnalysisState,\n    busyIdxs: number[],\n    onApply: () => void,\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch, ownProps: ToolbarProps) => {\n    return {\n        handleRemove: () => dispatch(analysisActions.Actions.remove(ownProps.analysis.id)),\n    }\n}\n\ntype MergedProps = ToolbarProps & ReturnType<typeof mapDispatchToProps> & ReturnType<typeof mapStateToProps>;\n\nconst Toolbar: React.SFC<MergedProps> = ({ status, onApply, handleRemove }) => {\n    const running = status === \"busy\";\n    const applyIconProps: IconProps = running ? { name: 'cog', loading: true } : { name: 'check' }\n    return (\n        <Segment attached=\"bottom\">\n            <Button.Group>\n                <Button primary={true} onClick={onApply} icon={true}>\n                    <Icon {...applyIconProps} />\n                    Apply\n                </Button>\n                <Button onClick={handleRemove} icon={true}>\n                    <Icon name='remove' />\n                    Remove\n                </Button>\n            </Button.Group>\n        </Segment>\n    );\n}\n\nconst mapStateToProps = (state: RootReducer, ownProps: ToolbarProps) => {\n    const status = getAnalysisStatus(ownProps.analysis, state.jobs, ownProps.busyIdxs);\n    return {\n        status,\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Toolbar);","import { JobReducerState } from \"../job/reducers\";\nimport { JobRunning } from \"../job/types\";\nimport { AnalysisState } from \"./types\";\n\nexport const getAnalysisStatus = (analysis: AnalysisState, jobs: JobReducerState, jobIdxsToInclude: number[] = []): \"idle\" | \"busy\" => {\n    let filteredJobs = analysis.jobs;\n\n    if (jobIdxsToInclude.length > 0) {\n        filteredJobs = analysis.jobs.filter((jobId: string, idx: number) => {\n            return jobIdxsToInclude.indexOf(idx) !== -1;\n        })\n    }\n\n    return filteredJobs.reduce((prevValue: \"idle\" | \"busy\", jobId: string) => {\n        const isDone = jobs.byId[jobId].running === JobRunning.DONE;\n        return isDone ? prevValue : \"busy\";\n    }, \"idle\");\n}","import * as React from \"react\";\nimport { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { defaultDebounce } from \"../../helpers\";\nimport ResultList from \"../../job/components/ResultList\";\nimport { AnalysisTypes } from \"../../messages\";\nimport { cbToRadius, inRectConstraint, keepOnCY } from \"../../widgets/constraints\";\nimport Disk from \"../../widgets/Disk\";\nimport { DraggableHandle } from \"../../widgets/DraggableHandle\";\nimport { HandleRenderFunction } from \"../../widgets/types\";\nimport * as analysisActions from \"../actions\";\nimport { AnalysisProps } from \"../types\";\nimport AnalysisLayoutTwoCol from \"./AnalysisLayoutTwoCol\";\nimport useDefaultFrameView from \"./DefaultFrameView\";\nimport Toolbar from \"./Toolbar\";\n\nconst CenterOfMassAnalysis: React.SFC<AnalysisProps> = ({ analysis, dataset }) => {\n    const { shape } = dataset.params;\n    const [scanHeight, scanWidth, imageHeight, imageWidth] = shape;\n    const minLength = Math.min(imageWidth, imageHeight);\n    const [cx, setCx] = useState(imageWidth / 2);\n    const [cy, setCy] = useState(imageHeight / 2);\n    const [r, setR] = useState(minLength / 4);\n\n    const dispatch = useDispatch();\n\n    const rHandle = {\n        x: cx - r,\n        y: cy,\n    }\n\n    const handleCenterChange = defaultDebounce((newCx: number, newCy: number) => {\n        setCx(newCx);\n        setCy(newCy);\n    });\n    const handleRChange = defaultDebounce(setR);\n\n    const frameViewHandles: HandleRenderFunction = (handleDragStart, handleDrop) => (<>\n        <DraggableHandle x={cx} y={cy}\n            imageWidth={imageWidth}\n            onDragMove={handleCenterChange}\n            parentOnDragStart={handleDragStart}\n            parentOnDrop={handleDrop}\n            constraint={inRectConstraint(imageWidth, imageHeight)} />\n        <DraggableHandle x={rHandle.x} y={rHandle.y}\n            imageWidth={imageWidth}\n            onDragMove={cbToRadius(cx, cy, handleRChange)}\n            parentOnDragStart={handleDragStart}\n            parentOnDrop={handleDrop}\n            constraint={keepOnCY(cy)} />\n    </>);\n\n    const frameViewWidgets = (\n        <Disk cx={cx} cy={cy} r={r}\n            imageWidth={imageWidth} imageHeight={imageHeight} />\n    )\n\n    const {\n        frameViewTitle, frameModeSelector,\n        handles: resultHandles, widgets: resultWidgets\n    } = useDefaultFrameView({\n        scanWidth,\n        scanHeight,\n        analysisId: analysis.id,\n    })\n\n    const subtitle = <>{frameViewTitle} Disk: center=(x={cx.toFixed(2)}, y={cy.toFixed(2)}), r={r.toFixed(2)}</>;\n\n    const runAnalysis = () => {\n        dispatch(analysisActions.Actions.run(analysis.id, 1, {\n            type: AnalysisTypes.CENTER_OF_MASS,\n            parameters: {\n                shape: \"com\",\n                cx,\n                cy,\n                r\n            }\n        }));\n    };\n\n    const toolbar = <Toolbar analysis={analysis} onApply={runAnalysis} busyIdxs={[1]} />\n\n    return (\n        <AnalysisLayoutTwoCol\n            title=\"COM analysis\" subtitle={subtitle}\n            left={<>\n                <ResultList\n                    extraHandles={frameViewHandles} extraWidgets={frameViewWidgets}\n                    jobIndex={0} analysis={analysis.id}\n                    width={imageWidth} height={imageHeight}\n                    selectors={frameModeSelector}\n                />\n            </>}\n            right={<>\n                <ResultList\n                    jobIndex={1} analysis={analysis.id}\n                    width={scanWidth} height={scanHeight}\n                    extraHandles={resultHandles}\n                    extraWidgets={resultWidgets}\n                />\n            </>}\n            toolbar={toolbar}\n        />\n    );\n}\n\nexport default CenterOfMassAnalysis;","// from https://stackoverflow.com/a/45100420/540644\nexport function getPathArc(center: { x: number, y: number }, start: number, end: number, radius: number) {\n    if (end === start) { end += 360; }\n    let degree = end - start;\n    degree = degree < 0 ? (degree + 360) : degree;\n    const points = [];\n    points.push(getLocationFromAngle(start, radius, center));\n    points.push(getLocationFromAngle(start + degree / 3, radius, center));\n    points.push(getLocationFromAngle(start + degree * 2 / 3, radius, center));\n    points.push(getLocationFromAngle(end, radius, center));\n    return getCirclePath(points, radius, (degree < 180) ? 0 : 1);\n}\n\nfunction getCirclePath(points: Array<{ x: number, y: number }>, radius: number, clockWise: 0 | 1) {\n    return ['M', points[0].x, points[0].y,\n        'A', radius, radius, 0, 0, clockWise, points[1].x, points[1].y,\n        'A', radius, radius, 0, 0, clockWise, points[2].x, points[2].y,\n        'A', radius, radius, 0, 0, clockWise, points[3].x, points[3].y\n    ].join(' ');\n}\n\nfunction getLocationFromAngle(degree: number, radius: number, center: { x: number, y: number }) {\n    const radian = (degree * Math.PI) / 180;\n    return {\n        x: Math.cos(radian) * radius + center.x,\n        y: Math.sin(radian) * radius + center.y\n    }\n}\n","import * as React from \"react\";\nimport { getPathArc } from \"../helpers/svg\";\nimport { defaultMaskStyles } from \"./styles\";\n\nexport interface RingProps {\n    imageWidth: number,\n    cx: number,\n    cy: number,\n    ri: number,\n    ro: number,\n}\n\nconst Ring: React.SFC<RingProps> = ({ imageWidth, cx, cy, ri, ro }) => {\n    // see also: https://stackoverflow.com/a/37883328/540644\n    const pathSpecs = [\n        getPathArc({ x: cx + .5, y: cy + .5 }, 90, 90, ro),\n        getPathArc({ x: cx + .5, y: cy + .5 }, 90, 90, ri)\n    ]\n    const pathSpec = pathSpecs.join(' ');\n\n    return (\n        <path d={pathSpec} fillRule=\"evenodd\" style={{ ...defaultMaskStyles(imageWidth) }} />\n    );\n}\n\nexport default Ring;","import * as React from \"react\";\nimport { Grid, Header, Icon, Segment } from \"semantic-ui-react\";\n\ninterface AnalysisLayoutTwoResProps {\n    title: string,\n    subtitle: React.ReactNode,\n    left: React.ReactNode,\n    mid: React.ReactNode,\n    right: React.ReactNode,\n    clustparams: React.ReactNode,\n    toolbar?: React.ReactNode,\n    title1: string, \n    title2: React.ReactNode,\n    title3:string,\n\n}\n\ntype MergedProps = AnalysisLayoutTwoResProps;\n\nconst AnalysisLayoutTwoRes: React.SFC<MergedProps> = ({\n    title, subtitle,\n    left, mid, right,\n    toolbar, clustparams, title1, title2, title3\n}) => {\n    return (\n        <>\n            <Header as='h3' attached=\"top\">\n                <Icon name=\"cog\" />\n                <Header.Content>{title}</Header.Content>\n            </Header>\n            <Segment attached={true}>\n                <Grid columns={3}>\n                    <Grid.Row>\n                        <Grid.Column width={4}>\n                            <p>{title1}</p>\n                        </Grid.Column> \n\n                        <Grid.Column width={6}>\n                            <p>{title2}</p>   \n\n                        </Grid.Column>\n\n                        <Grid.Column width={6}>\n                            <p>{title3}</p>\n                        </Grid.Column>    \n                    </Grid.Row>\n\n                    <Grid.Row>\n                        <Grid.Column width={4}>\n                            {left}\n                        </Grid.Column>\n\n                        <Grid.Column width={6}>\n                            {mid}\n                        </Grid.Column>\n\n                        <Grid.Column width={6}>\n                            {right}\n                        </Grid.Column>\n\n                    </Grid.Row>\n\n                    <Grid.Row>\n                        <Grid.Column width={16}>\n\n                            <div>{clustparams}</div>\n                            <p>{subtitle}</p>\n\n                        </Grid.Column>\n\n                    </Grid.Row>\n                </Grid>\n                \n            </Segment>\n            \n            {toolbar}\n        </>\n    )\n}\n\nexport default AnalysisLayoutTwoRes","import * as React from \"react\";\nimport { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { Accordion, Form, Icon } from \"semantic-ui-react\";\nimport { defaultDebounce } from \"../../helpers\";\nimport ResultList from \"../../job/components/ResultList\";\nimport { AnalysisTypes } from \"../../messages\";\nimport { cbToRadius, inRectConstraint, riConstraint, roConstraints } from \"../../widgets/constraints\";\nimport DraggableHandle from \"../../widgets/DraggableHandle\";\nimport Ring from \"../../widgets/Ring\";\nimport { HandleRenderFunction } from \"../../widgets/types\";\nimport * as analysisActions from \"../actions\";\nimport { AnalysisProps } from \"../types\";\nimport AnalysisLayoutTwoRes from \"./AnalysisLayoutTwoRes\";\nimport useDefaultFrameView from \"./DefaultFrameView\";\nimport { useRectROI } from \"./RectROI\";\nimport Toolbar from \"./Toolbar\";\n\n\n\n\nconst ClustAnalysis: React.SFC<AnalysisProps> = ({ analysis, dataset }) => {\n \n    const { shape } = dataset.params;\n    const [scanHeight, scanWidth, imageHeight, imageWidth] = shape;\n    const minLength = Math.min(imageWidth, imageHeight);\n\n    const [cx, setCx] = useState(imageWidth / 2);\n    const [cy, setCy] = useState(imageHeight / 2);\n    const [ri, setRi] = useState(minLength / 4);\n    const [ro, setRo] = useState(minLength / 2);\n\n    const riHandle = {\n        x: cx - ri,\n        y: cy,\n    }\n    const roHandle = {\n        x: cx - ro,\n        y: cy,\n    }\n\n    const [delta, setDelta] = React.useState(0.05);\n\n    const deltaChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setDelta(event.target.valueAsNumber);\n    }\n\n    const [min_dist, setMin_dist] = React.useState(1);\n\n    const min_distChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setMin_dist(event.target.valueAsNumber);\n    }\n\n    const [n_peaks, setPeak] = React.useState(50);\n\n    const peakChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setPeak(event.target.valueAsNumber);\n    }\n\n    const [n_clust, setClust] = React.useState(20);\n\n    const clustChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setClust(event.target.valueAsNumber);\n    }\n\n    const handleCenterChange = defaultDebounce((newCx: number, newCy: number) => {\n        setCx(newCx);\n        setCy(newCy);\n    });\n    const handleRIChange = defaultDebounce(setRi);\n    const handleROChange = defaultDebounce(setRo);\n\n    const frameViewHandles: HandleRenderFunction = (handleDragStart, handleDrop) => (<>\n        <DraggableHandle x={cx} y={cy}\n            imageWidth={imageWidth}\n            onDragMove={handleCenterChange}\n            parentOnDrop={handleDrop}\n            parentOnDragStart={handleDragStart}\n            constraint={inRectConstraint(imageWidth, imageHeight)} />\n        <DraggableHandle x={roHandle.x} y={roHandle.y}\n            imageWidth={imageWidth}\n            onDragMove={cbToRadius(cx, cy, handleROChange)}\n            parentOnDrop={handleDrop}\n            parentOnDragStart={handleDragStart}\n            constraint={roConstraints(riHandle.x, cy)} />\n        <DraggableHandle x={riHandle.x} y={riHandle.y}\n            imageWidth={imageWidth}\n            parentOnDrop={handleDrop}\n            parentOnDragStart={handleDragStart}\n            onDragMove={cbToRadius(cx, cy, handleRIChange)}\n            constraint={riConstraint(roHandle.x, cy)} />\n    </>);\n\n    const frameViewWidgets = (\n        <Ring cx={cx} cy={cy} ri={ri} ro={ro}\n            imageWidth={imageWidth} />\n    )\n\n    const dispatch = useDispatch();\n    const {rectRoiParameters, rectRoiHandles, rectRoiWidgets}=useRectROI({scanWidth, scanHeight});\n    \n    React.useEffect(() => {\n        dispatch(analysisActions.Actions.run(analysis.id, 1, {\n            type: AnalysisTypes.SUM_SIG,\n            parameters:{},\n        }))\n    }, [analysis.id]);\n    \n    const runAnalysis = () => {\n        dispatch(analysisActions.Actions.run(analysis.id, 2, {\n            type: AnalysisTypes.CLUST,\n            parameters:{\n            roi: rectRoiParameters.roi,\n            cx,\n            cy,\n            ri,\n            ro,\n            delta,\n            n_clust,\n            n_peaks,\n            min_dist\n            }\n        }));\n    };\n\n    const {\n        frameViewTitle, frameModeSelector,\n        handles: resultHandles,\n        widgets: resultWidgets,\n    } = useDefaultFrameView({\n        scanWidth,\n        scanHeight,\n        analysisId: analysis.id,\n    })\n\n    const subtitle = (\n        <>{frameViewTitle} Ring: center=(x={cx.toFixed(2)}, y={cy.toFixed(2)}), ri={ri.toFixed(2)}, ro={ro.toFixed(2)}</>\n    )\n    const toolbar = <Toolbar analysis={analysis} onApply={runAnalysis} busyIdxs={[2]} />\n    \n    const [paramsVisible, setParamsVisible] = React.useState(false);\n\n    const handleClick = (event: React.MouseEvent<HTMLDivElement>) => {\n        setParamsVisible(!paramsVisible);\n    }\n    \n    const clustparams =\n    <Accordion>\n    <Accordion.Title active={paramsVisible} index={0} onClick={handleClick}>\n          <Icon name='dropdown' />\n          Parameters\n    </Accordion.Title>\n    <Accordion.Content active={paramsVisible}>\n    <Form>\n        <Form.Field> \n            <label> Delta. Relative intensity difference for decision making for feature vector value (delta = (x-ref)/ref, so, normally, value should be in range [0,1]) <input type=\"number\" value={delta} step=\"0.01\" min=\"0\" max=\"2\" onChange={deltaChange}/> </label>\n        </Form.Field>\n        <Form.Field>\n            <label> Number of clusters  <input type=\"number\" value={n_clust}  step=\"1\" min=\"2\" max=\"100\" onChange={clustChange}/> </label>\n        </Form.Field>    \n        <Form.Field>\n            <label>  Maximal number of possible peak positions to detect (better put higher value,\n        the output is limited to the number of peaks the algorithm could find)  <input type=\"number\" value={n_peaks}  step=\"1\" min=\"5\" max=\"200\" onChange={peakChange}/> </label>   \n        </Form.Field>\n        <Form.Field>\n            <label>  Minimal distance in pixels between peaks  <input type=\"number\" value={min_dist}  step=\"1\" min=\"0\" max=\"100\" onChange={min_distChange}/>  </label>  \n        </Form.Field>\n    </Form>\n    </Accordion.Content>\n    </Accordion>\n    return (\n        <AnalysisLayoutTwoRes\n            title=\"Region clustering\" subtitle={subtitle}\n            left={<>\n                <ResultList\n                    extraHandles={frameViewHandles} extraWidgets={frameViewWidgets}\n                    jobIndex={0} analysis={analysis.id}\n                    width={imageWidth} height={imageHeight}\n                    selectors={frameModeSelector}\n                />\n            </>}\n            mid={<>\n                <ResultList\n                    jobIndex={1} analysis={analysis.id}\n                    width={scanWidth} height={scanHeight}\n                    extraHandles={rectRoiHandles}\n                    extraWidgets={rectRoiWidgets}\n                />\n            </>}\n\n            right={<>\n                <ResultList\n                    jobIndex={2} analysis={analysis.id}\n                    width={scanWidth} height={scanHeight}\n                    extraHandles={resultHandles}\n                    extraWidgets={resultWidgets}\n                />\n            </>}\n            toolbar={toolbar}\n            clustparams= {clustparams}\n\n            title1=\"Peaks inside the ring will be considered\"\n            title2=\"Choose specimen region\"\n            title3=\"Clustering result\"\n\n        />\n    );\n\n}\n\n\nexport default ClustAnalysis;","import * as React from \"react\";\nimport { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport ResultList from \"../../job/components/ResultList\";\nimport { AnalysisTypes } from \"../../messages\";\nimport { cbToRadius, inRectConstraint, keepOnCY } from \"../../widgets/constraints\";\nimport Disk from \"../../widgets/Disk\";\nimport DraggableHandle from \"../../widgets/DraggableHandle\";\nimport { HandleRenderFunction } from \"../../widgets/types\";\nimport * as analysisActions from \"../actions\";\nimport { AnalysisProps } from \"../types\";\nimport AnalysisLayoutTwoCol from \"./AnalysisLayoutTwoCol\";\nimport useDefaultFrameView from \"./DefaultFrameView\";\nimport Toolbar from \"./Toolbar\";\n\n\nconst DiskMaskAnalysis: React.SFC<AnalysisProps> = ({ analysis, dataset }) => {\n    const { shape } = dataset.params;\n    const [scanHeight, scanWidth, imageHeight, imageWidth] = shape;\n\n    const minLength = Math.min(imageWidth, imageHeight);\n    const [cx, setCx] = useState(imageWidth / 2);\n    const [cy, setCy] = useState(imageHeight / 2);\n    const [r, setR] = useState(minLength / 4);\n\n    const handleCenterChange = (newCx: number, newCy: number) => {\n        setCx(newCx);\n        setCy(newCy);\n    };\n    const handleRChange = setR;\n\n    const rHandle = {\n        x: cx - r,\n        y: cy,\n    }\n\n    const frameViewHandles: HandleRenderFunction = (handleDragStart, handleDrop) => (<>\n        <DraggableHandle x={cx} y={cy}\n            imageWidth={imageWidth}\n            onDragMove={handleCenterChange}\n            parentOnDragStart={handleDragStart}\n            parentOnDrop={handleDrop}\n            constraint={inRectConstraint(imageWidth, imageHeight)} />\n        <DraggableHandle x={rHandle.x} y={rHandle.y}\n            imageWidth={imageWidth}\n            onDragMove={cbToRadius(cx, cy, handleRChange)}\n            parentOnDragStart={handleDragStart}\n            parentOnDrop={handleDrop}\n            constraint={keepOnCY(cy)} />\n    </>);\n\n    const frameViewWidgets = (\n        <Disk cx={cx} cy={cy} r={r}\n            imageWidth={imageWidth} imageHeight={imageHeight}\n        />\n    );\n\n    const dispatch = useDispatch();\n\n    const runAnalysis = () => {\n        dispatch(analysisActions.Actions.run(analysis.id, 1, {\n            type: AnalysisTypes.APPLY_DISK_MASK,\n            parameters: {\n                shape: \"disk\",\n                cx, cy, r\n            }\n        }));\n    };\n\n    const {\n        frameViewTitle, frameModeSelector,\n        handles: resultHandles, widgets: resultWidgets\n    } = useDefaultFrameView({\n        scanWidth,\n        scanHeight,\n        analysisId: analysis.id,\n    })\n\n    const subtitle = <>{frameViewTitle} Disk: center=(x={cx.toFixed(2)}, y={cy.toFixed(2)}), r={r.toFixed(2)}</>;\n\n    const toolbar = <Toolbar analysis={analysis} onApply={runAnalysis} busyIdxs={[1]} />\n\n    return (\n        <AnalysisLayoutTwoCol\n            title=\"Disk analysis\" subtitle={subtitle}\n            left={<>\n                <ResultList\n                    extraHandles={frameViewHandles} extraWidgets={frameViewWidgets}\n                    jobIndex={0} analysis={analysis.id}\n                    width={imageWidth} height={imageHeight}\n                    selectors={frameModeSelector}\n                />\n            </>}\n            right={<>\n                <ResultList\n                    jobIndex={1} analysis={analysis.id}\n                    width={scanWidth} height={scanHeight}\n                    extraHandles={resultHandles}\n                    extraWidgets={resultWidgets}\n                />\n            </>}\n            toolbar={toolbar}\n        />\n    );\n}\n\nexport default DiskMaskAnalysis;","import * as React from \"react\";\nimport { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { defaultDebounce } from \"../../helpers\";\nimport ResultList from \"../../job/components/ResultList\";\nimport { AnalysisTypes } from \"../../messages\";\nimport { cbToRadius, inRectConstraint, riConstraint, roConstraints } from \"../../widgets/constraints\";\nimport DraggableHandle from \"../../widgets/DraggableHandle\";\nimport Ring from \"../../widgets/Ring\";\nimport { HandleRenderFunction } from \"../../widgets/types\";\nimport * as analysisActions from \"../actions\";\nimport { AnalysisProps } from \"../types\";\nimport AnalysisLayoutTwoCol from \"./AnalysisLayoutTwoCol\";\nimport useDefaultFrameView from \"./DefaultFrameView\";\nimport Toolbar from \"./Toolbar\";\n\nconst FEMAnalysis: React.SFC<AnalysisProps> = ({ analysis, dataset }) => {\n    const { shape } = dataset.params;\n    const [scanHeight, scanWidth, imageHeight, imageWidth] = shape;\n    const minLength = Math.min(imageWidth, imageHeight);\n\n    const [cx, setCx] = useState(imageWidth / 2);\n    const [cy, setCy] = useState(imageHeight / 2);\n    const [ri, setRi] = useState(minLength / 4);\n    const [ro, setRo] = useState(minLength / 2);\n\n    const riHandle = {\n        x: cx - ri,\n        y: cy,\n    }\n    const roHandle = {\n        x: cx - ro,\n        y: cy,\n    }\n\n    const handleCenterChange = defaultDebounce((newCx: number, newCy: number) => {\n        setCx(newCx);\n        setCy(newCy);\n    });\n    const handleRIChange = defaultDebounce(setRi);\n    const handleROChange = defaultDebounce(setRo);\n\n    const frameViewHandles: HandleRenderFunction = (handleDragStart, handleDrop) => (<>\n        <DraggableHandle x={cx} y={cy}\n            imageWidth={imageWidth}\n            onDragMove={handleCenterChange}\n            parentOnDrop={handleDrop}\n            parentOnDragStart={handleDragStart}\n            constraint={inRectConstraint(imageWidth, imageHeight)} />\n        <DraggableHandle x={roHandle.x} y={roHandle.y}\n            imageWidth={imageWidth}\n            onDragMove={cbToRadius(cx, cy, handleROChange)}\n            parentOnDrop={handleDrop}\n            parentOnDragStart={handleDragStart}\n            constraint={roConstraints(riHandle.x, cy)} />\n        <DraggableHandle x={riHandle.x} y={riHandle.y}\n            imageWidth={imageWidth}\n            parentOnDrop={handleDrop}\n            parentOnDragStart={handleDragStart}\n            onDragMove={cbToRadius(cx, cy, handleRIChange)}\n            constraint={riConstraint(roHandle.x, cy)} />\n    </>);\n\n    const frameViewWidgets = (\n        <Ring cx={cx} cy={cy} ri={ri} ro={ro}\n            imageWidth={imageWidth} />\n    )\n\n    const dispatch = useDispatch();\n\n    const runAnalysis = () => {\n        dispatch(analysisActions.Actions.run(analysis.id, 1, {\n            type: AnalysisTypes.FEM,\n            parameters: {\n                shape: \"ring\",\n                cx, cy, ri, ro,\n            }\n        }));\n    };\n\n    const {\n        frameViewTitle, frameModeSelector,\n        handles: resultHandles,\n        widgets: resultWidgets,\n    } = useDefaultFrameView({\n        scanWidth,\n        scanHeight,\n        analysisId: analysis.id,\n    })\n\n    const subtitle = (\n        <>{frameViewTitle} Ring: center=(x={cx.toFixed(2)}, y={cy.toFixed(2)}), ri={ri.toFixed(2)}, ro={ro.toFixed(2)}</>\n    )\n\n    const toolbar = <Toolbar analysis={analysis} onApply={runAnalysis} busyIdxs={[1]} />\n\n    return (\n        <AnalysisLayoutTwoCol\n            title=\"Fluctuation EM (SD over Ring analysis)\" subtitle={subtitle}\n            left={<>\n                <ResultList\n                    extraHandles={frameViewHandles} extraWidgets={frameViewWidgets}\n                    jobIndex={0} analysis={analysis.id}\n                    width={imageWidth} height={imageHeight}\n                    selectors={frameModeSelector}\n                />\n            </>}\n            right={<>\n                <ResultList\n                    jobIndex={1} analysis={analysis.id}\n                    width={scanWidth} height={scanHeight}\n                    extraHandles={resultHandles}\n                    extraWidgets={resultWidgets}\n                />\n            </>}\n            toolbar={toolbar}\n        />\n    );\n}\n\nexport default FEMAnalysis;","import * as React from \"react\";\nimport { Grid, Header, Icon, Segment } from \"semantic-ui-react\";\n\ninterface AnalysisLayoutThreeColProps {\n    title: string,\n    subtitle: React.ReactNode,\n    left: React.ReactNode,\n    mid: React.ReactNode,\n    right: React.ReactNode,\n    toolbar?: React.ReactNode,\n    title1: string,\n    title2: React.ReactNode,\n    title3:string,\n\n}\n\ntype MergedProps = AnalysisLayoutThreeColProps;\n\nconst AnalysisLayoutThreeCol: React.SFC<MergedProps> = ({\n    title, subtitle,\n    left, mid, right,\n    toolbar,title1, title2, title3\n}) => {\n// tslint:disable-next-line: no-console\n    \n\n    // handleChange({target: {checked: true}})\n\n\n    \n\n    return (\n        <>\n            <Header as='h3' attached=\"top\">\n                <Icon name=\"cog\" />\n                <Header.Content>{title}</Header.Content>\n            </Header>\n            <Segment attached={true}>\n                <Grid columns={3}>\n                    <Grid.Row>\n                        <Grid.Column width={5}>\n                            <p>{title1}</p>\n                        </Grid.Column> \n\n                        <Grid.Column width={5}>\n                            <p>{title2}</p>   \n\n                        </Grid.Column>\n\n                        <Grid.Column width={6}>\n                            <p>{title3}</p>\n                        </Grid.Column>    \n                    </Grid.Row>\n\n                    <Grid.Row>\n                        <Grid.Column width={5}>\n                            {left}\n                        </Grid.Column>\n\n                        <Grid.Column width={5}>\n                            {mid}\n                        </Grid.Column>\n\n                        <Grid.Column width={6}>\n                            {right}\n                        </Grid.Column>\n\n                    </Grid.Row>\n\n                    <Grid.Row>\n                        <Grid.Column width={10}>\n\n                            <p>{subtitle}</p>\n                        </Grid.Column>\n\n                        <Grid.Column width={6}>\n\n                        </Grid.Column>\n\n                    </Grid.Row>\n                </Grid>\n            </Segment>\n            {toolbar}\n        </>\n    )\n}\n\nexport default AnalysisLayoutThreeCol","import React from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { AnalysisTypes } from \"../../messages\";\nimport { inRectConstraint } from \"../../widgets/constraints\";\nimport DraggableHandle from \"../../widgets/DraggableHandle\";\nimport { HandleRenderFunction } from \"../../widgets/types\";\nimport * as analysisActions from \"../actions\";\n\nconst useFFTFramePicker = ({\n    enabled, scanWidth, scanHeight, jobIndex, analysisId, cx, cy, real_rad, real_centerx, real_centery, setCx, setCy\n}: {\n    enabled: boolean, scanWidth: number, scanHeight: number,\n    jobIndex: number, analysisId: string,\n    cx: number, cy: number, setCx: (newCx: number) => void, setCy: (newCy: number) => void,\n    real_rad: number | null, real_centerx: number | null, real_centery: number | null\n\n}) => {\n\n    const dispatch = useDispatch();\n\n    React.useEffect(() => {\n        if (enabled) {\n            dispatch(analysisActions.Actions.run(analysisId, jobIndex, {\n                type: AnalysisTypes.PICK_FFT_FRAME,\n                parameters: { x: cx, y: cy, real_rad, real_centerx, real_centery },\n            }))\n\n        }\n    }, [analysisId, cx, cy, enabled, jobIndex, real_rad, real_centerx, real_centery]);\n\n    const onPickChange = (pickX: number, pickY: number) => {\n        const newX = Math.round(pickX);\n        const newY = Math.round(pickY);\n        if (cx === newX && cy === newY) {\n            return;\n        }\n        setCx(newX);\n        setCy(newY);\n    }\n\n    const renderPickHandle: HandleRenderFunction = (onDragStart, onDrop) => (\n        <DraggableHandle x={cx} y={cy} withCross={true}\n            imageWidth={scanWidth}\n            onDragMove={onPickChange}\n            parentOnDragStart={onDragStart}\n            parentOnDrop={onDrop}\n            constraint={inRectConstraint(scanWidth, scanHeight)} />\n    )\n\n    return { coords: { cx, cy }, handles: renderPickHandle };\n}\n\nexport default useFFTFramePicker;","import React from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { AnalysisTypes } from \"../../messages\";\nimport * as analysisActions from \"../actions\";\n\nconst useFFTSumFrames = ({\n    enabled, jobIndex, analysisId, real_rad, real_centerx, real_centery\n}: {\n    enabled: boolean, jobIndex: number, analysisId: string, real_rad:number|null, real_centerx:number|null, real_centery:number|null\n}) => {\n    const dispatch = useDispatch();\n\n    React.useEffect(() => {\n        if (enabled) {\n            dispatch(analysisActions.Actions.run(analysisId, jobIndex, {\n                type: AnalysisTypes.FFTSUM_FRAMES,\n                parameters: {real_rad, real_centerx, real_centery},\n            }));\n        }\n    }, [analysisId, enabled, jobIndex, real_rad, real_centerx, real_centery]);\n};\n\nexport default useFFTSumFrames;\n","import * as React from \"react\";\nimport { useState } from \"react\";\nimport { AnalysisTypes } from \"../../messages\";\nimport { HandleRenderFunction } from \"../../widgets/types\";\nimport useFFTFramePicker from \"./FFTFramePicker\";\nimport useFFTSumFrames from \"./FFTSumFrames\";\nimport useFramePicker from \"./FramePicker\";\nimport ModeSelector from \"./ModeSelector\";\nimport { useRoiPicker } from \"./RoiPicker\";\n\nconst useFFTFrameView = ({\n    scanWidth, scanHeight, analysisId, real_rad, real_centerx, real_centery\n}: {\n    scanWidth: number, scanHeight: number,\n    analysisId: string, real_rad:number|null, real_centerx:number|null, real_centery:number|null\n}) => {\n    const availableModes = [\n\n        {\n            text: \"Pick\",\n            value: AnalysisTypes.PICK_FRAME,\n        },\n\n        {\n            text: \"Average\",\n            value: AnalysisTypes.SUM_FRAMES,\n        },\n    ];\n\n    const [frameMode, setMode] = useState(AnalysisTypes.SUM_FRAMES);\n\n    const frameModeSelector = <ModeSelector modes={availableModes} currentMode={frameMode} onModeChange={setMode} label=\"Mode\"/>\n\n    const [cx, setCx] = React.useState(Math.round(scanWidth / 2));\n    const [cy, setCy] = React.useState(Math.round(scanHeight / 2));\n\n    const { coords: pickCoords, handles: pickHandles } = useFramePicker({\n        enabled: frameMode === AnalysisTypes.PICK_FRAME,\n        scanWidth, scanHeight,\n        jobIndex: 1,\n        analysisId,\n        cx, cy, setCx, setCy\n    });\n    \n    useFFTFramePicker({\n        enabled: frameMode === AnalysisTypes.PICK_FRAME,\n        scanWidth, scanHeight,\n        jobIndex: 0,\n        analysisId,\n        cx, cy, setCx, setCy,real_rad, real_centerx, real_centery\n    });\n    \n\n    useRoiPicker({\n        enabled: frameMode === AnalysisTypes.SUM_FRAMES,\n        jobIndex: 1,\n        analysisId,\n        scanWidth, scanHeight,\n        roiParameters: {roi:{}},\n        analysis: AnalysisTypes.SUM_FRAMES,\n    })\n    useFFTSumFrames({\n        enabled: frameMode === AnalysisTypes.SUM_FRAMES,\n        jobIndex: 0,\n        analysisId,\n        real_rad,\n        real_centerx,\n        real_centery\n    })\n\n    const frameViewTitle = (\n        frameMode !== AnalysisTypes.PICK_FRAME ? null : <>Pick: x={pickCoords.cx}, y={pickCoords.cy} &emsp;</>\n    )\n\n\n\n    const nullHandles: HandleRenderFunction = (onDragStart, onDrop) => null\n\n    return {\n        frameViewTitle,\n        handles: frameMode !== AnalysisTypes.PICK_FRAME ? nullHandles : pickHandles,\n\n        frameModeSelector,\n    }\n}\n\nexport default useFFTFrameView;","import * as React from \"react\";\nimport { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { defaultDebounce } from \"../../helpers\";\nimport ResultList from \"../../job/components/ResultList\";\nimport { AnalysisTypes } from \"../../messages\";\nimport { cbToRadius, inRectConstraint, keepOnCY, riConstraint, roConstraints } from \"../../widgets/constraints\";\nimport Disk from \"../../widgets/Disk\";\nimport DraggableHandle from \"../../widgets/DraggableHandle\";\nimport Ring from \"../../widgets/Ring\";\nimport { HandleRenderFunction } from \"../../widgets/types\";\nimport * as analysisActions from \"../actions\";\nimport { AnalysisProps } from \"../types\";\nimport AnalysisLayoutThreeCol from \"./AnalysisLayoutThreeCol\";\nimport useFFTFrameView from \"./FFTFrameView\";\nimport Toolbar from \"./Toolbar\";\n\n\n\n\nconst FFTAnalysis: React.SFC<AnalysisProps> = ({ analysis, dataset }) => {\n    const { shape } = dataset.params;\n    const [scanHeight, scanWidth, imageHeight, imageWidth] = shape;\n    const minLength = Math.min(imageWidth, imageHeight);\n\n    const cx = imageWidth / 2;\n    const cy = imageHeight / 2;\n    const [rad_in, setRi] = useState(minLength / 4);\n    const [rad_out, setRo] = useState(minLength / 2);\n\n    const dispatch = useDispatch();\n    const riHandle = {\n        x: cx - rad_in,\n        y: cy,\n    }\n    const roHandle = {\n        x: cx - rad_out,\n        y: cy,\n    }\n\n\n    const handleRIChange = defaultDebounce(setRi);\n    const handleROChange = defaultDebounce(setRo);\n\n    const frameViewHandlesfft: HandleRenderFunction = (handleDragStart, handleDrop) => (<>\n\n        <DraggableHandle x={roHandle.x} y={roHandle.y}\n            imageWidth={imageWidth}\n            onDragMove={cbToRadius(cx, cy, handleROChange)}\n            parentOnDrop={handleDrop}\n            parentOnDragStart={handleDragStart}\n            constraint={roConstraints(riHandle.x, cy)} />\n        <DraggableHandle x={riHandle.x} y={riHandle.y}\n            imageWidth={imageWidth}\n            parentOnDrop={handleDrop}\n            parentOnDragStart={handleDragStart}\n            onDragMove={cbToRadius(cx, cy, handleRIChange)}\n            constraint={riConstraint(roHandle.x, cy)} />\n    </>);\n\n    const frameViewWidgetsfft = (\n        <Ring cx={cx} cy={cy} ri={rad_in} ro={rad_out}\n            imageWidth={imageWidth} />\n    )\n\n    const [check, setCheck] = React.useState(true);\n\n    const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setCheck(event.target.checked);\n    }\n\n\n\n    const [real_centerx, setCx] = useState(imageWidth / 2);\n    const [real_centery, setCy] = useState(imageHeight / 2);\n    const [real_rad, setR] = useState(minLength / 4);\n\n    const handleCenterChange = defaultDebounce((newCx: number, newCy: number) => {\n        setCx(newCx);\n        setCy(newCy);\n    });\n    const handleRChange = defaultDebounce(setR);\n\n    const rHandle = {\n        x: real_centerx - real_rad,\n        y: real_centery,\n    }\n\n    const frameViewHandlesreal: HandleRenderFunction = (handleDragStart, handleDrop) => (<>\n        <DraggableHandle x={real_centerx} y={real_centery}\n            imageWidth={imageWidth}\n            onDragMove={handleCenterChange}\n            parentOnDragStart={handleDragStart}\n            parentOnDrop={handleDrop}\n            constraint={inRectConstraint(imageWidth, imageHeight)} />\n        <DraggableHandle x={rHandle.x} y={rHandle.y}\n            imageWidth={imageWidth}\n            onDragMove={cbToRadius(real_centerx, real_centery, handleRChange)}\n            parentOnDragStart={handleDragStart}\n            parentOnDrop={handleDrop}\n            constraint={keepOnCY(real_centery)} />\n    </>);\n\n    const frameViewWidgetsreal = (\n        <Disk cx={real_centerx} cy={real_centery} r={real_rad}\n            imageWidth={imageWidth} imageHeight={imageHeight}\n        />\n    );\n\n    const runAnalysis = () => {\n        dispatch(analysisActions.Actions.run(analysis.id, 2, {\n            type: AnalysisTypes.APPLY_FFT_MASK,\n            parameters: {\n                rad_in,\n                rad_out,\n                real_rad: check ? real_rad : null,\n                real_centerx: check ? real_centerx : null,\n                real_centery: check ? real_centery : null\n\n            }\n        }));\n    };\n\n    const { frameViewTitle, frameModeSelector, handles: resultHandles } = useFFTFrameView({\n        scanWidth,\n        scanHeight,\n        analysisId: analysis.id,\n        real_rad: check ? real_rad : null,\n        real_centerx: check ? real_centerx : null,\n        real_centery: check ? real_centery : null\n    })\n\n\n\n    const toolbar = <Toolbar analysis={analysis} onApply={runAnalysis} busyIdxs={[2]} />\n\n\n    let subtitle;\n    let mid: React.ReactNode;\n    if (check) {\n        mid = (<>\n            <ResultList\n                extraHandles={frameViewHandlesreal} extraWidgets={frameViewWidgetsreal}\n                jobIndex={1} analysis={analysis.id}\n                width={imageWidth} height={imageHeight}\n                selectors={frameModeSelector}\n            />\n        </>)\n        subtitle = (\n            <>{frameViewTitle} real_rad={rad_in.toFixed(2)}, real_center=(x={real_centerx.toFixed(2)}, y={real_centery.toFixed(2)}), fourier_rad_in={rad_in.toFixed(2)}, fourier_rad_out={rad_out.toFixed(2)}</>\n        )\n    }\n\n    else {\n        mid = (<>\n            <ResultList\n                jobIndex={1} analysis={analysis.id}\n                width={imageWidth} height={imageHeight}\n                selectors={frameModeSelector}\n            />\n        </>)\n        subtitle = (\n            <>{frameViewTitle} fourier_rad_in={rad_in.toFixed(2)}, fourier_rad_out={rad_out.toFixed(2)}</>\n        )\n    }\n\n\n    return (\n        <AnalysisLayoutThreeCol\n            title=\"FFT analysis\" subtitle={subtitle}\n            left={<>\n                <ResultList\n                    extraHandles={frameViewHandlesfft} extraWidgets={frameViewWidgetsfft}\n                    jobIndex={0} analysis={analysis.id}\n                    width={imageWidth} height={imageHeight}\n                />\n            </>}\n            mid={mid}\n\n            right={<>\n                <ResultList\n                    jobIndex={2} analysis={analysis.id}\n                    width={scanWidth} height={scanHeight}\n                    extraHandles={resultHandles}\n                />\n            </>}\n            toolbar={toolbar}\n\n            title2={<><label> Masking out of zero order diffraction peak <input type=\"checkbox\" name=\"check\" onChange={handleChange} checked={check} /> </label>\n            </>}\n            title1=\"Masking of intergation region in Fourier space\"\n            title3=\"Result of analysis\"\n\n        />\n    );\n}\n\n\nexport default FFTAnalysis;","import * as React from \"react\";\nimport { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { defaultDebounce } from \"../../helpers\";\nimport ResultList from \"../../job/components/ResultList\";\nimport { AnalysisTypes } from \"../../messages\";\nimport { inRectConstraint } from \"../../widgets/constraints\";\nimport DraggableHandle from \"../../widgets/DraggableHandle\";\nimport { HandleRenderFunction } from \"../../widgets/types\";\nimport * as analysisActions from \"../actions\";\nimport { AnalysisProps } from \"../types\";\nimport AnalysisLayoutTwoCol from \"./AnalysisLayoutTwoCol\";\nimport useDefaultFrameView from \"./DefaultFrameView\";\nimport Toolbar from \"./Toolbar\";\n\n\nconst PointSelectionAnalysis: React.SFC<AnalysisProps> = ({ analysis, dataset, }) => {\n    const { shape } = dataset.params;\n    const [scanHeight, scanWidth, imageHeight, imageWidth] = shape;\n\n    const [cx, setCx] = useState(imageWidth / 2);\n    const [cy, setCy] = useState(imageHeight / 2);\n    const handleCenterChange = defaultDebounce((newCx: number, newCy: number) => {\n        setCx(newCx);\n        setCy(newCy);\n    });\n\n    const frameViewHandles: HandleRenderFunction = (handleDragStart, handleDrop) => (<>\n        <DraggableHandle x={cx} y={cy} withCross={true}\n            onDragMove={handleCenterChange}\n            imageWidth={imageWidth}\n            parentOnDragStart={handleDragStart}\n            parentOnDrop={handleDrop}\n            constraint={inRectConstraint(imageWidth, imageHeight)} />\n    </>);\n\n    const {\n        frameViewTitle, frameModeSelector,\n        handles: resultHandles,\n        widgets: resultWidgets,\n    } = useDefaultFrameView({\n        scanWidth,\n        scanHeight,\n        analysisId: analysis.id,\n    })\n\n    const subtitle = (\n        <>{frameViewTitle} Point: center=(x={cx.toFixed(2)}, y={cy.toFixed(2)})</>\n    )\n\n    const dispatch = useDispatch();\n\n    const runAnalysis = () => {\n        dispatch(analysisActions.Actions.run(analysis.id, 1, {\n            type: AnalysisTypes.APPLY_POINT_SELECTOR,\n            parameters: {\n                shape: \"point\",\n                cx,\n                cy,\n            }\n        }));\n    };\n\n    const toolbar = <Toolbar analysis={analysis} onApply={runAnalysis} busyIdxs={[1]} />\n\n    return (\n        <AnalysisLayoutTwoCol\n            title=\"Point analysis\" subtitle={subtitle}\n            left={<>\n                <ResultList\n                    extraHandles={frameViewHandles}\n                    jobIndex={0} analysis={analysis.id}\n                    width={imageWidth} height={imageHeight}\n                    selectors={frameModeSelector}\n                />\n            </>}\n            right={<>\n                <ResultList\n                    jobIndex={1} analysis={analysis.id}\n                    width={scanWidth} height={scanHeight}\n                    extraHandles={resultHandles}\n                    extraWidgets={resultWidgets}\n                />\n            </>}\n            toolbar={toolbar}\n        />\n    );\n}\n\nexport default PointSelectionAnalysis;","import * as React from \"react\";\nimport { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { defaultDebounce } from \"../../helpers\";\nimport ResultList from \"../../job/components/ResultList\";\nimport { AnalysisTypes } from \"../../messages\";\nimport { cbToRadius, inRectConstraint, riConstraint, roConstraints } from \"../../widgets/constraints\";\nimport DraggableHandle from \"../../widgets/DraggableHandle\";\nimport Ring from \"../../widgets/Ring\";\nimport { HandleRenderFunction } from \"../../widgets/types\";\nimport * as analysisActions from \"../actions\";\nimport { AnalysisProps } from \"../types\";\nimport AnalysisLayoutTwoCol from \"./AnalysisLayoutTwoCol\";\nimport useDefaultFrameView from \"./DefaultFrameView\";\nimport Toolbar from \"./Toolbar\";\n\nconst RadialFourierAnalysis: React.SFC<AnalysisProps> = ({ analysis, dataset }) => {\n    const { shape } = dataset.params;\n    const [scanHeight, scanWidth, imageHeight, imageWidth] = shape;\n\n    const minLength = Math.min(imageWidth, imageHeight);\n    const [cx, setCx] = useState(imageWidth / 2);\n    const [cy, setCy] = useState(imageHeight / 2);\n    const [ri, setRi] = useState(minLength / 4);\n    const [ro, setRo] = useState(minLength / 2);\n    const [nBins] = useState(1);\n    const [maxOrder] = useState(8);\n\n    const riHandle = {\n        x: cx - ri,\n        y: cy,\n    }\n    const roHandle = {\n        x: cx - ro,\n        y: cy,\n    }\n\n    const handleCenterChange = defaultDebounce((newCx: number, newCy: number) => {\n        setCx(newCx);\n        setCy(newCy);\n    });\n    const handleRIChange = defaultDebounce(setRi);\n    const handleROChange = defaultDebounce(setRo);\n\n    const frameViewHandles: HandleRenderFunction = (handleDragStart, handleDrop) => (<>\n        <DraggableHandle x={cx} y={cy}\n            imageWidth={imageWidth}\n            onDragMove={handleCenterChange}\n            parentOnDrop={handleDrop}\n            parentOnDragStart={handleDragStart}\n            constraint={inRectConstraint(imageWidth, imageHeight)} />\n        <DraggableHandle x={roHandle.x} y={roHandle.y}\n            imageWidth={imageWidth}\n            onDragMove={cbToRadius(cx, cy, handleROChange)}\n            parentOnDrop={handleDrop}\n            parentOnDragStart={handleDragStart}\n            constraint={roConstraints(riHandle.x, cy)} />\n        <DraggableHandle x={riHandle.x} y={riHandle.y}\n            imageWidth={imageWidth}\n            parentOnDrop={handleDrop}\n            parentOnDragStart={handleDragStart}\n            onDragMove={cbToRadius(cx, cy, handleRIChange)}\n            constraint={riConstraint(roHandle.x, cy)} />\n    </>);\n\n    const frameViewWidgets = (\n        <Ring cx={cx} cy={cy} ri={ri} ro={ro}\n            imageWidth={imageWidth} />\n    )\n\n    const {\n        frameViewTitle, frameModeSelector,\n        handles: resultHandles,\n        widgets: resultWidgets,\n    } = useDefaultFrameView({\n        scanWidth,\n        scanHeight,\n        analysisId: analysis.id,\n    })\n\n    const subtitle = (\n        <>{frameViewTitle} Ring: center=(x={cx.toFixed(2)}, y={cy.toFixed(2)}), ri={ri.toFixed(2)}, ro={ro.toFixed(2)}</>\n    )\n\n    const dispatch = useDispatch();\n\n    const runAnalysis = () => {\n        dispatch(analysisActions.Actions.run(analysis.id, 1, {\n            type: AnalysisTypes.RADIAL_FOURIER,\n            parameters: {\n                shape: \"radial_fourier\",\n                cx, cy, ri, ro,\n                n_bins: nBins,\n                max_order: maxOrder,\n            }\n        }));\n    };\n\n    const toolbar = <Toolbar analysis={analysis} onApply={runAnalysis} busyIdxs={[1]} />\n\n    return (\n        <AnalysisLayoutTwoCol\n            title=\"Radial Fourier analysis\" subtitle={subtitle}\n            left={<>\n                <ResultList\n                    extraHandles={frameViewHandles} extraWidgets={frameViewWidgets}\n                    jobIndex={0} analysis={analysis.id}\n                    width={imageWidth} height={imageHeight}\n                    selectors={frameModeSelector}\n                />\n            </>}\n            right={<>\n                <ResultList\n                    jobIndex={1} analysis={analysis.id}\n                    width={scanWidth} height={scanHeight}\n                    extraHandles={resultHandles}\n                    extraWidgets={resultWidgets}\n                />\n            </>}\n            toolbar={toolbar}\n        />\n    );\n}\n\nexport default RadialFourierAnalysis;","import * as React from \"react\";\nimport { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { defaultDebounce } from \"../../helpers\";\nimport ResultList from \"../../job/components/ResultList\";\nimport { AnalysisTypes } from \"../../messages\";\nimport { cbToRadius, inRectConstraint, riConstraint, roConstraints } from \"../../widgets/constraints\";\nimport DraggableHandle from \"../../widgets/DraggableHandle\";\nimport Ring from \"../../widgets/Ring\";\nimport { HandleRenderFunction } from \"../../widgets/types\";\nimport * as analysisActions from \"../actions\";\nimport { AnalysisProps } from \"../types\";\nimport AnalysisLayoutTwoCol from \"./AnalysisLayoutTwoCol\";\nimport useDefaultFrameView from \"./DefaultFrameView\";\nimport Toolbar from \"./Toolbar\";\n\nconst RingMaskAnalysis: React.SFC<AnalysisProps> = ({ analysis, dataset }) => {\n    const { shape } = dataset.params;\n    const [scanHeight, scanWidth, imageHeight, imageWidth] = shape;\n    const minLength = Math.min(imageWidth, imageHeight);\n\n    const [cx, setCx] = useState(imageWidth / 2);\n    const [cy, setCy] = useState(imageHeight / 2);\n    const [ri, setRi] = useState(minLength / 4);\n    const [ro, setRo] = useState(minLength / 2);\n\n    const riHandle = {\n        x: cx - ri,\n        y: cy,\n    }\n    const roHandle = {\n        x: cx - ro,\n        y: cy,\n    }\n\n    const handleCenterChange = defaultDebounce((newCx: number, newCy: number) => {\n        setCx(newCx);\n        setCy(newCy);\n    });\n    const handleRIChange = defaultDebounce(setRi);\n    const handleROChange = defaultDebounce(setRo);\n\n    const frameViewHandles: HandleRenderFunction = (handleDragStart, handleDrop) => (<>\n        <DraggableHandle x={cx} y={cy}\n            imageWidth={imageWidth}\n            onDragMove={handleCenterChange}\n            parentOnDrop={handleDrop}\n            parentOnDragStart={handleDragStart}\n            constraint={inRectConstraint(imageWidth, imageHeight)} />\n        <DraggableHandle x={roHandle.x} y={roHandle.y}\n            imageWidth={imageWidth}\n            onDragMove={cbToRadius(cx, cy, handleROChange)}\n            parentOnDrop={handleDrop}\n            parentOnDragStart={handleDragStart}\n            constraint={roConstraints(riHandle.x, cy)} />\n        <DraggableHandle x={riHandle.x} y={riHandle.y}\n            imageWidth={imageWidth}\n            parentOnDrop={handleDrop}\n            parentOnDragStart={handleDragStart}\n            onDragMove={cbToRadius(cx, cy, handleRIChange)}\n            constraint={riConstraint(roHandle.x, cy)} />\n    </>);\n\n    const frameViewWidgets = (\n        <Ring cx={cx} cy={cy} ri={ri} ro={ro}\n            imageWidth={imageWidth} />\n    )\n\n    const dispatch = useDispatch();\n\n    const runAnalysis = () => {\n        dispatch(analysisActions.Actions.run(analysis.id, 1, {\n            type: AnalysisTypes.APPLY_RING_MASK,\n            parameters: {\n                shape: \"ring\",\n                cx, cy, ri, ro,\n            }\n        }));\n    };\n\n    const {\n        frameViewTitle, frameModeSelector,\n        handles: resultHandles,\n        widgets: resultWidgets,\n    } = useDefaultFrameView({\n        scanWidth,\n        scanHeight,\n        analysisId: analysis.id,\n    })\n\n    const subtitle = (\n        <>{frameViewTitle} Ring: center=(x={cx.toFixed(2)}, y={cy.toFixed(2)}), ri={ri.toFixed(2)}, ro={ro.toFixed(2)}</>\n    )\n\n    const toolbar = <Toolbar analysis={analysis} onApply={runAnalysis} busyIdxs={[1]} />\n\n    return (\n        <AnalysisLayoutTwoCol\n            title=\"Ring analysis\" subtitle={subtitle}\n            left={<>\n                <ResultList\n                    extraHandles={frameViewHandles} extraWidgets={frameViewWidgets}\n                    jobIndex={0} analysis={analysis.id}\n                    width={imageWidth} height={imageHeight}\n                    selectors={frameModeSelector}\n                />\n            </>}\n            right={<>\n                <ResultList\n                    jobIndex={1} analysis={analysis.id}\n                    width={scanWidth} height={scanHeight}\n                    extraHandles={resultHandles}\n                    extraWidgets={resultWidgets}\n                />\n            </>}\n            toolbar={toolbar}\n        />\n    );\n}\n\nexport default RingMaskAnalysis;","import { AnalysisTypes, DatasetOpen, PickFrameDetails, SumFramesDetails } from \"../messages\";\nimport CenterOfMassAnalysis from \"./components/CenterOfMassAnalysis\";\nimport ClustAnalysis from \"./components/Clustering\";\nimport DiskMaskAnalysis from \"./components/DiskMaskAnalysis\";\nimport FEM from \"./components/FEM\";\nimport FFTAnalysis from \"./components/FFTAnalysis\";\nimport PointSelectionAnalysis from \"./components/PointSelectionAnalysis\";\nimport RadialFourierAnalysis from \"./components/RadialFourierAnalysis\";\nimport RingMaskAnalysis from \"./components/RingMaskAnalysis\";\n\n\n\nexport type AnalysisStatus = \"busy\" | \"idle\";\n\nexport type JobList = string[];\n\nexport type JobHistory = string[][];\n\nexport type FrameAnalysisDetails = PickFrameDetails | SumFramesDetails;\n\nexport interface Analysis {\n    id: string,\n    dataset: string,\n    jobs: JobList,\n    jobHistory: JobHistory,\n    mainAnalysisType: AnalysisTypes,\n}\n\n\n/**\n * AnalysisProps is the interface you should implement with your Analysis, as a functional component.\n * For example:\n * \n * const MyAnalysis: React.FunctionalComponent<AnalysisProps> = ({ analysis, dataset }) = { ... }\n * \n */\nexport interface AnalysisProps {\n    analysis: AnalysisState,\n    dataset: DatasetOpen,\n}\n\nexport type AnalysisState = Analysis & {\n};\n\ninterface AnalysisMetadataItem {\n    desc: string,\n    title: string,\n    component?: React.FunctionComponent<AnalysisProps>,\n}\n\n/**\n * list of all analyses; those having a component will be available for selection in the UI\n * \n * please fill in a title and description, and reference your component.\n */\nexport const AnalysisMetadata: { [s: string]: AnalysisMetadataItem } = {\n    [AnalysisTypes.APPLY_RING_MASK]: {\n        desc: \"Apply a ring mask with center cx, cy; inner radius ri, outer radius ro\",\n        title: \"Ring\",\n        component: RingMaskAnalysis,\n    },\n    [AnalysisTypes.APPLY_DISK_MASK]: {\n        desc: \"Apply a disk mask with center cx, cy; radius r\",\n        title: \"Disk\",\n        component: DiskMaskAnalysis,\n    },\n\n    [AnalysisTypes.FEM]: {\n        desc: \"Apply a ring mask with center cx, cy; radius r\",\n        title: \"FEM (SD over Ring)\",\n        component: FEM,\n    },\n\n    \n    [AnalysisTypes.CENTER_OF_MASS]: {\n        desc: \"Compute the center of mass of all diffraction images\",\n        title: \"Center of mass\",\n        component: CenterOfMassAnalysis,\n    },\n    [AnalysisTypes.APPLY_POINT_SELECTOR]: {\n        desc: \"Create an image from a single pixel selected in the detector\",\n        title: \"Point selection\",\n        component: PointSelectionAnalysis,\n    },\n    [AnalysisTypes.SUM_FRAMES]: {\n        desc: \"Create a sum of all detector frames\",\n        title: \"Sum all frames\",\n    },\n\n    [AnalysisTypes.SD_FRAMES]: {\n        desc: \"Create a SD of all detector frames\",\n        title: \"SD all frames\",\n    },\n\n    [AnalysisTypes.PICK_FRAME]: {\n        desc: \"Pick a single frame\",\n        title: \"Pick frame\",\n    },\n\n    [AnalysisTypes.PICK_FFT_FRAME]: {\n        desc: \"Pick a single frame\",\n        title: \"Pick frame\",\n    },\n\n    [AnalysisTypes.APPLY_FFT_MASK]: {\n        desc: \"Apply a ring mask with inner radius fourier_rad_in and outer radius fourier_rad_out in Fourier space\",\n        title: \"FFT analysis\",\n        component: FFTAnalysis\n    },\n    \n    [AnalysisTypes.FFTSUM_FRAMES]: {\n        desc: \"Fourier transform of sum of all detector frames\",\n        title: \"FFT of Sum all frames\",\n    },\n\n    [AnalysisTypes.RADIAL_FOURIER]: {\n        desc: \"Compute a radial Fourier analysis\",\n        title: \"Radial Fourier\",\n        component: RadialFourierAnalysis,\n    },\n\n    [AnalysisTypes.CLUST]: {\n        desc: \"Region clustering based on non-zero order diffraction peaks positions\",\n        title: \"Clustering\",\n        component: ClustAnalysis,\n    },\n\n    [AnalysisTypes.SUM_SIG]: {\n        desc: \"Frame integration\",\n        title: \"Sum\",\n    },\n}","import * as React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { DatasetStatus } from \"../../messages\";\nimport { RootReducer } from \"../../store\";\nimport { AnalysisMetadata, AnalysisState } from \"../types\";\n\ninterface AnalysisDispatcherProps {\n    analysis: AnalysisState,\n}\n\nconst AnalysisDispatcherComponent: React.SFC<AnalysisDispatcherProps> = ({ analysis }) => {\n    const dataset = useSelector((state: RootReducer) => state.datasets.byId[analysis.dataset])\n\n    if (dataset.status !== DatasetStatus.OPEN) {\n        return null;\n    }\n\n    const AnalysisComponent = AnalysisMetadata[analysis.mainAnalysisType].component;\n    if (!AnalysisComponent) {\n        throw new Error(\"unknown analysis type\");\n    }\n\n    return <AnalysisComponent dataset={dataset} analysis={analysis} />;\n}\n\nexport default AnalysisDispatcherComponent;","import * as React from \"react\";\nimport { AnalysisReducerState } from \"../reducers\";\nimport Analysis from \"./Analysis\";\n\ninterface AnalysisProps {\n    analyses: AnalysisReducerState,\n}\n\nconst AnalysisList: React.SFC<AnalysisProps> = ({ analyses }) => {\n    return (<>{\n        analyses.ids.map(analysisId => <Analysis key={analysisId} analysis={analyses.byId[analysisId]} />)\n    }</>);\n}\n\nexport default AnalysisList;","interface IdMap<R> {\n    [s: string]: R\n}\n\nexport interface ById<R> {\n    ids: string[],\n    byId: IdMap<R>,\n};\n\n// TODO: make ById DeepReadonly\n// import { DeepReadonly } from 'utility-types'\n\nexport function updateById<R>(state: ById<R>, id: string, partialRecord: Partial<R>): ById<R> {\n    const newObj = Object.assign({}, state.byId[id], partialRecord);\n    const newById = Object.assign({}, state.byId, { [id]: newObj });\n    return Object.assign({}, state, { byId: newById });\n}\n\nexport function insertById<R>(state: ById<R>, id: string, record: R): ById<R> {\n    const newById = Object.assign({}, state.byId, { [id]: record });\n    const newIds = [...state.ids, id];\n    return { byId: newById, ids: newIds };\n}\n\nexport function constructById<R>(items: R[], key: (k: R) => string): IdMap<R> {\n    const byId = items.reduce((acc, item) => Object.assign(acc, {\n        [key(item)]: item,\n    }), {} as IdMap<R>);\n    return byId;\n}\n\nexport type Predicate<R> = (item: R) => boolean;\n\nexport function filterWithPred<R>(state: ById<R>, pred: Predicate<R>): ById<R> {\n    const ids = state.ids.filter(id => pred(state.byId[id]));\n    const byId: IdMap<R> = ids.reduce((acc, id) => Object.assign(acc, {\n        [id]: state.byId[id],\n    }), {});\n    return {\n        byId,\n        ids,\n    };\n}","import * as React from \"react\";\nimport { Dropdown, DropdownItemProps } from \"semantic-ui-react\";\nimport { getEnumValues } from \"../../helpers\";\nimport { AnalysisTypes } from \"../../messages\";\nimport { AnalysisMetadata } from \"../types\";\n\n\nconst getMetadata = (t: any) => AnalysisMetadata[AnalysisTypes[t]];\nconst analysisTypeKeys = getEnumValues(AnalysisTypes);\nconst analysisTypeOptions = analysisTypeKeys.filter(t => getMetadata(t).component !== undefined).map(t => ({\n    text: getMetadata(t).title,\n    value: AnalysisTypes[t],\n}));\n\ninterface AnalysisSelectProps {\n    onClick: (analysisType: AnalysisTypes) => void,\n    label: string,\n}\n\nconst selectData = (fn: (v: AnalysisTypes) => void) => (e: React.MouseEvent, data: DropdownItemProps) => {\n    return fn(data.value as AnalysisTypes);\n}\n\nconst AnalysisSelect: React.SFC<AnalysisSelectProps> = ({ onClick, label }) => {\n    return (\n        <Dropdown text={label} icon='add' floating={true} labeled={true} button={true} className='icon'>\n            <Dropdown.Menu>\n                <Dropdown.Header content='implemented analyses' />\n                {analysisTypeOptions.map(option => <Dropdown.Item key={option.value} onClick={selectData(onClick)} {...option} />)}\n            </Dropdown.Menu>\n        </Dropdown>\n    );\n}\n\nexport default AnalysisSelect;","import { ActionsUnion, createAction } from '../helpers/actionHelpers';\nimport { DatasetCreateParams, DatasetFormParams, DatasetState } from '../messages';\n\nexport enum ActionTypes {\n    OPEN = 'DATASET_OPEN',\n    CANCEL_OPEN = 'DATASET_CANCEL_OPEN',\n    CREATE = 'DATASET_CREATE',\n    CREATED = 'DATASET_CREATED',\n    ERROR = 'DATASET_ERROR',\n    DELETE = 'DATASET_DELETE',\n    DELETED = 'DATASET_DELETED',\n    DETECT = 'DATASET_DETECT',\n    DETECTED = 'DATASET_DETECTED',\n    DETECT_FAILED = 'DATASET_DETECT_FAILED',\n}\n\nexport const Actions = {\n    open: (path: string, initialParams?: DatasetFormParams) => createAction(ActionTypes.OPEN, { path, initialParams }),\n    cancelOpen: () => createAction(ActionTypes.CANCEL_OPEN),\n    create: (dataset: DatasetCreateParams) => createAction(ActionTypes.CREATE, { dataset }),\n    created: (dataset: DatasetState) => createAction(ActionTypes.CREATED, { dataset }),\n    error: (dataset: string, msg: string, timestamp: number, id: string) => createAction(ActionTypes.ERROR, { dataset, msg, timestamp, id }),\n    delete: (dataset: string) => createAction(ActionTypes.DELETE, { dataset }),\n    deleted: (dataset: string) => createAction(ActionTypes.DELETED, { dataset }),\n    detect: (path: string) => createAction(ActionTypes.DETECT, { path }),\n    detected: (path: string, params: DatasetFormParams) => createAction(ActionTypes.DETECTED, { path, params }),\n    detectFailed: (path: string) => createAction(ActionTypes.DETECT_FAILED, { path }),\n}\n\nexport type Actions = ActionsUnion<typeof Actions>;\n","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport * as analysisActions from \"../../analysis/actions\";\nimport AnalysisSelect from \"../../analysis/components/AnalysisSelect\";\nimport { AnalysisTypes, DatasetState } from \"../../messages\";\n\ninterface DatasetProps {\n    dataset: DatasetState\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch, ownProps: DatasetProps) => {\n    return {\n        handleAddAnalysis: (type: AnalysisTypes) => {\n            dispatch(analysisActions.Actions.create(ownProps.dataset.id, type));\n        },\n    }\n}\ntype MergedProps = DatasetProps & ReturnType<typeof mapDispatchToProps>;\n\nconst AddAnalysis: React.SFC<MergedProps> = ({ handleAddAnalysis }) => {\n    return <AnalysisSelect onClick={handleAddAnalysis} label='Add analysis' />\n}\n\n\nexport default connect(null, mapDispatchToProps)(AddAnalysis);","import * as React from \"react\";\nimport { Table } from \"semantic-ui-react\";\nimport { DatasetState } from \"../../messages\";\n\ninterface DatasetProps {\n    dataset: DatasetState\n}\n\nconst renderParamValue = (value: any) => {\n    if (value instanceof Array) {\n        return `(${value.join(\",\")})`;\n    } else {\n        return value;\n    }\n}\n\nconst renderParams = (params: any) => {\n    return Object.keys(params).map((key: string, idx: number) => {\n        return (\n            <Table.Row key={idx}>\n                <Table.Cell>{key}</Table.Cell>\n                <Table.Cell>{renderParamValue(params[key])}</Table.Cell>\n            </Table.Row>\n        );\n    })\n}\n\n\nconst DatasetParams: React.SFC<DatasetProps> = ({ dataset }) => {\n    return (\n        <Table>\n            <Table.Header>\n                <Table.Row>\n                    <Table.HeaderCell>Parameter</Table.HeaderCell>\n                    <Table.HeaderCell>Value</Table.HeaderCell>\n                </Table.Row>\n            </Table.Header>\n            <Table.Body>\n                {renderParams(dataset.params)}\n            </Table.Body>\n        </Table>\n    );\n}\n\n\nexport default DatasetParams;","import * as React from \"react\";\nimport { Table } from \"semantic-ui-react\";\nimport { DatasetOpen, DiagElemMsg } from \"../../messages\";\nimport DatasetParams from \"./DatasetParams\";\n\ninterface DatasetInfoProps {\n    dataset: DatasetOpen,\n}\n\nconst renderValue = (elem: DiagElemMsg) => {\n    if (elem.value instanceof Array) {\n        return <DiagElems diagnostics={elem.value} />\n    } else {\n        return elem.value;\n    }\n}\n\nconst DiagElem: React.SFC<{ elem: DiagElemMsg }> = ({ elem }) => {\n    return (\n        <Table.Row>\n            <Table.Cell>{elem.name}</Table.Cell>\n            <Table.Cell>{renderValue(elem)}</Table.Cell>\n        </Table.Row>\n    )\n}\n\nconst DiagElems: React.SFC<{ diagnostics: DiagElemMsg[] }> = ({ diagnostics }) => {\n    if (diagnostics.length === 0) {\n        return null;\n    }\n    return (\n        <Table>\n            <Table.Header>\n                <Table.Row>\n                    <Table.HeaderCell>Name</Table.HeaderCell>\n                    <Table.HeaderCell>Value</Table.HeaderCell>\n                </Table.Row>\n            </Table.Header>\n            <Table.Body>\n                {diagnostics.map((elem, idx) => (\n                    <DiagElem elem={elem} key={idx} />\n                ))}\n            </Table.Body>\n        </Table>\n    );\n}\n\nconst DatasetInfo: React.SFC<DatasetInfoProps> = ({ dataset }) => {\n    return (\n        <>\n            <DatasetParams dataset={dataset} />\n            <DiagElems diagnostics={dataset.diagnostics} />\n        </>\n    );\n}\n\nexport default DatasetInfo;","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { Button } from \"semantic-ui-react\";\nimport { DatasetState } from \"../../messages\";\nimport * as datasetActions from \"../actions\";\n\ninterface DatasetProps {\n    dataset: DatasetState,\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch, ownProps: DatasetProps) => {\n    return {\n        handleRemoveDataset: () => {\n            dispatch(datasetActions.Actions.delete(ownProps.dataset.id));\n        }\n    }\n}\n\ntype MergedProps = DatasetProps & ReturnType<typeof mapDispatchToProps>;\n\nconst DatasetToolbar: React.SFC<MergedProps> = ({ dataset, handleRemoveDataset }) => {\n    return (\n        <>\n            <Button icon=\"remove\" labelPosition=\"left\" onClick={handleRemoveDataset} content='Close Dataset' />\n        </>\n    );\n}\n\n\nexport default connect(null, mapDispatchToProps)(DatasetToolbar);","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Header, Icon, Message, Modal, Popup, Segment } from 'semantic-ui-react';\nimport AnalysisList from \"../../analysis/components/AnalysisList\";\nimport { AnalysisState } from \"../../analysis/types\";\nimport { filterWithPred } from \"../../helpers/reducerHelpers\";\nimport { DatasetState, DatasetStatus } from \"../../messages\";\nimport { RootReducer } from \"../../store\";\nimport AddAnalysis from \"./AddAnalysis\";\nimport DatasetInfo from \"./DatasetInfo\";\nimport DatasetToolbar from \"./DatasetToolbar\";\n\ninterface DatasetProps {\n    dataset: DatasetState\n}\n\nconst mapStateToProps = (state: RootReducer, ownProps: DatasetProps) => {\n    const p = (analysis: AnalysisState) => analysis.dataset === ownProps.dataset.id;\n    return {\n        analyses: filterWithPred(state.analyses, p),\n    }\n}\n\ntype MergedProps = DatasetProps & ReturnType<typeof mapStateToProps>;\n\nconst DatasetComponent: React.SFC<MergedProps> = ({ dataset, analyses }) => {\n    const msg = {\n        [DatasetStatus.OPENING]: `Opening dataset ${dataset.params.name}`,\n        [DatasetStatus.DELETING]: `Closing dataset ${dataset.params.name}`,\n    }\n    if (dataset.status === DatasetStatus.OPENING || dataset.status === DatasetStatus.DELETING) {\n        return (\n            <>\n                <Header as=\"h2\" dividing={true}>{dataset.params.name}</Header>\n                <Message icon={true}>\n                    <Icon name='cog' loading={true} />\n                    <Message.Content>\n                        <Message.Header>{msg[dataset.status]}</Message.Header>\n                    </Message.Content>\n                </Message>\n            </>\n        );\n    }\n\n    return (\n        <Segment.Group style={{ marginTop: \"3em\", marginBottom: \"3em\" }}>\n            <Segment.Group horizontal={true}>\n                <Segment>\n                    <Header as=\"h2\">\n                        <Icon name=\"database\" />\n                        <Modal trigger={\n                            <Header.Content>\n                                {dataset.params.name}\n                                {' '}\n                                <Icon name=\"info circle\" size=\"small\" link={true} />\n                            </Header.Content>\n                        }>\n                            <Popup.Header>{dataset.params.type} Dataset {dataset.params.name}</Popup.Header>\n                            <Popup.Content>\n                                <DatasetInfo dataset={dataset} />\n                            </Popup.Content>\n                        </Modal>\n                    </Header>\n                </Segment>\n                <Segment style={{ flexShrink: 1, flexGrow: 0 }}>\n                    <DatasetToolbar dataset={dataset} />\n                </Segment>\n            </Segment.Group>\n            {\n                analyses.ids.length > 0 ? (\n                    <>\n                        <Segment>\n                            <AnalysisList analyses={analyses} />\n                        </Segment>\n                    </>\n                ) : null\n            }\n            <Segment textAlign=\"center\">\n                <AddAnalysis dataset={dataset} />\n            </Segment>\n        </Segment.Group>\n    );\n}\n\nconst DatasetContainer = connect(mapStateToProps)(DatasetComponent);\n\nexport default DatasetContainer;","\nexport function parseNumList(nums: string) {\n    return nums.split(\",\").map(part => +part);\n}\n\nexport function getInitial<T extends object, K extends keyof T, V>(key: K, otherwise: V, values?: T): V | T[K] {\n    if (!values) {\n        return otherwise;\n    }\n    const res = values[key] !== undefined ? values[key] : otherwise;\n    return res;\n}","import { FormikProps, withFormik } from \"formik\";\nimport * as React from \"react\";\nimport { Button, Form } from \"semantic-ui-react\";\nimport { Omit } from \"../../helpers/types\";\nimport { DatasetParamsBLO, DatasetTypes } from \"../../messages\";\nimport { getInitial, parseNumList } from \"../helpers\";\nimport { OpenFormProps } from \"../types\";\n\n// some fields have different types in the form vs. in messages\ntype DatasetParamsBLOForForm = Omit<DatasetParamsBLO,\n    \"path\"\n    | \"type\"\n    | \"tileshape\"> & {\n        tileshape: string,\n    };\n\ntype FormValues = DatasetParamsBLOForForm\n\n\ntype MergedProps = FormikProps<FormValues> & OpenFormProps<DatasetParamsBLO>;\n\nconst BLOFileParamsForm: React.SFC<MergedProps> = ({\n    values,\n    touched,\n    errors,\n    dirty,\n    isSubmitting,\n    handleChange,\n    handleBlur,\n    handleSubmit,\n    handleReset,\n    onCancel,\n}) => {\n    return (\n        <Form onSubmit={handleSubmit}>\n            <Form.Field>\n                <label htmlFor=\"id_name\">Name:</label>\n                <input type=\"text\" name=\"name\" id=\"id_name\" value={values.name}\n                    onChange={handleChange}\n                    onBlur={handleBlur} />\n                {errors.name && touched.name && errors.name}\n            </Form.Field>\n            <Form.Field>\n                <label htmlFor=\"id_tileshape\">Tileshape:</label>\n                <input type=\"text\" name=\"tileshape\" id=\"id_tileshape\" value={values.tileshape}\n                    onChange={handleChange} onBlur={handleBlur} />\n            </Form.Field>\n\n            <Button primary={true} type=\"submit\" disabled={isSubmitting}>Load Dataset</Button>\n            <Button type=\"button\" onClick={onCancel}>Cancel</Button>\n        </Form>\n    )\n}\n\nexport default withFormik<OpenFormProps<DatasetParamsBLO>, FormValues>({\n    mapPropsToValues: ({ initial }) => ({\n        name: getInitial(\"name\", \"\", initial),\n        tileshape: getInitial(\"tileshape\", \"1, 8, 128, 128\", initial).toString(),\n    }),\n    handleSubmit: (values, formikBag) => {\n        const { onSubmit, path } = formikBag.props;\n        onSubmit({\n            path,\n            type: DatasetTypes.BLO,\n            name: values.name,\n            tileshape: parseNumList(values.tileshape),\n        });\n    }\n})(BLOFileParamsForm);\n","import { ActionsUnion, createAction } from \"../helpers/actionHelpers\";\n\nexport enum ActionTypes {\n    DISMISS = \"ERROR_DISMISS\",\n}\n\nexport const Actions = {\n    dismiss: (id: string) => createAction(ActionTypes.DISMISS, { id }),\n}\n\nexport type Actions = ActionsUnion<typeof Actions>;","import * as React from \"react\";\nimport { Dropdown, DropdownProps } from \"semantic-ui-react\";\nimport { getEnumValues } from \"../../helpers\";\nimport { DatasetTypes } from \"../../messages\";\n\n\nconst datasetTypeKeys = getEnumValues(DatasetTypes);\nconst datasetTypeOptions = datasetTypeKeys.map(t => ({\n    // text: DatasetTypeMetadata[DatasetTypes[t as any]].short,\n    text: DatasetTypes[t],\n    value: DatasetTypes[t],\n}));\n\ninterface DatasetTypeSelectProps {\n    onClick: (e: React.SyntheticEvent, data: DropdownProps) => void,\n    currentType: DatasetTypes,\n}\n\nconst DatasetTypeSelect: React.SFC<DatasetTypeSelectProps> = ({ currentType, onClick }) => {\n    return (\n        <>\n            <Dropdown\n                inline={true}\n                options={datasetTypeOptions}\n                value={currentType}\n                onChange={onClick}\n            />\n        </>\n    );\n}\n\nexport default DatasetTypeSelect;","import { FormikProps, withFormik } from \"formik\";\nimport * as React from \"react\";\nimport { Button, Form } from \"semantic-ui-react\";\nimport { Omit } from \"../../helpers/types\";\nimport { DatasetParamsEMPAD, DatasetTypes } from \"../../messages\";\nimport { getInitial, parseNumList } from \"../helpers\";\nimport { OpenFormProps } from \"../types\";\n\n// some fields have different types in the form vs. in messages\ntype DatasetParamsEMPADForForm = Omit<DatasetParamsEMPAD,\n    \"path\"\n    | \"type\"\n    | \"scan_size\"\n> & {\n    scan_size: string,\n};\n\ntype FormValues = DatasetParamsEMPADForForm\n\ntype MergedProps = FormikProps<FormValues> & OpenFormProps<DatasetParamsEMPAD>;\n\nconst RawFileParamsForm: React.SFC<MergedProps> = ({\n    values,\n    touched,\n    errors,\n    dirty,\n    isSubmitting,\n    handleChange,\n    handleBlur,\n    handleSubmit,\n    handleReset,\n    onCancel,\n}) => {\n    return (\n        <Form onSubmit={handleSubmit}>\n            <Form.Field>\n                <label htmlFor=\"id_name\">Name:</label>\n                <input type=\"text\" name=\"name\" id=\"id_name\" value={values.name}\n                    onChange={handleChange}\n                    onBlur={handleBlur} />\n                {errors.name && touched.name && errors.name}\n            </Form.Field>\n            <Form.Field>\n                <label htmlFor=\"id_scan_size\">Scan Size:</label>\n                <input type=\"text\" name=\"scan_size\" id=\"id_scan_size\" value={values.scan_size}\n                    onChange={handleChange} onBlur={handleBlur} />\n            </Form.Field>\n            <Button primary={true} type=\"submit\" disabled={isSubmitting}>Load Dataset</Button>\n            <Button type=\"button\" onClick={onCancel}>Cancel</Button>\n        </Form>\n    )\n}\n\nexport default withFormik<OpenFormProps<DatasetParamsEMPAD>, FormValues>({\n    mapPropsToValues: ({ initial }) => ({\n        name: getInitial(\"name\", \"\", initial),\n        scan_size: getInitial(\"scan_size\", \"\", initial).toString(),\n    }),\n    handleSubmit: (values, formikBag) => {\n        const { onSubmit, path } = formikBag.props;\n        onSubmit({\n            path,\n            type: DatasetTypes.EMPAD,\n            name: values.name,\n            scan_size: parseNumList(values.scan_size),\n        });\n    }\n})(RawFileParamsForm);\n\n","import { DatasetParamsFRMS6 } from \"../../messages\";\n\nimport { FormikProps, withFormik } from \"formik\";\nimport * as React from \"react\";\nimport { Button, Form } from \"semantic-ui-react\";\nimport { Omit } from \"../../helpers/types\";\nimport { DatasetTypes } from \"../../messages\";\nimport { getInitial } from \"../helpers\";\nimport { OpenFormProps } from \"../types\";\n\n// some fields have different types in the form vs. in messages\ntype DatasetParamsFRMS6ForForm = Omit<DatasetParamsFRMS6,\n    \"path\" | \"type\">;\n\ntype FormValues = DatasetParamsFRMS6ForForm\n\n\ntype MergedProps = FormikProps<FormValues> & OpenFormProps<DatasetParamsFRMS6>;\nconst FRMS6ParamsForm: React.SFC<MergedProps> = ({\n    values,\n    touched,\n    errors,\n    dirty,\n    isSubmitting,\n    handleChange,\n    handleBlur,\n    handleSubmit,\n    handleReset,\n    onCancel,\n}) => {\n    return (\n        <Form onSubmit={handleSubmit}>\n            <Form.Field>\n                <label htmlFor=\"id_name\">Name:</label>\n                <input type=\"text\" name=\"name\" id=\"id_name\" value={values.name}\n                    onChange={handleChange}\n                    onBlur={handleBlur} />\n                {errors.name && touched.name && errors.name}\n            </Form.Field>\n\n            <Button primary={true} type=\"submit\" disabled={isSubmitting}>Load Dataset</Button>\n            <Button type=\"button\" onClick={onCancel}>Cancel</Button>\n        </Form>\n    )\n}\n\nexport default withFormik<OpenFormProps<DatasetParamsFRMS6>, FormValues>({\n    mapPropsToValues: ({ initial }) => ({\n        name: getInitial(\"name\", \"\", initial),\n    }),\n    handleSubmit: (values, formikBag) => {\n        const { onSubmit, path } = formikBag.props;\n        onSubmit({\n            path,\n            type: DatasetTypes.FRMS6,\n            name: values.name,\n        });\n    }\n})(FRMS6ParamsForm);\n","import { FormikProps, withFormik } from \"formik\";\nimport * as React from \"react\";\nimport { Button, Form } from \"semantic-ui-react\";\nimport { Omit } from \"../../helpers/types\";\nimport { DatasetParamsHDF5, DatasetTypes } from \"../../messages\";\nimport { getInitial } from \"../helpers\";\nimport { OpenFormProps } from \"../types\";\n\ntype DatasetParamsHDF5ForForm = Omit<DatasetParamsHDF5, \"path\" | \"type\" | \"tileshape\"> & { tileshape: string, };\n\ntype FormValues = DatasetParamsHDF5ForForm\n\ntype MergedProps = FormikProps<FormValues> & OpenFormProps<DatasetParamsHDF5>;\n\nconst HDF5ParamsForm: React.SFC<MergedProps> = ({\n    values,\n    touched,\n    errors,\n    dirty,\n    isSubmitting,\n    handleChange,\n    handleBlur,\n    handleSubmit,\n    handleReset,\n    onCancel,\n}) => {\n    return (\n        <Form onSubmit={handleSubmit}>\n            <Form.Field>\n                <label htmlFor=\"id_name\">Name:</label>\n                <input type=\"text\" name=\"name\" id=\"id_name\" value={values.name}\n                    onChange={handleChange}\n                    onBlur={handleBlur} />\n                {errors.name && touched.name && errors.name}\n            </Form.Field>\n            <Form.Field>\n                <label htmlFor=\"id_ds_path\">HDF5 Dataset Path:</label>\n                <input type=\"text\" name=\"ds_path\" id=\"id_ds_path\" value={values.ds_path}\n                    onChange={handleChange} onBlur={handleBlur} />\n            </Form.Field>\n            <Form.Field>\n                <label htmlFor=\"id_tileshape\">Tileshape:</label>\n                <input type=\"text\" name=\"tileshape\" id=\"id_tileshape\" value={values.tileshape}\n                    onChange={handleChange} onBlur={handleBlur} />\n            </Form.Field>\n            <Button primary={true} type=\"submit\" disabled={isSubmitting}>Load Dataset</Button>\n            <Button onClick={onCancel} >Cancel</Button>\n        </Form>\n    )\n}\n\nexport default withFormik<OpenFormProps<DatasetParamsHDF5>, FormValues>({\n    mapPropsToValues: ({ initial }) => ({\n        name: getInitial(\"name\", \"\", initial),\n        tileshape: getInitial(\"tileshape\", \"1, 8, 128, 128\", initial).toString(),\n        ds_path: getInitial(\"ds_path\", \"\", initial),\n    }),\n    handleSubmit: (values, formikBag) => {\n        const { onSubmit, path } = formikBag.props;\n        onSubmit({\n            path,\n            type: DatasetTypes.HDF5,\n            name: values.name,\n            ds_path: values.ds_path,\n            tileshape: values.tileshape.split(\",\").map(part => +part),\n        });\n    }\n})(HDF5ParamsForm);","import { FormikProps, withFormik } from \"formik\";\nimport * as React from \"react\";\nimport { Button, Form } from \"semantic-ui-react\";\nimport { Omit } from \"../../helpers/types\";\nimport { DatasetParamsHDFS, DatasetTypes } from \"../../messages\";\nimport { getInitial } from \"../helpers\";\nimport { OpenFormProps } from \"../types\";\n\ntype RawDatasetParamsHDFS = Omit<DatasetParamsHDFS, \"path\" | \"type\" | \"tileshape\"> & {\n    tileshape: string,\n};\n\ntype FormValues = RawDatasetParamsHDFS\n\ntype MergedProps = FormikProps<FormValues> & OpenFormProps<DatasetParamsHDFS>;\n\nconst HDFSParamsForm: React.SFC<MergedProps> = ({\n    values,\n    touched,\n    errors,\n    dirty,\n    isSubmitting,\n    handleChange,\n    handleBlur,\n    handleSubmit,\n    handleReset,\n    onCancel,\n}) => {\n    return (\n        <Form onSubmit={handleSubmit}>\n            <Form.Field>\n                <label htmlFor=\"id_name\">Name:</label>\n                <input type=\"text\" name=\"name\" id=\"id_name\" value={values.name}\n                    onChange={handleChange}\n                    onBlur={handleBlur} />\n                {errors.name && touched.name && errors.name}\n            </Form.Field>\n            <Form.Field>\n                <label htmlFor=\"id_tileshape\">Tileshape:</label>\n                <input type=\"text\" name=\"tileshape\" id=\"id_tileshape\" value={values.tileshape}\n                    onChange={handleChange} onBlur={handleBlur} />\n            </Form.Field>\n            <Button primary={true} type=\"submit\" disabled={isSubmitting}>Load Dataset</Button>\n            <Button type=\"button\" onClick={onCancel}>Cancel</Button>\n        </Form>\n    )\n}\n\nexport default withFormik<OpenFormProps<DatasetParamsHDFS>, FormValues>({\n    mapPropsToValues: ({ initial }) => ({\n        name: getInitial(\"name\", \"\", initial),\n        tileshape: getInitial(\"tileshape\", \"1, 8, 128, 128\", initial).toString(),\n    }),\n    handleSubmit: (values, formikBag) => {\n        const { onSubmit, path } = formikBag.props;\n        onSubmit({\n            path,\n            type: DatasetTypes.HDFS,\n            name: values.name,\n            tileshape: values.tileshape.split(\",\").map(part => +part),\n        });\n    }\n})(HDFSParamsForm);","import { FormikProps, withFormik } from \"formik\";\nimport * as React from \"react\";\nimport { Button, Form } from \"semantic-ui-react\";\nimport { Omit } from \"../../helpers/types\";\nimport { DatasetParamsK2IS, DatasetTypes } from \"../../messages\";\nimport { getInitial } from \"../helpers\";\nimport { OpenFormProps } from \"../types\";\n\n// some fields have different types in the form vs. in messages\ntype DatasetParamsK2ISForForm = Omit<DatasetParamsK2IS,\n    \"path\" | \"type\">;\n\ntype FormValues = DatasetParamsK2ISForForm\n\n\ntype MergedProps = FormikProps<FormValues> & OpenFormProps<DatasetParamsK2IS>;\n\nconst K2ISFileParamsForm: React.SFC<MergedProps> = ({\n    values,\n    touched,\n    errors,\n    dirty,\n    isSubmitting,\n    handleChange,\n    handleBlur,\n    handleSubmit,\n    handleReset,\n    onCancel,\n}) => {\n    return (\n        <Form onSubmit={handleSubmit}>\n            <Form.Field>\n                <label htmlFor=\"id_name\">Name:</label>\n                <input type=\"text\" name=\"name\" id=\"id_name\" value={values.name}\n                    onChange={handleChange}\n                    onBlur={handleBlur} />\n                {errors.name && touched.name && errors.name}\n            </Form.Field>\n\n            <Button primary={true} type=\"submit\" disabled={isSubmitting}>Load Dataset</Button>\n            <Button type=\"button\" onClick={onCancel}>Cancel</Button>\n        </Form>\n    )\n}\n\nexport default withFormik<OpenFormProps<DatasetParamsK2IS>, FormValues>({\n    mapPropsToValues: ({ initial }) => ({\n        name: getInitial(\"name\", \"\", initial),\n    }),\n    handleSubmit: (values, formikBag) => {\n        const { onSubmit, path } = formikBag.props;\n        onSubmit({\n            path,\n            type: DatasetTypes.K2IS,\n            name: values.name,\n        });\n    }\n})(K2ISFileParamsForm);\n\n","import { FormikProps, withFormik } from \"formik\";\nimport * as React from \"react\";\nimport { Button, Form } from \"semantic-ui-react\";\nimport { Omit } from \"../../helpers/types\";\nimport { DatasetParamsMIB, DatasetTypes } from \"../../messages\";\nimport { getInitial, parseNumList } from \"../helpers\";\nimport { OpenFormProps } from \"../types\";\n\n// some fields have different types in the form vs. in messages\ntype DatasetParamsMIBForForm = Omit<DatasetParamsMIB,\n    \"path\"\n    | \"type\"\n    | \"tileshape\"\n    | \"scan_size\"\n> & {\n    tileshape: string,\n    scan_size: string,\n};\n\ntype FormValues = DatasetParamsMIBForForm\n\ntype MergedProps = FormikProps<FormValues> & OpenFormProps<DatasetParamsMIB>;\n\nconst RawFileParamsForm: React.SFC<MergedProps> = ({\n    values,\n    touched,\n    errors,\n    dirty,\n    isSubmitting,\n    handleChange,\n    handleBlur,\n    handleSubmit,\n    handleReset,\n    onCancel,\n}) => {\n    return (\n        <Form onSubmit={handleSubmit}>\n            <Form.Field>\n                <label htmlFor=\"id_name\">Name:</label>\n                <input type=\"text\" name=\"name\" id=\"id_name\" value={values.name}\n                    onChange={handleChange}\n                    onBlur={handleBlur} />\n                {errors.name && touched.name && errors.name}\n            </Form.Field>\n            <Form.Field>\n                <label htmlFor=\"id_tileshape\">Tileshape:</label>\n                <input type=\"text\" name=\"tileshape\" id=\"id_tileshape\" value={values.tileshape}\n                    onChange={handleChange} onBlur={handleBlur} />\n            </Form.Field>\n            <Form.Field>\n                <label htmlFor=\"id_scan_size\">Scan Size:</label>\n                <input type=\"text\" name=\"scan_size\" id=\"id_scan_size\" value={values.scan_size}\n                    onChange={handleChange} onBlur={handleBlur} />\n            </Form.Field>\n            <Button primary={true} type=\"submit\" disabled={isSubmitting}>Load Dataset</Button>\n            <Button type=\"button\" onClick={onCancel}>Cancel</Button>\n        </Form>\n    )\n}\n\nexport default withFormik<OpenFormProps<DatasetParamsMIB>, FormValues>({\n    mapPropsToValues: ({ initial }) => ({\n        name: getInitial(\"name\", \"\", initial),\n        tileshape: getInitial(\"tileshape\", \"1, 8, 256, 256\", initial).toString(),\n        scan_size: getInitial(\"scan_size\", \"\", initial).toString(),\n    }),\n    handleSubmit: (values, formikBag) => {\n        const { onSubmit, path } = formikBag.props;\n        onSubmit({\n            path,\n            type: DatasetTypes.MIB,\n            name: values.name,\n            tileshape: parseNumList(values.tileshape),\n            scan_size: parseNumList(values.scan_size),\n        });\n    }\n})(RawFileParamsForm);\n","import { FormikProps, withFormik } from \"formik\";\nimport * as React from \"react\";\nimport { Button, Form } from \"semantic-ui-react\";\nimport { Omit } from \"../../helpers/types\";\nimport { DatasetParamsRaw, DatasetTypes } from \"../../messages\";\nimport { getInitial, parseNumList } from \"../helpers\";\nimport { OpenFormProps } from \"../types\";\n\n// some fields have different types in the form vs. in messages\ntype DatasetParamsRawForForm = Omit<DatasetParamsRaw,\n    \"type\"\n    | \"path\"\n    | \"tileshape\"\n    | \"scan_size\"\n    | \"detector_size\"> & {\n        tileshape: string,\n        scan_size: string\n        detector_size: string,\n    };\n\ntype FormValues = DatasetParamsRawForForm\n\ntype MergedProps = FormikProps<FormValues> & OpenFormProps<DatasetParamsRaw>;\n\nconst RawFileParamsForm: React.SFC<MergedProps> = ({\n    values,\n    touched,\n    errors,\n    dirty,\n    isSubmitting,\n    handleChange,\n    handleBlur,\n    handleSubmit,\n    handleReset,\n    onCancel,\n}) => {\n    return (\n        <Form onSubmit={handleSubmit}>\n            <Form.Field>\n                <label htmlFor=\"id_name\">Name:</label>\n                <input type=\"text\" name=\"name\" id=\"id_name\" value={values.name}\n                    onChange={handleChange}\n                    onBlur={handleBlur} />\n                {errors.name && touched.name && errors.name}\n            </Form.Field>\n            <Form.Field>\n                <label htmlFor=\"id_tileshape\">Tileshape:</label>\n                <input type=\"text\" name=\"tileshape\" id=\"id_tileshape\" value={values.tileshape}\n                    onChange={handleChange} onBlur={handleBlur} />\n            </Form.Field>\n            <Form.Field>\n                <label htmlFor=\"id_scan_size\">Scan Size:</label>\n                <input type=\"text\" name=\"scan_size\" id=\"id_scan_size\" value={values.scan_size}\n                    onChange={handleChange} onBlur={handleBlur} />\n            </Form.Field>\n            <Form.Field>\n                <label htmlFor=\"id_dtype\">Datatype (uint16, uint32, float32, float64, &gt;u2, ..., can be anything that is <a href=\"https://docs.scipy.org/doc/numpy-1.15.1/reference/arrays.dtypes.html\">understood by numpy as a dtype</a>):</label>\n                <input type=\"text\" name=\"dtype\" id=\"id_dtype\" value={values.dtype}\n                    onChange={handleChange} onBlur={handleBlur} />\n            </Form.Field>\n\n            <Form.Field>\n                <label htmlFor=\"id_detector_size\">Detector Size (as in the file):</label>\n                <input type=\"text\" name=\"detector_size\" id=\"id_detector_size\" value={values.detector_size}\n                    onChange={handleChange} onBlur={handleBlur} />\n            </Form.Field>\n            <Form.Field>\n                <label htmlFor=\"id_enable_direct\">Enable Direct I/O (for usage with fast SSDs and files much larger than RAM):</label>\n                <input type=\"checkbox\" name=\"enable_direct\" id=\"id_enable_direct\" checked={values.enable_direct}\n                    onChange={handleChange} onBlur={handleBlur} />\n            </Form.Field>\n            <Button primary={true} type=\"submit\" disabled={isSubmitting}>Load Dataset</Button>\n            <Button type=\"button\" onClick={onCancel}>Cancel</Button>\n        </Form>\n    )\n}\n\nexport default withFormik<OpenFormProps<DatasetParamsRaw>, FormValues>({\n    mapPropsToValues: ({ initial }) => ({\n        name: getInitial(\"name\", \"\", initial),\n        enable_direct: getInitial(\"enable_direct\", false, initial),\n        tileshape: getInitial(\"tileshape\", \"1, 8, 128, 128\", initial).toString(),\n        detector_size: getInitial(\"detector_size\", \"\", initial).toString(),\n        scan_size: getInitial(\"scan_size\", \"\", initial).toString(),\n        dtype: getInitial(\"dtype\", \"float32\", initial),\n    }),\n    handleSubmit: (values, formikBag) => {\n        const { onSubmit, path } = formikBag.props;\n        onSubmit({\n            path,\n            type: DatasetTypes.RAW,\n            name: values.name,\n            dtype: values.dtype,\n            enable_direct: values.enable_direct,\n            tileshape: parseNumList(values.tileshape),\n            scan_size: parseNumList(values.scan_size),\n            detector_size: parseNumList(values.detector_size),\n        });\n    }\n})(RawFileParamsForm);\n","import { DatasetParamsSER } from \"../../messages\";\n\nimport { FormikProps, withFormik } from \"formik\";\nimport * as React from \"react\";\nimport { Button, Form } from \"semantic-ui-react\";\nimport { Omit } from \"../../helpers/types\";\nimport { DatasetTypes } from \"../../messages\";\nimport { getInitial } from \"../helpers\";\nimport { OpenFormProps } from \"../types\";\n\n// some fields have different types in the form vs. in messages\ntype DatasetParamsSERForForm = Omit<DatasetParamsSER,\n    \"path\" | \"type\">;\n\ntype FormValues = DatasetParamsSERForForm\n\n\ntype MergedProps = FormikProps<FormValues> & OpenFormProps<DatasetParamsSER>;\nconst SERParamsForm: React.SFC<MergedProps> = ({\n    values,\n    touched,\n    errors,\n    dirty,\n    isSubmitting,\n    handleChange,\n    handleBlur,\n    handleSubmit,\n    handleReset,\n    onCancel,\n}) => {\n    return (\n        <Form onSubmit={handleSubmit}>\n            <Form.Field>\n                <label htmlFor=\"id_name\">Name:</label>\n                <input type=\"text\" name=\"name\" id=\"id_name\" value={values.name}\n                    onChange={handleChange}\n                    onBlur={handleBlur} />\n                {errors.name && touched.name && errors.name}\n            </Form.Field>\n\n            <Button primary={true} type=\"submit\" disabled={isSubmitting}>Load Dataset</Button>\n            <Button type=\"button\" onClick={onCancel}>Cancel</Button>\n        </Form>\n    )\n}\n\nexport default withFormik<OpenFormProps<DatasetParamsSER>, FormValues>({\n    mapPropsToValues: ({ initial }) => ({\n        name: getInitial(\"name\", \"\", initial),\n    }),\n    handleSubmit: (values, formikBag) => {\n        const { onSubmit, path } = formikBag.props;\n        onSubmit({\n            path,\n            type: DatasetTypes.SER,\n            name: values.name,\n        });\n    }\n})(SERParamsForm);","import * as React from \"react\";\nimport { connect } from 'react-redux';\nimport { Dispatch } from \"redux\";\nimport { DropdownProps, Header, Segment } from \"semantic-ui-react\";\nimport uuid from \"uuid/v4\";\nimport { assertNotReached } from \"../../helpers\";\nimport { DatasetFormParams, DatasetTypes } from '../../messages';\nimport { RootReducer } from \"../../store\";\nimport * as datasetActions from \"../actions\";\nimport BLOParamsForm from \"./BLOParamsForm\";\nimport DatasetTypeSelect from \"./DatasetTypeSelect\";\nimport EMPADParamsForm from \"./EMPADParamsForm\";\nimport FRMS6ParamsForm from \"./FRMS6ParamsForm\";\nimport HDF5ParamsForm from \"./HDF5ParamsForm\";\nimport HDFSParamsForm from './HDFSParamsForm';\nimport K2ISParamsForm from \"./K2ISParamsForm\";\nimport MIBParamsForm from \"./MIBParamsForm\";\nimport RawFileParamsForm from \"./RawFileParamsForm\";\nimport SERParamsForm from \"./SERParamsForm\";\n\nconst mapDispatchToProps = (dispatch: Dispatch) => {\n    return {\n        createDataset: (params: DatasetFormParams) => {\n            dispatch(datasetActions.Actions.create({\n                id: uuid(),\n                params,\n            }));\n        },\n        onCancel: () => dispatch(datasetActions.Actions.cancelOpen()),\n    };\n}\n\nconst mapStateToProps = (state: RootReducer) => {\n    return {\n        formVisible: state.openDataset.formVisible,\n        formPath: state.openDataset.formPath,\n        formInitial: state.openDataset.formInitialParams,\n    };\n}\n\n\ntype MergedProps = ReturnType<typeof mapDispatchToProps> & ReturnType<typeof mapStateToProps>;\n\ninterface DatasetOpenState {\n    datasetType: DatasetTypes\n}\n\n\nclass DatasetOpen extends React.Component<MergedProps, DatasetOpenState> {\n    public state = {\n        datasetType: DatasetTypes.RAW,\n    }\n\n    constructor(props: MergedProps) {\n        super(props);\n        if (props.formInitial !== undefined) {\n            this.state = {\n                datasetType: props.formInitial.type,\n            };\n        }\n    }\n\n    public setDatasetType = (e: React.SyntheticEvent, data: DropdownProps) => {\n        const type = data.value as DatasetTypes;\n        this.setState({\n            datasetType: type,\n        })\n    }\n\n    public render() {\n        const { formPath, formInitial, createDataset, onCancel } = this.props;\n        const { datasetType } = this.state;\n\n        const renderForm = (form: React.ReactNode) => {\n            return (\n                <Segment>\n                    Type: <DatasetTypeSelect onClick={this.setDatasetType} currentType={datasetType} />\n                    <Header as=\"h2\">Open: {formPath}</Header>\n                    {form}\n                </Segment>\n            );\n        }\n        switch (datasetType) {\n            case DatasetTypes.HDF5: {\n                const initial = formInitial && datasetType === formInitial.type ? formInitial : undefined;\n                return renderForm(<HDF5ParamsForm path={formPath} initial={initial} onSubmit={createDataset} onCancel={onCancel} />);\n            }\n            case DatasetTypes.HDFS: {\n                const initial = formInitial && datasetType === formInitial.type ? formInitial : undefined;\n                return renderForm(<HDFSParamsForm path={formPath} initial={initial} onSubmit={createDataset} onCancel={onCancel} />);\n            }\n            case DatasetTypes.RAW: {\n                const initial = formInitial && datasetType === formInitial.type ? formInitial : undefined;\n                return renderForm(<RawFileParamsForm path={formPath} initial={initial} onSubmit={createDataset} onCancel={onCancel} />);\n            }\n            case DatasetTypes.MIB: {\n                const initial = formInitial && datasetType === formInitial.type ? formInitial : undefined;\n                return renderForm(<MIBParamsForm path={formPath} initial={initial} onSubmit={createDataset} onCancel={onCancel} />);\n            }\n            case DatasetTypes.BLO: {\n                const initial = formInitial && datasetType === formInitial.type ? formInitial : undefined;\n                return renderForm(<BLOParamsForm path={formPath} initial={initial} onSubmit={createDataset} onCancel={onCancel} />);\n            }\n            case DatasetTypes.K2IS: {\n                const initial = formInitial && datasetType === formInitial.type ? formInitial : undefined;\n                return renderForm(<K2ISParamsForm path={formPath} initial={initial} onSubmit={createDataset} onCancel={onCancel} />);\n            }\n            case DatasetTypes.SER: {\n                const initial = formInitial && datasetType === formInitial.type ? formInitial : undefined;\n                return renderForm(<SERParamsForm path={formPath} initial={initial} onSubmit={createDataset} onCancel={onCancel} />);\n            }\n            case DatasetTypes.FRMS6: {\n                const initial = formInitial && datasetType === formInitial.type ? formInitial : undefined;\n                return renderForm(<FRMS6ParamsForm path={formPath} initial={initial} onSubmit={createDataset} onCancel={onCancel} />);\n            }\n            case DatasetTypes.EMPAD: {\n                const initial = formInitial && datasetType === formInitial.type ? formInitial : undefined;\n                return renderForm(<EMPADParamsForm path={formPath} initial={initial} onSubmit={createDataset} onCancel={onCancel} />)\n            }\n        }\n        return assertNotReached(\"unknown dataset type\");\n    }\n\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(DatasetOpen)","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Header, Icon, Message } from \"semantic-ui-react\";\nimport { RootReducer } from \"../../store\";\n\nconst mapStateToProps = (state: RootReducer) => {\n    return {\n        busy: state.openDataset.busy,\n        path: state.openDataset.busyPath,\n    };\n}\n\ntype MergedProps = ReturnType<typeof mapStateToProps>;\n\nconst DatasetOpenSpinner: React.SFC<MergedProps> = ({ busy, path }) => {\n    if (!busy) {\n        return null;\n    }\n    return (\n        <>\n            <Header as=\"h2\" dividing={true}>Loading...</Header>\n            <Message icon={true}>\n                <Icon name='cog' loading={true} />\n                <Message.Content>\n                    <Message.Header>Detecting parameters for {path}</Message.Header>\n                </Message.Content>\n            </Message>\n        </>\n    );\n}\n\nexport default connect(mapStateToProps)(DatasetOpenSpinner);","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport BrowserWrapper from \"../../browser/components/BrowserWrapper\";\nimport { RootReducer } from \"../../store\";\nimport { DatasetsState } from \"../types\";\nimport Dataset from \"./Dataset\";\nimport DatasetOpen from \"./DatasetOpen\";\nimport DatasetOpenSpinner from \"./DatasetOpenSpinner\";\n\ninterface DatasetListProps {\n    datasets: DatasetsState\n}\n\nconst mapStateToProps = (state: RootReducer) => {\n    return {\n        datasets: state.datasets,\n        formVisible: state.openDataset.formVisible,\n        formPath: state.openDataset.formPath,\n    };\n}\n\ntype MergedProps = DatasetListProps & ReturnType<typeof mapStateToProps>;\n\nclass DatasetList extends React.Component<MergedProps> {\n    public render() {\n        const { formVisible, datasets } = this.props;\n\n        return (\n            <>\n                {datasets.ids.map((dsId: string) => <Dataset dataset={datasets.byId[dsId]} key={dsId} />)}\n                <DatasetOpenSpinner />\n                {formVisible && <DatasetOpen />}\n                <BrowserWrapper />\n            </>\n        );\n    }\n}\n\nexport default connect(mapStateToProps)(DatasetList);","import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { Dispatch } from 'redux';\nimport { Message } from 'semantic-ui-react';\nimport * as errorActions from '../actions';\nimport { ErrorMessage } from '../reducers';\n\nconst mapDispatchToProps = (dispatch: Dispatch, ownProps: ErrorProps) => {\n    return {\n        dismiss: () => dispatch(errorActions.Actions.dismiss(ownProps.error.id)),\n    }\n}\n\ninterface ErrorProps {\n    error: ErrorMessage,\n}\n\ntype MergedProps = ErrorProps & ReturnType<typeof mapDispatchToProps>;\n\nconst ErrorComponent: React.SFC<MergedProps> = ({ dismiss, error }) => {\n    return (\n        <Message negative={true} onDismiss={dismiss}>{error.msg}</Message>\n    )\n}\n\nexport default connect(null, mapDispatchToProps)(ErrorComponent);","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Modal } from \"semantic-ui-react\";\nimport { RootReducer } from \"../../store\";\nimport Error from \"./Error\";\n\nconst mapStateToProps = (state: RootReducer) => {\n    return {\n        errors: state.errors,\n        clusterConnected: state.clusterConnection.status === \"connected\",\n        channelConnected: (state.channelStatus.status === \"connected\" ||\n            state.channelStatus.status === \"ready\"),\n    }\n}\n\ntype MergedProps = ReturnType<typeof mapStateToProps>;\n\nconst ErrorList: React.SFC<MergedProps> = ({ errors, clusterConnected, channelConnected }) => {\n    const numShown = 3;\n    const latestErrors = errors.ids.slice(Math.max(0, errors.ids.length - numShown));\n    const showModal = errors.ids.length > 0 && clusterConnected && channelConnected;\n    return (\n        <Modal open={showModal}>\n            {latestErrors.map(error => <Error error={errors.byId[error]} key={error} />)}\n        </Modal>\n    );\n}\n\nexport default connect(mapStateToProps)(ErrorList);","import * as React from 'react';\nimport 'semantic-ui-css/semantic.min.css';\nimport { Container, Icon, Modal, Popup } from 'semantic-ui-react';\nimport About from './About';\nimport ChannelStatus from './channel/components/ChannelStatus';\nimport DatasetList from './dataset/components/DatasetList';\nimport ErrorList from './errors/components/ErrorList';\nimport logo from './images/LiberTEM logo-medium.png';\n\nclass App extends React.Component {\n    public render() {\n        return (\n            <Container style={{ margin: \"5em 1em 5em 1em\" }}>\n                <div style={{ display: \"flex\" }}>\n                    <img src={logo} width=\"200\" height=\"46\" alt=\"LiberTEM\" style={{ marginBottom: \"20px\" }} />\n                    {' '}\n                    <Modal trigger={\n                        <Icon name=\"info circle\" link={true} style={{ alignSelf: \"flex-start\" }} />\n                    }>\n                        <Popup.Header>About LiberTEM</Popup.Header>\n                        <Popup.Content>\n                            <About />\n                        </Popup.Content>\n                    </Modal>\n                </div>\n                <ErrorList />\n                <ChannelStatus>\n                    <DatasetList />\n                </ChannelStatus>\n            </Container>\n        );\n    }\n}\n\nexport default App;\n","// tslint:disable:no-console\n// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the 'N+1' visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL!,\n      window.location.toString()\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker) {\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the old content will have been purged and\n                // the fresh content will have been added to the cache.\n                // It's the perfect time to display a 'New content is\n                // available; please refresh.' message in your web app.\n                console.log('New content is available; please refresh.');\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // 'Content is cached for offline use.' message.\n                console.log('Content is cached for offline use.');\n              }\n            }\n          };\n        }\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type')!.indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { ActionsUnion, createAction } from \"../helpers/actionHelpers\";\n\nexport enum ActionTypes {\n    CREATE = 'JOB_CREATE',\n}\n\nexport const Actions = {\n    create: (id: string, dataset: string, timestamp: number) => createAction(ActionTypes.CREATE, { id, dataset, timestamp }),\n}\n\nexport type Actions = ActionsUnion<typeof Actions>;\n\nexport type ActionParts = {\n    [K in keyof typeof Actions]: ReturnType<typeof Actions[K]>\n}","import { AnalysisDetails, CancelJobResponse, StartJobRequest, StartJobResponse } from \"../messages\";\n\nexport function startJob(jobId: string, datasetId: string, analysis: AnalysisDetails): Promise<StartJobResponse> {\n    const payload: StartJobRequest = {\n        job: {\n            dataset: datasetId,\n            analysis,\n        }\n    }\n    return fetch(`/api/jobs/${jobId}/`, {\n        body: JSON.stringify(payload),\n        credentials: \"same-origin\",\n        method: \"PUT\",\n    }).then(r => r.json());\n}\n\nexport function cancelJob(jobId: string): Promise<CancelJobResponse> {\n    return fetch(`/api/jobs/${jobId}/`, {\n        method: \"DELETE\",\n        credentials: \"same-origin\",\n    }).then(r => r.json());\n}","import { buffers } from 'redux-saga';\nimport { actionChannel, call, cancel, fork, put, select, take, takeEvery } from 'redux-saga/effects';\nimport uuid from 'uuid/v4';\nimport * as jobActions from '../job/actions';\nimport { cancelJob, startJob } from '../job/api';\nimport { JobState } from '../job/types';\nimport { DatasetState, DatasetStatus } from '../messages';\nimport { RootReducer } from '../store';\nimport * as analysisActions from './actions';\nimport { AnalysisState } from './types';\n\nfunction selectDataset(state: RootReducer, dataset: string) {\n    return state.datasets.byId[dataset];\n}\n\nfunction selectAnalysis(state: RootReducer, id: string) {\n    return state.analyses.byId[id];\n}\n\nfunction selectJob(state: RootReducer, id: string) {\n    return state.jobs.byId[id];\n}\n\n\nexport function* createAnalysisSaga(action: ReturnType<typeof analysisActions.Actions.create>) {\n    try {\n        const datasetState: DatasetState = yield select(selectDataset, action.payload.dataset)\n        if (datasetState.status !== DatasetStatus.OPEN) {\n            throw new Error(\"invalid dataset status\");\n        }\n        const analysis: AnalysisState = {\n            id: uuid(),\n            dataset: action.payload.dataset,\n            mainAnalysisType: action.payload.analysisType,\n            jobs: [],\n            jobHistory: [],\n        }\n\n        const sidecarTask = yield fork(analysisSidecar, analysis.id);\n\n        yield put(analysisActions.Actions.created(analysis));\n\n        while (true) {\n            const removeAction: ReturnType<typeof analysisActions.Actions.remove> = yield take(analysisActions.ActionTypes.REMOVE);\n            if (removeAction.payload.id === analysis.id) {\n                yield cancel(sidecarTask);\n            }\n        }\n    } catch (e) {\n        const timestamp = Date.now();\n        const id = uuid();\n        yield put(analysisActions.Actions.error(`Error creating analysis: ${e.toString()}`, timestamp, id));\n    }\n}\n\nexport function* cancelOldJob(analysis: AnalysisState, jobIndex: number) {\n    const jobId = analysis.jobs[jobIndex];\n    if (jobId === undefined) {\n        return;\n    } else {\n        const job: JobState = yield select(selectJob, jobId);\n        if (job.running !== \"DONE\") {\n            yield call(cancelJob, jobId);\n        }\n    }\n}\n\nexport function* analysisSidecar(analysisId: string) {\n    // channel for incoming actions:\n    // all actions that arrive while we block in `call` will be buffered here.\n    // because the buffer is sliding of size 1, we only keep the latest action!\n    const runOrParamsChannel = yield actionChannel(analysisActions.ActionTypes.RUN, buffers.sliding(2));\n\n    while (true) {\n        try {\n            const action: analysisActions.ActionParts[\"run\"] = yield take(runOrParamsChannel);\n\n            // ignore actions meant for other analyses\n            if (action.payload.id !== analysisId) {\n                continue;\n            }\n\n            // get the current state incl. configuration\n            const analysis: AnalysisState = yield select(selectAnalysis, analysisId);\n            const { jobIndex, parameters } = action.payload;\n\n            // prepare running the job:\n            const jobId = uuid();\n            yield put(jobActions.Actions.create(jobId, analysis.dataset, Date.now()));\n            yield put(analysisActions.Actions.prepareRun(analysis.id, jobIndex, jobId));\n\n            const oldJobId = analysis.jobs[jobIndex];\n            if (oldJobId !== undefined) {\n                const job: JobState = yield select(selectJob, oldJobId);\n                if (job && job.running !== \"DONE\") {\n                    // wait until the job is cancelled:\n                    yield call(cancelJob, oldJobId);\n                }\n            }\n\n            // FIXME: we have a race here, as the websocket msg FINISH_JOB may\n            // arrive before call(startJob, ...) returns. this causes the apply button\n            // to feel unresponsive (the action gets done, but only after we finish here...)\n            // best reproduced in \"Slow 3G\" network simulation mode in devtools\n\n            // wait until the job is started\n            yield call(startJob, jobId, analysis.dataset, parameters);\n            yield put(analysisActions.Actions.running(analysis.id, jobId, jobIndex));\n        } catch (e) {\n            const timestamp = Date.now();\n            const id = uuid();\n            yield put(analysisActions.Actions.error(`Error running analysis: ${e.toString()}`, timestamp, id));\n        }\n    }\n}\n\nexport function* doRemoveAnalysisSaga(action: ReturnType<typeof analysisActions.Actions.remove>) {\n    // const analysis: AnalysisState = yield select(selectAnalysis, action.payload.id)\n    try {\n        // TODO: cancel all jobs! loop over all of them...\n        // yield call(cancelOldJob, analysis, \"RESULT\");\n        // yield call(cancelOldJob, analysis, \"FRAME\");\n    } finally {\n        yield put(analysisActions.Actions.removed(action.payload.id));\n    }\n}\n\nexport function* analysisRootSaga() {\n    yield takeEvery(analysisActions.ActionTypes.CREATE, createAnalysisSaga);\n    yield takeEvery(analysisActions.ActionTypes.REMOVE, doRemoveAnalysisSaga);\n}","import * as _ from 'lodash';\nimport { MsgPartConfig } from \"../messages\";\nimport { ConfigParams, ConfigState, LocalConfig } from \"./reducers\";\n\nconst CONFIG_KEY = \"LiberTEM.config\";\n\nexport function joinPaths(config: ConfigState, ...parts: string[]) {\n    const removeSep = (part: string) => part.replace(new RegExp(`${_.escapeRegExp(config.separator)}$`), \"\")\n    parts = [removeSep(parts[0]), ...parts.slice(1)];\n    return parts.map(part => part.trim()).join(config.separator);\n}\n\nexport function mergeLocalStorage(serverConfig: MsgPartConfig): ConfigParams {\n    const localSettings = window.localStorage.getItem(CONFIG_KEY);\n    if (localSettings === null) {\n        return Object.assign({}, serverConfig, getDefaultLocalConfig(serverConfig));\n    }\n    const localSettingsParsed = JSON.parse(localSettings);\n    const defaultConfig = getDefaultLocalConfig(serverConfig);\n    const mergedConfig = Object.assign({}, defaultConfig, serverConfig, localSettingsParsed);\n    return mergedConfig;\n}\n\ntype ConfigKeys = Array<Partial<keyof ConfigState>>;\n\nexport function setLocalStorage(config: ConfigState): void {\n    \n    const keys: ConfigKeys = [\"cwd\", \"lastOpened\", \"fileHistory\"];\n    const localSettings = keys.reduce((acc, item) => {\n        const configItem = config[item];\n        acc[item] = configItem;\n        return acc;\n    }, {} as ConfigState);\n    window.localStorage.setItem(CONFIG_KEY, JSON.stringify(localSettings));\n}\n\nexport function clearLocalStorage(): void {\n    window.localStorage.removeItem(CONFIG_KEY);\n}\n\nexport function getDefaultLocalConfig(config: MsgPartConfig): LocalConfig {\n    return {\n        lastOpened: {},\n        fileHistory: [],\n    };\n}\n\nexport function makeUnique<T>(inp: T[]): T[] {\n    return inp.reduce((acc: T[], curr: T) => {\n        if (acc.indexOf(curr) === -1) {\n            return [...acc, curr];\n        } else {\n            return acc;\n        }\n    }, [] as T[]);\n}","import { DirectoryListingResponse } from \"../messages\";\n\nexport function getDirectoryListing(path: string): Promise<DirectoryListingResponse> {\n    const url = `/api/browse/localfs/?path=${encodeURIComponent(path)}`;\n    return fetch(url, {\n        method: 'GET',\n        credentials: \"same-origin\",\n    }).then(r => r.json());\n}","import { ActionsUnion, createAction } from '../helpers/actionHelpers';\nimport { JobResultType } from '../job/types';\nimport { MsgPartInitialDataset, MsgPartJob } from '../messages';\n\n\nexport type PartialResultType = JobResultType;\n\nexport enum ActionTypes {\n    INITIAL_STATE = 'CHANNEL_INITIAL_STATE',\n    JOB_STARTED = 'CHANNEL_JOB_STARTED',\n    FINISH_JOB = 'CHANNEL_FINISH_JOB',\n    TASK_RESULT = 'CHANNEL_TASK_RESULT',\n    JOB_ERROR = 'CHANNEL_JOB_ERROR',\n    OPEN = \"CHANNEL_OPEN\",\n    CLOSE = \"CHANNEL_CLOSE\",\n    ERROR = \"CHANNEL_ERROR\",\n    CANCELLED = \"CANCELLED\",\n}\n\nexport const Actions = {\n    initialState: (jobs: MsgPartJob[], datasets: MsgPartInitialDataset[], timestamp: number) => createAction(ActionTypes.INITIAL_STATE, { jobs, datasets, timestamp }),\n    jobStarted: (job: string, dataset: string, timestamp: number) => createAction(ActionTypes.JOB_STARTED, { job, timestamp, dataset }),\n    finishJob: (job: string, results: JobResultType[], timestamp: number) => createAction(ActionTypes.FINISH_JOB, { job, results, timestamp }),\n    taskResult: (job: string, results: PartialResultType[], timestamp: number) => createAction(ActionTypes.TASK_RESULT, { job, results, timestamp }),\n    jobError: (job: string, msg: string, id: string, timestamp: number) => createAction(ActionTypes.JOB_ERROR, { job, msg, id, timestamp }),\n    open: (timestamp: number) => createAction(ActionTypes.OPEN, { timestamp }),\n    close: (timestamp: number) => createAction(ActionTypes.CLOSE, { timestamp }),\n    error: (msg: string, timestamp: number, id: string) => createAction(ActionTypes.ERROR, { msg, timestamp, id }),\n    cancelled: (job: string) => createAction(ActionTypes.CANCELLED, { job }),\n}\n\nexport type Actions = ActionsUnion<typeof Actions>;","import { call, fork, put, select, take } from \"redux-saga/effects\";\nimport uuid from 'uuid/v4';\nimport { joinPaths } from \"../config/helpers\";\nimport { ConfigState } from \"../config/reducers\";\nimport { DirectoryListingResponse } from \"../messages\";\nimport { RootReducer } from \"../store\";\nimport * as browserActions from './actions';\nimport { getDirectoryListing } from \"./api\";\nimport { DirectoryBrowserState } from \"./types\";\n\nexport function* directoryListingSaga() {\n    yield fork(fetchOnRequest);\n    yield fork(fetchDirectoryListOnOpen);\n}\n\nfunction* fetchOnRequest() {\n    while (true) {\n        const action: ReturnType<typeof browserActions.Actions.list> = yield take(browserActions.ActionTypes.LIST_DIRECTORY);\n\n        const { name, path } = action.payload;\n        const config: ConfigState = yield select((state: RootReducer) => state.config)\n        const newPath = name !== undefined ? joinPaths(config, path, name) : path;\n        yield fork(fetchDirectoryListing, newPath);\n    }\n}\n\nfunction* fetchDirectoryListing(path: string) {\n    try {\n        const result: DirectoryListingResponse = yield call(getDirectoryListing, path);\n        if (result.status === \"ok\") {\n            yield put(browserActions.Actions.dirListing(result.path, result.dirs, result.files, result.drives, result.places));\n        } else if (result.status === \"error\") {\n            const browserState: DirectoryBrowserState = yield select((state: RootReducer) => state.browser);\n            const timestamp = Date.now();\n            const id = uuid();\n            const alternative = result.alternative ? result.alternative : browserState.places.home.path;\n            yield put(browserActions.Actions.error(`Error browsing directory: ${result.msg}`, timestamp, id));\n            yield put(browserActions.Actions.list(alternative));\n        }\n    } catch (e) {\n        const browserState: DirectoryBrowserState = yield select((state: RootReducer) => state.browser);\n        const timestamp = Date.now();\n        const id = uuid();\n        yield put(browserActions.Actions.error(`Error browsing directory: ${e.toString()}`, timestamp, id));\n        yield put(browserActions.Actions.list(browserState.places.home.path));\n    }\n}\n\nfunction* fetchDirectoryListOnOpen() {\n    while (true) {\n        yield take(browserActions.ActionTypes.OPEN);\n        const config: ConfigState = yield select((state: RootReducer) => state.config)\n        yield put(browserActions.Actions.list(config.cwd));\n    }\n}","import { ActionCreatorsMapObject } from \"redux\";\nimport { FollowupPart, MsgPartInitialDataset, MsgPartJob } from \"../messages\";\n\nexport interface Message<T extends string> {\n    messageType: T\n}\n\nexport function createMessage<T extends string, O>(messageType: T, attribs: O) {\n    return Object.assign({ messageType }, attribs);\n}\n\nexport enum MessageTypes {\n    INITIAL_STATE = \"INITIAL_STATE\",\n    JOB_STARTED = \"JOB_STARTED\",\n    FINISH_JOB = \"FINISH_JOB\",\n    TASK_RESULT = \"TASK_RESULT\",\n    JOB_ERROR = \"JOB_ERROR\",\n    BINARY = \"BINARY\",\n    OPEN = \"OPEN\",\n    CLOSE = \"CLOSE\",\n    ERROR = \"ERROR\",\n    DELETE_DATASET = \"DELETE_DATASET\",\n    CANCEL_JOB_DONE = \"CANCEL_JOB_DONE\",\n}\n\nexport const Messages = {\n    initialState: (jobs: MsgPartJob[], datasets: MsgPartInitialDataset[]) => createMessage(MessageTypes.INITIAL_STATE, { jobs, datasets }),\n    startJob: (job: string, dataset: string) => createMessage(MessageTypes.JOB_STARTED, { job, dataset }),\n    finishJob: (job: string, followup: FollowupPart) => createMessage(MessageTypes.FINISH_JOB, { job, followup }),\n    taskResult: (job: string, followup: FollowupPart) => createMessage(MessageTypes.TASK_RESULT, { job, followup }),\n    jobError: (job: string, msg: string) => createMessage(MessageTypes.JOB_ERROR, { job, msg }),\n    binary: (objectURL: string) => createMessage(MessageTypes.BINARY, { objectURL }),\n    open: () => createMessage(MessageTypes.OPEN, {}),\n    close: () => createMessage(MessageTypes.CLOSE, {}),\n    error: (msg: string) => createMessage(MessageTypes.ERROR, { msg }),\n    deleteDataset: (dataset: string) => createMessage(MessageTypes.DELETE_DATASET, { dataset }),\n    cancelled: (job: string) => createMessage(MessageTypes.CANCEL_JOB_DONE, { job }),\n}\n\nexport type MessagesUnion<A extends ActionCreatorsMapObject> = ReturnType<A[keyof A]>\nexport type Messages = MessagesUnion<typeof Messages>;\n\n// types of messages sent by the server:\n/*\nexport type InitialStateMessage = ReturnType<typeof Messages.initialState>;\nexport type StartJobMessage = ReturnType<typeof Messages.startJob>;\nexport type FinishJobMessage = ReturnType<typeof Messages.finishJob>;\nexport type TaskResultMessage = ReturnType<typeof Messages.taskResult>;\n*/\n\nexport type BinaryMessage = ReturnType<typeof Messages.binary>;","import { Channel, delay, END, eventChannel } from \"redux-saga\";\nimport { call, fork, put, take } from \"redux-saga/effects\";\nimport uuid from 'uuid/v4';\nimport * as datasetActions from '../dataset/actions';\nimport * as channelActions from \"./actions\";\nimport * as channelMessages from './messages';\n\ntype SocketChannel = Channel<channelMessages.Messages>;\n\n\n/**\n * create typesafe messages from the websocket messages\n * \n * also creates some synthetic events like open, close, error\n */\nfunction createWebSocketChannel(/* addr */): SocketChannel {\n    return eventChannel(emit => {\n        function onMessage(msg: MessageEvent) {\n            if (msg.data instanceof Blob) {\n                // TODO: cleanup createObjectURL results somewhere\n                emit(channelMessages.Messages.binary(URL.createObjectURL(msg.data)));\n            } else {\n                const parsed = JSON.parse(msg.data) as channelMessages.Messages;\n                emit(parsed);\n            }\n        }\n\n        function onOpen() {\n            emit(channelMessages.Messages.open());\n        }\n\n        function onClose() {\n            emit(channelMessages.Messages.close());\n            emit(END);\n        }\n\n        function onError(err: Event) {\n            emit(channelMessages.Messages.error(\"Error in weboscket connection\"));\n        }\n\n        const ws = new WebSocket(`ws://${window.location.hostname}:${window.location.port}/api/events/`);\n        ws.addEventListener(\"message\", onMessage);\n        ws.addEventListener(\"open\", onOpen);\n        ws.addEventListener(\"close\", onClose);\n        ws.addEventListener(\"error\", onError);\n\n        // return cleanup function:\n        return () => {\n            ws.removeEventListener(\"message\", onMessage);\n            ws.removeEventListener(\"open\", onOpen);\n            ws.removeEventListener(\"close\", onClose);\n            ws.removeEventListener(\"error\", onError);\n            // TODO: close connection if still open\n            // (or is it guaranteed that if an error was thrown, the connection is closed?)\n        };\n    });\n}\n\n/**\n * handles the connection lifecycle for our websocket\n */\nexport function* webSocketSaga() {\n    while (true) {\n        const socketChannel = yield call(createWebSocketChannel);\n        yield fork(actionsFromChannel, socketChannel);\n        const action: channelActions.Actions = yield take([\n            channelActions.ActionTypes.OPEN,\n            channelActions.ActionTypes.CLOSE,\n        ]);\n        if (action.type === channelActions.ActionTypes.OPEN) {\n            yield take([\n                channelActions.ActionTypes.CLOSE,\n                channelActions.ActionTypes.ERROR,\n            ]);\n        }\n        yield delay(1000);\n    }\n}\n\n/**\n * translates the messages from the channel to redux actions, handles aggregation etc.\n */\nexport function* actionsFromChannel(socketChannel: SocketChannel) {\n    try {\n        while (true) {\n            const msg = yield take(socketChannel);\n            const timestamp = Date.now();\n            switch (msg.messageType) {\n                case channelMessages.MessageTypes.OPEN: {\n                    yield put(channelActions.Actions.open(timestamp));\n                    break;\n                }\n                case channelMessages.MessageTypes.CLOSE: {\n                    yield put(channelActions.Actions.close(timestamp));\n                    break;\n                }\n                case channelMessages.MessageTypes.ERROR: {\n                    const id = uuid();\n                    yield put(channelActions.Actions.error(msg.msg, timestamp, id));\n                    break;\n                }\n                case channelMessages.MessageTypes.INITIAL_STATE: {\n                    yield put(channelActions.Actions.initialState(msg.jobs, msg.datasets, timestamp));\n                    break;\n                }\n                case channelMessages.MessageTypes.JOB_STARTED: {\n                    yield put(channelActions.Actions.jobStarted(msg.job, msg.details.dataset, timestamp));\n                    break;\n                }\n                case channelMessages.MessageTypes.FINISH_JOB: {\n                    yield call(handleFinishJob, msg, socketChannel, timestamp);\n                    break;\n                }\n                case channelMessages.MessageTypes.TASK_RESULT: {\n                    yield call(handleTaskResult, msg, socketChannel, timestamp);\n                    break;\n                }\n                case channelMessages.MessageTypes.DELETE_DATASET: {\n                    yield put(datasetActions.Actions.deleted(msg.dataset));\n                    break;\n                }\n                case channelMessages.MessageTypes.JOB_ERROR: {\n                    const id = uuid();\n                    yield put(channelActions.Actions.jobError(msg.job, msg.msg, id, timestamp));\n                }\n                case channelMessages.MessageTypes.CANCEL_JOB_DONE: {\n                    yield put(channelActions.Actions.cancelled(msg.job));\n                }\n            }\n        }\n    } finally {\n        // disconnected\n    }\n}\n\nexport function* handleBinaryParts(numParts: number, socketChannel: SocketChannel) {\n    const parts: channelMessages.BinaryMessage[] = [];\n    while (parts.length < numParts) {\n        const binMsg = yield take(socketChannel)\n        parts.push(binMsg);\n    }\n    return parts;\n}\n\nexport function* handleTaskResult(msg: ReturnType<typeof channelMessages.Messages.taskResult>, socketChannel: SocketChannel, timestamp: number) {\n    const parts: channelMessages.BinaryMessage[] = yield call(handleBinaryParts, msg.followup.numMessages, socketChannel);\n    const images = parts.map((part, idx) => ({ imageURL: part.objectURL, description: msg.followup.descriptions[idx] }));\n    yield put(channelActions.Actions.taskResult(msg.job, images, timestamp));\n}\n\nexport function* handleFinishJob(msg: ReturnType<typeof channelMessages.Messages.finishJob>, socketChannel: SocketChannel, timestamp: number) {\n    const parts: channelMessages.BinaryMessage[] = yield call(handleBinaryParts, msg.followup.numMessages, socketChannel);\n    const images = parts.map((part, idx) => ({ imageURL: part.objectURL, description: msg.followup.descriptions[idx] }));\n    yield put(channelActions.Actions.finishJob(msg.job, images, timestamp));\n}","import { ConnectRequest, ConnectRequestParams, ConnectResponse } from \"../messages\";\n\nexport function connectToCluster(params: ConnectRequestParams): Promise<ConnectResponse> {\n    const payload: ConnectRequest = {\n        connection: params\n    }\n    return fetch(`/api/config/connection/`, {\n        body: JSON.stringify(payload),\n        credentials: \"same-origin\",\n        method: \"PUT\",\n    }).then(r => r.json());\n}\n\nexport function checkClusterConnection(): Promise<ConnectResponse> {\n    return fetch(`/api/config/connection/`, {\n        method: 'GET',\n    }).then(r => r.json());\n}","import { ActionsUnion, createAction } from \"../helpers/actionHelpers\";\nimport { ConfigParams } from \"./reducers\";\n\nexport enum ActionTypes {\n    FETCHED = \"CONFIG_FETCHED\",\n    FETCH = \"CONFIG_FETCH\",\n    FETCH_FAILED = \"CONFIG_FETCH_FAILED\",\n}\n\nexport const Actions = {\n    fetch: () => createAction(ActionTypes.FETCH),\n    fetched: (config: ConfigParams) => createAction(ActionTypes.FETCHED, { config }),\n    fetchFailed: (msg: string, timestamp: number, id: string) => createAction(ActionTypes.FETCH_FAILED, { msg, timestamp, id }),\n}\n\nexport type Actions = ActionsUnion<typeof Actions>;","import { all, call, put, take, takeEvery } from \"redux-saga/effects\";\nimport * as channelActions from '../channel/actions';\nimport { ConnectResponse } from \"../messages\";\nimport * as clusterActions from './actions';\nimport { checkClusterConnection, connectToCluster } from \"./api\";\n\nfunction* connectSaga(action: ReturnType<typeof clusterActions.Actions.connect>) {\n    const conn: ConnectResponse = yield call(connectToCluster, action.payload.params);\n    yield call(putClusterStatus, conn);\n}\n\nfunction* putClusterStatus(conn: ConnectResponse) {\n    if (conn.status === \"ok\") {\n        yield put(clusterActions.Actions.connected(conn.connection.connection));\n    } else {\n        yield put(clusterActions.Actions.notConnected());\n    }\n}\n\n/**\n * when the channel is connected, check if cluster is connected and update status accordingly\n */\nfunction* trackClusterConnection() {\n    while (true) {\n        yield take(channelActions.ActionTypes.OPEN)\n        const conn: ConnectResponse = yield call(checkClusterConnection);\n        yield call(putClusterStatus, conn);\n    }\n}\n\nexport function* clusterConnectionSaga() {\n    yield takeEvery(clusterActions.ActionTypes.CONNECT, connectSaga);\n    yield all([\n        trackClusterConnection(),\n    ])\n}","import { GetConfigResponse } from \"../messages\";\n\nexport function getConfig(): Promise<GetConfigResponse> {\n    return fetch(`/api/config/`, {\n        method: \"GET\",\n        credentials: \"same-origin\",\n    }).then(r => r.json());\n}","import { call, fork, put, select, take, takeEvery } from 'redux-saga/effects';\nimport uuid from 'uuid/v4';\nimport * as browserActions from '../browser/actions';\nimport * as channelActions from '../channel/actions';\nimport * as datasetActions from '../dataset/actions';\nimport { GetConfigResponse } from '../messages';\nimport { RootReducer } from '../store';\nimport * as configActions from './actions';\nimport { getConfig } from './api';\nimport { clearLocalStorage, getDefaultLocalConfig, mergeLocalStorage, setLocalStorage } from './helpers';\nimport { ConfigState } from './reducers';\n\nfunction* getConfigOnReconnect() {\n    yield takeEvery(channelActions.ActionTypes.OPEN, getConfigSaga);\n}\n\n/**\n * get config from server and try to merge in the localStorage config\n */\nfunction* getConfigSaga() {\n    yield put(configActions.Actions.fetch());\n    const configResponse: GetConfigResponse = yield call(getConfig);\n    try {\n        const mergedConfig = mergeLocalStorage(configResponse.config);\n        yield put(configActions.Actions.fetched(mergedConfig));\n    } catch (e) {\n        try {\n            clearLocalStorage();\n            // tslint:disable-next-line:no-empty\n        } catch (e) { }\n        const defaultConfig = Object.assign({}, configResponse.config, getDefaultLocalConfig(configResponse.config));\n        yield put(configActions.Actions.fetched(defaultConfig));\n    }\n}\n\n/**\n * update localStorage config on opening files or using the file browser\n */\nfunction* updateLocalStorageConfig() {\n    while (true) {\n        yield take([\n            datasetActions.ActionTypes.CREATE,\n            browserActions.ActionTypes.DIRECTORY_LISTING\n        ]);\n        const config: ConfigState = yield select((state: RootReducer) => state.config);\n        setLocalStorage(config);\n    }\n}\n\nexport function* firstConfigFetch() {\n    try {\n        yield call(getConfigSaga);\n    } catch (e) {\n        const timestamp = Date.now();\n        const id = uuid();\n        yield put(configActions.Actions.fetchFailed(`failed to fetch config: ${e.toString()}`, timestamp, id));\n    }\n}\n\nexport function* configRootSaga() {\n    yield fork(firstConfigFetch);\n    yield fork(getConfigOnReconnect);\n    yield fork(updateLocalStorageConfig);\n}","import { DeleteDatasetResponse, DetectDatasetResponse, OpenDatasetRequest, OpenDatasetResponse } from \"../messages\";\n\nexport function openDataset(id: string, dataset: OpenDatasetRequest): Promise<OpenDatasetResponse> {\n    return fetch(`/api/datasets/${id}/`, {\n        body: JSON.stringify(dataset),\n        credentials: \"same-origin\",\n        method: \"PUT\",\n    }).then(r => r.json());\n}\n\nexport function deleteDataset(id: string): Promise<DeleteDatasetResponse> {\n    return fetch(`/api/datasets/${id}/`, {\n        credentials: \"same-origin\",\n        method: \"DELETE\",\n    }).then(r => r.json());\n}\n\n\nexport function detectDataset(path: string): Promise<DetectDatasetResponse> {\n    return fetch(`/api/datasets/detect/?path=${encodeURIComponent(path)}`, {\n        credentials: \"same-origin\",\n        method: \"GET\",\n    }).then(r => r.json());\n}","import { call, put, select, takeEvery } from 'redux-saga/effects';\nimport uuid from 'uuid/v4';\nimport * as browserActions from '../browser/actions';\nimport { joinPaths } from '../config/helpers';\nimport { ConfigState } from '../config/reducers';\nimport { DetectDatasetResponse, OpenDatasetResponse } from '../messages';\nimport { RootReducer } from '../store';\nimport * as datasetActions from \"./actions\";\nimport { deleteDataset, detectDataset, openDataset } from './api';\n\n\nexport function* createDatasetSaga(action: ReturnType<typeof datasetActions.Actions.create>) {\n    try {\n        const resp: OpenDatasetResponse = yield call(openDataset, action.payload.dataset.id, { dataset: action.payload.dataset });\n        if (resp.status === \"ok\") {\n            yield put(datasetActions.Actions.created(resp.details));\n        } else if (resp.status === \"error\") {\n            const timestamp = Date.now();\n            const id = uuid();\n            yield put(datasetActions.Actions.error(resp.dataset, resp.msg, timestamp, id));\n        }\n    } catch (e) {\n        const timestamp = Date.now();\n        const id = uuid();\n        yield put(datasetActions.Actions.error(action.payload.dataset.id, `Error loading dataset: ${e.toString()}`, timestamp, id));\n    }\n}\n\nexport function* deleteDatasetSaga(action: ReturnType<typeof datasetActions.Actions.delete>) {\n    try {\n        yield call(deleteDataset, action.payload.dataset);\n    } catch (e) {\n        const timestamp = Date.now();\n        const id = uuid();\n        yield put(datasetActions.Actions.error(action.payload.dataset, `Error closing dataset: ${e.toString()}`, timestamp, id));\n    }\n}\n\nexport function* doOpenDataset(fullPath: string) {\n    const config: ConfigState = yield select((state: RootReducer) => state.config);\n    let prefillParams = config.lastOpened[fullPath];\n    if (!prefillParams) {\n        try {\n            yield put(datasetActions.Actions.detect(fullPath));\n            const detectResult: DetectDatasetResponse = yield call(detectDataset, fullPath);\n            if (detectResult.status === \"ok\") {\n                prefillParams = detectResult.datasetParams;\n                yield put(datasetActions.Actions.detected(fullPath, detectResult.datasetParams));\n            } else {\n                yield put(datasetActions.Actions.detectFailed(fullPath));\n            }\n        } catch (e) {\n            yield put(datasetActions.Actions.detectFailed(fullPath));\n        }\n    }\n    yield put(datasetActions.Actions.open(fullPath, prefillParams));\n}\n\nexport function* openDatasetSagaFullPath(action: ReturnType<typeof browserActions.Actions.selectFullPath>) {\n    const fullPath = action.payload.path;\n    yield call(doOpenDataset, fullPath);\n}\n\nexport function* openDatasetSaga(action: ReturnType<typeof browserActions.Actions.select>) {\n    const config: ConfigState = yield select((state: RootReducer) => state.config);\n    const fullPath = joinPaths(config, action.payload.path, action.payload.name);\n    yield call(doOpenDataset, fullPath);\n}\n\nexport function* datasetRootSaga() {\n    yield takeEvery(datasetActions.ActionTypes.CREATE, createDatasetSaga);\n    yield takeEvery(datasetActions.ActionTypes.DELETE, deleteDatasetSaga);\n    yield takeEvery(browserActions.ActionTypes.SELECT, openDatasetSaga);\n    yield takeEvery(browserActions.ActionTypes.SELECT_FULL_PATH, openDatasetSagaFullPath);\n}","import { all } from 'redux-saga/effects';\nimport { analysisRootSaga } from './analysis/sagas';\nimport { directoryListingSaga } from './browser/sagas';\nimport { webSocketSaga } from './channel/sagas';\nimport { clusterConnectionSaga } from './cluster/sagas';\nimport { configRootSaga } from './config/sagas';\nimport { datasetRootSaga } from './dataset/sagas';\n\nexport function* rootSaga() {\n    yield all([\n        configRootSaga(),\n        webSocketSaga(),\n        analysisRootSaga(),\n        datasetRootSaga(),\n        clusterConnectionSaga(),\n        directoryListingSaga(),\n    ]);\n}","import { AllActions } from \"../actions\";\nimport * as datasetActions from \"../dataset/actions\";\nimport { ById, filterWithPred, insertById, updateById } from \"../helpers/reducerHelpers\";\nimport * as analysisActions from \"./actions\";\nimport { AnalysisState, JobList } from \"./types\";\n\nexport type AnalysisReducerState = ById<AnalysisState>;\n\nconst initialAnalysisState: AnalysisReducerState = {\n    byId: {},\n    ids: [],\n}\n\nexport function analysisReducer(state = initialAnalysisState, action: AllActions): AnalysisReducerState {\n    switch (action.type) {\n        case analysisActions.ActionTypes.CREATED: {\n            return insertById(state, action.payload.analysis.id, action.payload.analysis);\n        }\n        case analysisActions.ActionTypes.PREPARE_RUN: {\n            const { jobIndex, id } = action.payload;\n            const analysis = state.byId[id];\n            const oldJob = analysis.jobs[jobIndex];\n            const jobHistory = [...analysis.jobHistory];\n            if (oldJob !== undefined) {\n                // TODO: length restriction?\n                const hist = jobHistory[jobIndex] ? jobHistory[jobIndex] : [];\n                jobHistory[jobIndex] = [oldJob, ...hist];\n            }\n            const newJobs: JobList = [...analysis.jobs];\n            newJobs[jobIndex] = action.payload.job;\n            return updateById(state, action.payload.id, { jobs: newJobs, jobHistory })\n        }\n        case analysisActions.ActionTypes.REMOVED: {\n            return filterWithPred(state, (r: AnalysisState) => r.id !== action.payload.id);\n        }\n        case datasetActions.ActionTypes.DELETE: {\n            return filterWithPred(state, (r: AnalysisState) => r.dataset !== action.payload.dataset);\n        }\n    }\n    return state;\n}","import { AllActions } from \"../actions\";\nimport * as configActions from '../config/actions';\nimport { DirectoryListingDetails, FSPlace } from \"../messages\";\nimport * as browserActions from './actions';\nimport { DirectoryBrowserState } from \"./types\";\n\nconst initialBrowserState: DirectoryBrowserState = {\n    isOpen: false,\n    isLoading: true,\n    path: \"/\",\n    drives: [],\n    places: {},\n    files: [] as DirectoryListingDetails[],\n    dirs: [] as DirectoryListingDetails[],\n}\n\nexport function directoryBrowserReducer(state: DirectoryBrowserState = initialBrowserState, action: AllActions): DirectoryBrowserState {\n    switch (action.type) {\n        case configActions.ActionTypes.FETCHED: {\n            return Object.assign({}, state, {\n                path: action.payload.config.cwd,\n            })\n            break;\n        }\n        case browserActions.ActionTypes.OPEN: {\n            return Object.assign({}, state, {\n                isOpen: true,\n            })\n            break;\n        }\n        case browserActions.ActionTypes.CANCEL: {\n            return Object.assign({}, state, {\n                isOpen: false,\n            })\n            break;\n        }\n        case browserActions.ActionTypes.LIST_DIRECTORY: {\n            return Object.assign({}, state, {\n                isLoading: true,\n            })\n            break;\n        }\n        case browserActions.ActionTypes.DIRECTORY_LISTING: {\n            const places = action.payload.places.reduce((acc, place: FSPlace) => {\n                return Object.assign({}, acc, {\n                    [place.key]: place,\n                })\n            }, {});\n            return Object.assign({}, state, {\n                isLoading: false,\n                path: action.payload.path,\n                files: action.payload.files,\n                dirs: action.payload.dirs,\n                drives: action.payload.drives,\n                places,\n            })\n            break;\n        }\n        case browserActions.ActionTypes.SELECT_FULL_PATH:\n        case browserActions.ActionTypes.SELECT: {\n            return Object.assign({}, state, {\n                isLoading: false,\n                isOpen: false,\n            });\n        }\n    }\n    return state;\n}","import { AllActions } from \"../actions\";\nimport * as channelActions from './actions';\n\nexport interface ChannelStatusReducer {\n    status: ChannelStatusCodes,\n}\n\nexport enum ChannelStatusCodes {\n    CONNECTING = \"connecting\",\n    CONNECTED = \"connected\",\n    READY = \"ready\",\n    WAITING = \"waiting\",\n}\n\nconst initialChannelState: ChannelStatusReducer = {\n    status: ChannelStatusCodes.WAITING,\n}\n\nexport function channelStatusReducer(state = initialChannelState, action: AllActions): ChannelStatusReducer {\n    switch (action.type) {\n        case channelActions.ActionTypes.OPEN: {\n            return { status: ChannelStatusCodes.CONNECTED };\n        }\n        case channelActions.ActionTypes.INITIAL_STATE: {\n            return { status: ChannelStatusCodes.READY };\n        }\n        case channelActions.ActionTypes.CLOSE: {\n            return { status: ChannelStatusCodes.WAITING };\n        }\n    }\n    return state;\n}","import { AllActions } from \"../actions\";\nimport { ConnectRequestParams } from \"../messages\";\nimport * as clusterActions from './actions';\n\nexport type ClusterConnectionState = {\n    status: \"connected\",\n    params: ConnectRequestParams,\n} | {\n    status: \"disconnected\",\n} | {\n    status: \"unknown\",\n}\n\nconst initialClusterConnectionState: ClusterConnectionState = {\n    status: \"unknown\"\n}\n\nexport function clusterConnectionReducer(state = initialClusterConnectionState, action: AllActions): ClusterConnectionState {\n    switch (action.type) {\n        case clusterActions.ActionTypes.NOT_CONNECTED: {\n            return {\n                status: \"disconnected\"\n            };\n        }\n        case clusterActions.ActionTypes.CONNECTED: {\n            return {\n                status: \"connected\",\n                params: action.payload.params,\n            }\n        }\n    }\n    return state;\n}","import { AllActions } from \"../actions\";\nimport * as browserActions from '../browser/actions';\nimport * as datasetActions from '../dataset/actions';\nimport { DatasetFormParams, MsgPartConfig } from \"../messages\";\nimport * as configActions from './actions';\nimport { makeUnique } from \"./helpers\";\n\nexport interface LocalConfig {\n    fileHistory: string[],\n    lastOpened: {\n        [path: string]: DatasetFormParams\n    }\n}\n\nexport interface ConfigMeta {\n    haveConfig: boolean,\n}\n\nexport type ConfigParams = MsgPartConfig & LocalConfig;\nexport type ConfigState = ConfigParams & ConfigMeta;\n\nconst initialConfigState: ConfigState = {\n    version: \"\",\n    revision: \"\",\n    localCores: 0,\n    cwd: \"/\",\n    separator: \"/\",\n    lastOpened: {},\n    fileHistory: [],\n    haveConfig: false,\n}\n\nexport function configReducer(state = initialConfigState, action: AllActions): ConfigState {\n    switch (action.type) {\n        case configActions.ActionTypes.FETCHED: {\n            return Object.assign({}, action.payload.config, { haveConfig: true });\n        }\n        case browserActions.ActionTypes.DIRECTORY_LISTING: {\n            return Object.assign({}, state, {\n                cwd: action.payload.path,\n            });\n        }\n        case datasetActions.ActionTypes.CREATE: {\n            const newLastOpened = Object.assign({}, state.lastOpened, { [action.payload.dataset.params.path]: action.payload.dataset.params });\n            const newFileHistory = makeUnique([\n                action.payload.dataset.params.path, ...state.fileHistory\n            ]).slice(0, 11);\n            return Object.assign({}, state, {\n                lastOpened: newLastOpened,\n                fileHistory: newFileHistory,\n            });\n        }\n    }\n    return state;\n}","import { AllActions } from \"../actions\";\nimport * as channelActions from '../channel/actions';\nimport { constructById, filterWithPred, insertById, updateById } from \"../helpers/reducerHelpers\";\nimport { Dataset, DatasetState, DatasetStatus } from \"../messages\";\nimport * as datasetActions from './actions';\nimport { DatasetsState, OpenDatasetState } from \"./types\";\n\nconst initialDatasetState: DatasetsState = {\n    byId: {},\n    ids: [],\n};\n\nexport function datasetReducer(state = initialDatasetState, action: AllActions): DatasetsState {\n    switch (action.type) {\n        case channelActions.ActionTypes.INITIAL_STATE: {\n            const datasets = action.payload.datasets.map(ds => Object.assign({}, ds, { status: DatasetStatus.OPEN }));\n            return {\n                byId: constructById(datasets, ds => ds.id),\n                ids: datasets.map(ds => ds.id),\n            }\n        }\n        case datasetActions.ActionTypes.CREATE: {\n            const ds: Dataset = {\n                ...action.payload.dataset,\n                status: DatasetStatus.OPENING\n            };\n            return insertById(state, action.payload.dataset.id, ds);\n        }\n        case datasetActions.ActionTypes.CREATED: {\n            const ds = Object.assign({}, action.payload.dataset, { status: DatasetStatus.OPEN });\n            return updateById(state, action.payload.dataset.id, ds);\n        }\n        case datasetActions.ActionTypes.ERROR: {\n            return filterWithPred(state, (r: DatasetState) => r.id !== action.payload.dataset);\n        }\n        case datasetActions.ActionTypes.DELETE: {\n            return updateById(state, action.payload.dataset, { status: DatasetStatus.DELETING });\n        }\n        case datasetActions.ActionTypes.DELETED: {\n            return filterWithPred(state, (r: DatasetState) => r.id !== action.payload.dataset);\n        }\n    }\n    return state;\n}\n\nconst initialOpenDatasetState: OpenDatasetState = {\n    busy: false,\n    busyPath: \"\",\n    formVisible: false,\n    formPath: \"/\",\n    formInitialParams: undefined,\n}\n\nexport function openDatasetReducer(state = initialOpenDatasetState, action: AllActions): OpenDatasetState {\n    switch (action.type) {\n        case datasetActions.ActionTypes.OPEN: {\n            return {\n                ...state,\n                formVisible: true,\n                formPath: action.payload.path,\n                formInitialParams: action.payload.initialParams,\n            };\n        }\n        case datasetActions.ActionTypes.CANCEL_OPEN: {\n            return {\n                ...state,\n                formVisible: false,\n            }\n        }\n        case datasetActions.ActionTypes.CREATE: {\n            return {\n                ...state,\n                formVisible: false,\n            }\n        }\n        case datasetActions.ActionTypes.DETECT: {\n            return {\n                ...state,\n                busyPath: action.payload.path,\n                busy: true,\n            }\n        }\n        case datasetActions.ActionTypes.DETECTED:\n        case datasetActions.ActionTypes.DETECT_FAILED: {\n            return {\n                ...state,\n                busyPath: \"\",\n                busy: false,\n            }\n        }\n    }\n    return state;\n}","import { AllActions } from \"../actions\";\nimport * as analysisActions from '../analysis/actions';\nimport * as browserActions from '../browser/actions';\nimport * as channelActions from '../channel/actions';\nimport * as datasetActions from '../dataset/actions';\nimport { ById, filterWithPred, insertById } from \"../helpers/reducerHelpers\";\nimport * as errorActions from './actions';\n\nexport interface ErrorMessage {\n    id: string,\n    msg: string,\n    timestamp: number,\n}\n\nexport type ErrorState = ById<ErrorMessage>;\n\nconst initialErrorState: ErrorState = {\n    byId: {},\n    ids: [],\n};\n\nexport function errorReducer(state = initialErrorState, action: AllActions): ErrorState {\n    switch (action.type) {\n        case browserActions.ActionTypes.ERROR:\n        case datasetActions.ActionTypes.ERROR:\n        case channelActions.ActionTypes.ERROR:\n        case analysisActions.ActionTypes.ERROR:\n        case channelActions.ActionTypes.JOB_ERROR: {\n            return insertById(state, action.payload.id, {\n                id: action.payload.id,\n                msg: action.payload.msg,\n                timestamp: action.payload.timestamp,\n            });\n        }\n        case channelActions.ActionTypes.OPEN: {\n            return initialErrorState;\n        }\n        case errorActions.ActionTypes.DISMISS: {\n            return filterWithPred(state, (r: ErrorMessage) => r.id !== action.payload.id);\n        }\n    }\n    return state;\n}","import { AllActions } from \"../actions\";\nimport * as channelActions from '../channel/actions';\nimport { ById, insertById, updateById } from \"../helpers/reducerHelpers\";\nimport * as jobActions from './actions';\nimport { JobRunning, JobState, JobStatus } from \"./types\";\n\nexport type JobReducerState = ById<JobState>;\n\nconst initialJobState: JobReducerState = {\n    byId: {},\n    ids: [],\n};\n\nexport function jobReducer(state = initialJobState, action: AllActions): JobReducerState {\n    switch (action.type) {\n        case jobActions.ActionTypes.CREATE: {\n            const createResult = insertById(\n                state,\n                action.payload.id,\n                {\n                    id: action.payload.id,\n                    dataset: action.payload.dataset,\n                    running: JobRunning.CREATING,\n                    status: JobStatus.CREATING,\n                    results: [],\n                    startTimestamp: action.payload.timestamp,\n                }\n            )\n            return createResult;\n        }\n        case channelActions.ActionTypes.JOB_STARTED: {\n            return updateById(\n                state,\n                action.payload.job,\n                {\n                    running: JobRunning.RUNNING,\n                    status: JobStatus.IN_PROGRESS,\n                    startTimestamp: action.payload.timestamp,\n                }\n            )\n        }\n        case channelActions.ActionTypes.TASK_RESULT: {\n            return updateById(\n                state,\n                action.payload.job,\n                {\n                    results: action.payload.results,\n                }\n            );\n        }\n        case channelActions.ActionTypes.FINISH_JOB: {\n            const { job, timestamp, results } = action.payload;\n            return updateById(\n                state,\n                job,\n                {\n                    running: JobRunning.DONE,\n                    status: JobStatus.SUCCESS,\n                    results,\n                    endTimestamp: timestamp,\n                }\n            );\n        }\n        case channelActions.ActionTypes.JOB_ERROR: {\n            const { job, timestamp } = action.payload;\n            return updateById(\n                state,\n                job,\n                {\n                    running: JobRunning.DONE,\n                    status: JobStatus.ERROR,\n                    endTimestamp: timestamp,\n                }\n            )\n        }\n    }\n    return state;\n}","import { combineReducers } from \"redux\";\nimport { analysisReducer } from \"./analysis/reducers\";\nimport { directoryBrowserReducer } from './browser/reducers';\nimport { channelStatusReducer } from \"./channel/reducers\";\nimport { clusterConnectionReducer } from \"./cluster/reducers\";\nimport { configReducer } from \"./config/reducers\";\nimport { datasetReducer, openDatasetReducer } from \"./dataset/reducers\";\nimport { errorReducer } from \"./errors/reducers\";\nimport { jobReducer } from \"./job/reducers\";\n\nexport const rootReducer = combineReducers({\n    analyses: analysisReducer,\n    channelStatus: channelStatusReducer,\n    clusterConnection: clusterConnectionReducer,\n    datasets: datasetReducer,\n    openDataset: openDatasetReducer,\n    jobs: jobReducer,\n    errors: errorReducer,\n    config: configReducer,\n    browser: directoryBrowserReducer,\n})\n\nexport type RootReducer = ReturnType<typeof rootReducer>;","// tslint:disable:ordered-imports\nimport \"core-js/fn/symbol/iterator.js\";\nimport \"core-js/es6/symbol.js\";\nimport 'react-app-polyfill/ie11';\n// tslint:enable:ordered-imports\n\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { applyMiddleware, compose, createStore } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\nimport { rootSaga } from './sagas';\nimport { rootReducer } from './store';\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst composeEnhancers = (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(rootReducer, composeEnhancers(\n    applyMiddleware(\n        sagaMiddleware,\n    )\n));\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root') as HTMLElement\n);\nregisterServiceWorker();\n\nsagaMiddleware.run(rootSaga);"],"sourceRoot":""}