#!/usr/bin/env python
# -*- encoding: utf-8 -*-
import os
import re
import shutil
import tempfile
import subprocess

import click


VERSION_RE = re.compile(
    r'^(\d+)\.(\d+)\.(\d+)(\.rc\d+)?(\.dev0)?$'
)


def render_version(version_file, new_version):
    version_stm = '__version__ = "{}"\n'.format(new_version)
    with tempfile.NamedTemporaryFile(
            dir=os.path.dirname(version_file),
            delete=False
    ) as tmpf:
        tmpf.write(version_stm.encode("utf8"))
        shutil.move(tmpf.name, version_file)


def read_version(version_file):
    res = {}
    with open(version_file) as f:
        exec(f.read(), res)
    return res['__version__']


def do_git_commit(old_version, new_version, version_file):
    cmd = ["git", "commit", version_file, "-m",
           "bump version: {} â†’ {}".format(old_version, new_version)]
    subprocess.check_call(cmd)


def do_git_tag(tag):
    cmd = ["git", "tag", tag]
    subprocess.check_call(cmd)


@click.command()
@click.argument('new_version', type=str)
@click.option('--tag/--no-tag', help='create a git tag after bumping', default=False)
@click.option('--commit/--no-commit', help='create a git commit after bumping', default=False)
def main(new_version, tag, commit):
    """
    bump the version in libertem.__version__

    NEW_VERSION should be pep440 compatible and conform to our version conventions
    """
    if tag and not commit:
        raise click.UsageError("can only tag together with commit")
    if VERSION_RE.match(new_version) is None:
        raise click.UsageError("could not parse version, may not conform to our scheme")
    here = os.path.abspath(os.path.dirname(__file__))
    version_file = os.path.join(here, '..', 'src', 'libertem', '__version__.py')
    old_version = read_version(version_file)
    render_version(version_file, new_version)
    version_tag = "v{}".format(new_version)
    if commit:
        do_git_commit(old_version=old_version, new_version=new_version,
                      version_file=version_file)
    if tag:
        do_git_tag(tag=version_tag)
    print("version bumped from {} to {}".format(old_version, new_version))

    if tag:
        print("now, push the new version: $ git push && git push origin {}".format(version_tag))
    else:
        if commit:
            print("now, tag as needed and push")
        else:
            print("now, commit the new version, tag as needed and push")


if __name__ == "__main__":
    main()
